// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/constraint;
import ballerina/data.jsondata;
import ballerina/http;

public type EnterpriseIdp record {
    string? loginUrl?;
    string? certificate?;
    boolean requestSigned?;
};

# Represents the Queries record for the operation: cardsidmembersvoted-1
public type Cardsidmembersvoted1Queries record {
    # The ID of the member to vote 'yes' on the card
    TrelloID value;
};

public type EnterpriseLicenses record {
    decimal totalMembers?;
    EnterpriseLicensesRelatedEnterprises[] relatedEnterprises?;
    decimal? maxMembers?;
};

# Represents the Queries record for the operation: put-members-id-boardbackgrounds-idbackground
public type PutMembersIdBoardbackgroundsIdbackgroundQueries record {
    # One of: `dark`, `light`, `unknown`
    "dark"|"light"|"unknown" brightness?;
    # Whether the background should be tiled
    boolean tile?;
};

# The new position for the List
public type Value1Value1Value1OneOf123 "top"|"bottom";

# Represents the Queries record for the operation: put-lists-id-field
public type PutListsIdFieldQueries record {
    # The new value for the field
    Value1 value?;
};

# Represents the Queries record for the operation: get-members-id-tokens
public type GetMembersIdTokensQueries record {
    # Whether to include webhooks
    boolean webhooks = false;
};

public type ActionDisplayEntitiesMemberCreator record {
    TrelloID id?;
    string text?;
    string 'type?;
    string username?;
};

public type ActionData record {
    string text?;
    ActionDataList list?;
    ActionDataCard card?;
    ActionDataBoard board?;
};

public type Prefs record {
    string backgroundBrightness?;
    string comments?;
    string backgroundTopColor?;
    boolean canBeEnterprise?;
    boolean hideVotes?;
    string backgroundImage?;
    boolean canBeOrg?;
    string backgroundBottomColor?;
    "disabled"|"enabled" voting?;
    boolean calendarFeedEnabled?;
    boolean backgroundTile?;
    boolean canBePublic?;
    boolean canBePrivate?;
    ImageDescriptor[] backgroundImageScaled?;
    "org"|"board" permissionLevel?;
    CardAging cardAging?;
    boolean canInvite?;
    "admins"|"members" invitations?;
    boolean isTemplate?;
    TrelloID background?;
    boolean cardCovers?;
    boolean selfJoin?;
};

# Represents the Queries record for the operation: put-actions-id-text
public type PutActionsIdTextQueries record {
    # The new text for the comment
    string value;
};

# Represents the Queries record for the operation: get-board-id-plugins
public type GetBoardIdPluginsQueries record {
    # One of: `enabled` or `available`
    "enabled"|"available" filter = "enabled";
};

# Represents the Queries record for the operation: put-boards-id-members
public type PutBoardsIdMembersQueries record {
    # Valid values: admin, normal, observer. Determines what type of member the user being added should be of the board
    "admin"|"normal"|"observer" 'type = "normal";
    # The email address of a user to add as a member of the board
    string email;
};

# Represents the Queries record for the operation: post-members-id-savedsearches
public type PostMembersIdSavedsearchesQueries record {
    # The position of the saved search. `top`, `bottom`, or a positive float
    PosStringOrNumber pos;
    # The search query
    string query;
    # The name for the saved search
    string name;
};

# Represents the Queries record for the operation: get-cards-id-members
public type GetCardsIdMembersQueries record {
    # `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
    string fields = "avatarHash,fullName,initials,username";
};

public type CustomFieldItemsValue record {
    string checked?;
};

# Represents the Queries record for the operation: get-checklists-id-checkitems-idcheckitem
public type GetChecklistsIdCheckitemsIdcheckitemQueries record {
    # One of: `all`, `name`, `nameData`, `pos`, `state`, `type`, `due`, `dueReminder`, `idMember`,
    "all"|"name"|"nameData"|"pos"|"state"|"type"|"due"|"dueReminder"|"idMember" fields = "all";
};

public type CustomFieldDisplayValue record {
    string text?;
};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    http:ClientHttp1Settings http1Settings = {};
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings = {};
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 30;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with Redirection
    http:FollowRedirects followRedirects?;
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache = {};
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with cookies
    http:CookieConfig cookieConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits = {};
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Provides settings related to client socket configuration
    http:ClientSocketConfig socketConfig = {};
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};

public type InlineParameterItemsIdMembers TrelloID;

# Represents the Queries record for the operation: get-cards-id-list
public type GetCardsIdListQueries record {
    # `all` or a comma-separated list of list [fields](/cloud/trello/guides/rest-api/object-definitions/)
    string fields = "all";
};

# An object containing the key and value to set for the card's Custom Field value. The key used to set the value should match the type of Custom Field defined
public type CardsidCardcustomFieldidCustomFielditemValue record {
    string date?;
    decimal number?;
    boolean checked?;
    string text?;
};

public type IdOneOf2 string;

public type id_4 string|TrelloID;

# Represents the Queries record for the operation: get-notifications-id-card
public type GetNotificationsIdCardQueries record {
    # `all` or a comma-separated list of card [fields](/cloud/trello/guides/rest-api/object-definitions/)
    CardFields fields?;
};

public type PluginData record {
    "private"|"shared" access?;
    "member"|"board"|"organization"|"card" scope?;
    TrelloID idPlugin?;
    TrelloID id?;
    TrelloID idModel?;
    string value?;
};

# Represents the Queries record for the operation: post-notifications-all-read
public type PostNotificationsAllReadQueries record {
    # Boolean to specify whether to mark as read or unread (defaults to `true`, marking as read)
    boolean read = true;
    # A comma-seperated list of IDs. Allows specifying an array of notification IDs to change the read state for. This will become useful as we add grouping of notifications to the UI, with a single button to mark all notifications in the group as read/unread
    TrelloID[] ids?;
};

# Represents the Queries record for the operation: get-lists-id-board
public type GetListsIdBoardQueries record {
    # `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/#board-object)
    string fields = "all";
};

public type LimitsObject record {
    decimal warnAt?;
    decimal disableAt?;
    "ok"|"warning" status?;
};

# Represents the Queries record for the operation: put-organizations-id-members-idmember
public type PutOrganizationsIdMembersIdmemberQueries record {
    # One of: `admin`, `normal`
    "admin"|"normal" 'type;
};

# Represents the Queries record for the operation: get-enterprises-id-claimableOrganizations
public type GetEnterprisesIdClaimableOrganizationsQueries record {
    # Specifies the sort order to return matching documents
    string cursor?;
    # Date in YYYY-MM-DD format indicating the date to search up to for activeness of workspace
    string activeSince?;
    # Date in YYYY-MM-DD format indicating the date to search up to for inactiveness of workspace
    string inactiveSince?;
    # Limits the number of workspaces to be sorted
    int 'limit?;
    # Name of the enterprise to retrieve workspaces for
    string name?;
};

# Represents the Queries record for the operation: get-boards-id-memberships
public type GetBoardsIdMembershipsQueries record {
    # One of `admins`, `all`, `none`, `normal`
    "admins"|"all"|"none"|"normal" filter = "all";
    # Works for premium organizations only
    boolean activity = false;
    # Fields to show if `member=true`. Valid values: [nested member resource fields](/cloud/trello/guides/rest-api/nested-resources/)
    @http:Query {name: "member_fields"}
    MemberFields memberFields?;
    # Shows the type of member to the org the user is. For instance, an org admin will have a `orgMemberType` of `admin`
    boolean orgMemberType = false;
    # Determines whether to include a [nested member object](/cloud/trello/guides/rest-api/nested-resources/)
    boolean member = false;
};

# Represents the Queries record for the operation: get-members-id-organizations
public type GetMembersIdOrganizationsQueries record {
    # One of: `all`, `members`, `none`, `public` (Note: `members` filters to only private Workspaces)
    "all"|"members"|"none"|"public" filter = "all";
    # Whether or not to include paid account information in the returned workspace object
    @http:Query {name: "paid_account"}
    boolean paidAccount = false;
    # `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
    OrganizationFields fields?;
};

# Represents the Queries record for the operation: put-webhooks-id
public type PutWebhooksIdQueries record {
    # A string with a length from `0` to `16384`
    @constraint:String {maxLength: 16384}
    string description?;
    # Determines whether the webhook is active and sending `POST` requests
    boolean active?;
    # A valid URL that is reachable with a `HEAD` and `POST` request
    string callbackURL?;
    # ID of the model to be monitored
    TrelloID idModel?;
};

public type PosOneOf1 "top"|"bottom";

public type Pos PosOneOf1|PosPosOneOf12;

public type Pos1OneOf1 "top"|"bottom";

# Profile data with restricted visibility. These fields are visible only to members of the
# same organization. The values here (full name, for example) may differ from the values
# at the top level of the response
public type MemberNonPublic record {
    # A URL that references the non-public avatar for the member
    string avatarUrl?;
    string avatarHash?;
    string initials?;
    string fullName?;
};

public type ActionDataBoard record {
    string name?;
    TrelloID id?;
    string shortLink?;
};

public type id_1 TrelloID|string;

public type id_3 TrelloID|string;

public type id_2 TrelloID|string;

# Represents the Queries record for the operation: get-labels-id
public type GetLabelsIdQueries record {
    # all or a comma-separated list of [fields](/cloud/trello/guides/rest-api/object-definitions/)
    string fields = "all";
};

public type CustomStickerScaled record {
    TrelloID id?;
};

public type InlineParameterItemsIdLabels TrelloID;

# Represents the Queries record for the operation: get-cards-id-stickers
public type GetCardsIdStickersQueries record {
    # `all` or a comma-separated list of sticker [fields](/cloud/trello/guides/rest-api/object-definitions/)
    string fields = "all";
};

public type SavedSearch record {
    PosStringOrNumber pos?;
    string query?;
    string name?;
    TrelloID id?;
};

public type ExportStatus record {
    string stage?;
    boolean finished?;
    decimal attempts?;
};

public type CheckItemStatesOneOf1 string;

# Represents the Queries record for the operation: put-enterprises-id-members-idmember-licensed
public type PutEnterprisesIdMembersIdmemberLicensedQueries record {
    # Boolean value to determine whether the user should be given an Enterprise license (true) or not (false)
    boolean value;
};

public type PendingOrganizations record {
    string date?;
    string displayName?;
    TrelloID idMember?;
    decimal membershipCount?;
    TrelloID id?;
    PendingOrganizationsMemberRequestor memberRequestor?;
    string? logoUrl?;
    PendingOrganizationsTransferability transferability?;
};

# Represents the Queries record for the operation: get-notifications-id-organization
public type GetNotificationsIdOrganizationQueries record {
    # `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
    OrganizationFields fields?;
};

public type ClaimableOrganizationsOrganizations record {
    # The date of the most recent activity on any of the boards in the workspace. If the workspace has no boards, or the boards have no activity, this value will be null
    string? dateLastActive?;
    decimal activeMembershipCount?;
    string displayName?;
    string name?;
    TrelloID id?;
    string? logoUrl?;
    TrelloID[] idActiveAdmins?;
    decimal[] products?;
};

public type Notification record {
    string id?;
    boolean unread?;
    "cardDueSoon" 'type?;
    string date?;
    string dateRead?;
    string data?;
    Card card?;
    Board board?;
    TrelloID idMemberCreator?;
    TrelloID idAction?;
    record {}[] reactions?;
};

# Represents the Queries record for the operation: get-checklists-id-checkitems
public type GetChecklistsIdCheckitemsQueries record {
    # One of: `all`, `none`
    "all"|"none" filter = "all";
    # One of: `all`, `name`, `nameData`, `pos`, `state`,`type`, `due`, `dueReminder`, `idMember`
    "all"|"name"|"nameData"|"pos"|"state"|"type"|"due"|"dueReminder"|"idMember" fields = "all";
};

# Represents the Queries record for the operation: get-enterprises-id-signupurl
public type GetEnterprisesIdSignupurlQueries record {
    # Designates whether the user has seen/consented to the Trello ToS prior to being redirected to the enterprise signup page/their IdP
    boolean tosAccepted = false;
    boolean authenticate = false;
    boolean confirmationAccepted = false;
    # Any valid URL
    string? returnUrl?;
};

public type MemberPrefsTwoFactor record {
    boolean needsNewBackups?;
    boolean enabled?;
};

# Represents the Queries record for the operation: put-boards-id-myPrefs-showsidebar
public type PutBoardsIdMyPrefsShowsidebarQueries record {
    # Determines whether to show the side bar
    boolean value;
};

# Represents the Queries record for the operation: get-lists-id-actions
public type GetListsIdActionsQueries record {
    # A comma-separated list of [action types](https://developer.atlassian.com/cloud/trello/guides/rest-api/action-types/)
    string filter?;
};

public type Id2 TrelloID|Id2OneOf2;

# Represents the Queries record for the operation: put-actions-id
public type PutActionsIdQueries record {
    # The new text for the comment
    string text;
};

public type Id1 TrelloID|Id1OneOf2;

public type Pos2 Pos2OneOf1|Pos2Pos2OneOf12;

public type Pos3 Pos3OneOf1|Pos3Pos3OneOf12;

public type TokenFields "identifier"|"idMember"|"dateCreated"|"dateExpires"|"permissions";

# Represents the Queries record for the operation: get-members-id-boardbackgrounds
public type GetMembersIdBoardbackgroundsQueries record {
    # One of: `all`, `custom`, `default`, `none`, `premium`
    "all"|"custom"|"default"|"none"|"premium" filter = "all";
};

# Represents the Queries record for the operation: get-search-members
public type GetSearchMembersQueries record {
    TrelloID idBoard?;
    boolean onlyOrgMembers = false;
    # Search query 1 to 16384 characters long
    @constraint:String {maxLength: 16394, minLength: 1}
    string query;
    # The maximum number of results to return. Maximum of 20
    @constraint:Int {maxValue: 20}
    int:Signed32 'limit = 8;
    TrelloID idOrganization?;
};

public type Pos1 Pos1OneOf1|Pos1Pos1OneOf12;

public type CardsidCardcustomFieldsCustomFieldItems record {
    # The ID of the option for the list type Custom Field. This is optional if Custom Field is not list type
    anydata idValue?;
    # The ID of the Custom Field
    anydata idCustomField?;
    # An object containing the key and value to set for the card's Custom Field value. The key used to set the value should match the type of Custom Field defined. This is optional if Custom Field is list type
    CardsidCardcustomFieldsValue value?;
};

public type IdMember1 TrelloID|IdMember1OneOf2;

# Represents the Queries record for the operation: post-lists
public type PostListsQueries record {
    # The long ID of the board the list should be created on
    TrelloID idBoard;
    # ID of the List to copy into the new List
    TrelloID idListSource?;
    # Position of the list. `top`, `bottom`, or a positive floating point number
    Pos3 pos?;
    # Name for the list
    string name;
};

public type NotificationChannelSettings record {
    string id?;
    TrelloID idMember?;
    BlockedKey[] blockedKeys?;
    Channel channel?;
};

public type NotificationFields "id"|"unread"|"type"|"date"|"dateRead"|"data"|"card"|"board"|"idMemberCreator"|"idAction"|"reactions";

# Represents the Queries record for the operation: membersidcustomemojiidemoji
public type MembersidcustomemojiidemojiQueries record {
    # `all` or a comma-separated list of `name`, `url`
    "name"|"url"|"all" fields = "all";
};

public type CardsidCardcustomFieldidCustomFielditemcardsidCardcustomFieldidCustomFielditemOneOf12 record {
    TrelloID idValue?;
};

# Represents the Queries record for the operation: get-tokens-token
public type GetTokensTokenQueries record {
    # Determines whether to include webhooks
    boolean webhooks = false;
    # `all` or a comma-separated list of `dateCreated`, `dateExpires`, `idMember`, `identifier`, `permissions`
    TokenFields fields?;
};

# Represents the Queries record for the operation: get-actions-id-member
public type GetActionsIdMemberQueries record {
    # `all` or a comma-separated list of member fields
    MemberFields fields?;
};

# Represents the Queries record for the operation: post-cards-id-idlabels
public type PostCardsIdIdlabelsQueries record {
    # The ID of the label to add
    TrelloID value?;
};

# Represents the Queries record for the operation: put-labels-id
public type PutLabelsIdQueries record {
    # The new color for the label. See: [fields](/cloud/trello/guides/rest-api/object-definitions/) for color options
    Color? color?;
    # The new name for the label
    string name?;
};

# Represents the Queries record for the operation: put-labels-id-field
public type PutLabelsIdFieldQueries record {
    # The new value for the field
    TrelloID value;
};

# Represents the Queries record for the operation: put-cards-idcard-checklist-idchecklist-checkitem-idcheckitem
public type PutCardsIdcardChecklistIdchecklistCheckitemIdcheckitemQueries record {
    # `top`, `bottom`, or a positive float
    PosStringOrNumber pos?;
};

public type AttachmentsOneOf1 "cover";

# Represents the Queries record for the operation: put-lists-id
public type PutListsIdQueries record {
    # Whether the active member is subscribed to this list
    boolean subscribed?;
    # ID of a board the list should be moved to
    TrelloID idBoard?;
    # New position for the list: `top`, `bottom`, or a positive floating point number
    Pos2 pos?;
    # New name for the list
    string name?;
    # Whether the list should be closed (archived)
    boolean closed?;
};

# Represents the Queries record for the operation: emoji
public type EmojiQueries record {
    # The locale to return emoji descriptions and names in. Defaults to the logged in member's locale
    string locale?;
    # `true` to return spritesheet URLs in the response
    boolean spritesheets = false;
};

public type ActionFields "id"|"idMemberCreator"|"data"|"type"|"date"|"limits"|"display"|"memberCreator";

# Represents the Queries record for the operation: get-members=id
public type GetMembersIdQueries record {
    boolean savedSearches = false;
    # One of: `all`, `custom`, `default`, `none`, `premium`
    "all"|"custom"|"default"|"none"|"premium" boardBackgrounds = "none";
    # See the [Cards Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#cards-nested-resource) for additional options
    string cards = "none";
    # Whether or not to include paid account information in the returned member object
    # 
    # # Deprecated
    @http:Query {name: "paid_account"}
    @deprecated
    boolean paidAccount = false;
    # One of: `all`, `members`, `none`, `public`
    "all"|"members"|"none"|"public" organizationsInvited = "none";
    # See the [Boards Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#boards-nested-resource)
    string boards?;
    # `all` or `none`
    "all"|"none" customBoardBackgrounds = "none";
    # `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
    @http:Query {name: "organizationsInvited_fields"}
    OrganizationFields organizationsInvitedFields?;
    # `all` or `none`
    "all"|"none" customEmoji = "none";
    # `all` or `none`
    "all"|"none" customStickers = "none";
    # `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)
    @http:Query {name: "boardsInvited_fields"}
    BoardFields boardsInvitedFields?;
    # `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
    @http:Query {name: "organization_fields"}
    OrganizationFields organizationFields?;
    # `all` or a comma-separated list of: closed, members, open, organization, pinned, public, starred, unpinned
    "closed"|"members"|"open"|"organization"|"pinned"|"public"|"starred"|"unpinned" boardsInvited?;
    # Whether to return the boardStars or not
    boolean boardStars = false;
    # Whether or not to include paid account information in the returned workspace object
    @http:Query {name: "organization_paid_account"}
    boolean organizationPaidAccount = false;
    # One of: `all`, `members`, `none`, `public`
    "all"|"members"|"none"|"public" organizations = "none";
    # `all` or `none`
    "all"|"none" tokens = "none";
    # `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
    MemberFields fields?;
    # See the [Actions Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#actions-nested-resource)
    string actions?;
    # See the [Notifications Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#notifications-nested-resource)
    string notifications?;
};

public type Cover record {
    # An object containing information regarding the card's cover 
    #  `brightness` can be sent alongside any of the other parameters, but all of the other parameters are mutually exclusive; you can not have the cover be a color and an `idAttachment` at the same time
    CardsidValue value?;
};

# Represents the Queries record for the operation: put-organizations-id-members
public type PutOrganizationsIdMembersQueries record {
    # Name for the member, at least 1 character not beginning or ending with a space
    @constraint:String {minLength: 1}
    string fullName;
    # One of: `admin`, `normal`
    "admin"|"normal" 'type = "normal";
    # An email address
    string email;
};

public type InlineResponse2001 Member;

# Represents the Queries record for the operation: get-members-id-organizationsinvited
public type GetMembersIdOrganizationsinvitedQueries record {
    # `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
    OrganizationFields fields?;
};

public type CustomFieldDisplayOptions record {
    string color?;
    decimal pos?;
    TrelloID id?;
    TrelloID idCustomField?;
    CustomFieldDisplayValue value?;
};

public type InlineResponse2003 Board;

# Represents the Queries record for the operation: get-organizations-id-memberships
public type GetOrganizationsIdMembershipsQueries record {
    # `all` or a comma-separated list of: `active`, `admin`, `deactivated`, `me`, `normal`
    "all"|"active"|"admin"|"deactivated"|"me"|"normal" filter = "all";
    # Whether to include the Member objects with the Memberships
    boolean member = false;
};

public type Webhook record {
    string? firstConsecutiveFailDate?;
    decimal consecutiveFailures?;
    string description?;
    boolean active?;
    string callbackURL?;
    TrelloID id?;
    TrelloID idModel?;
};

public type InlineResponse2002 Notification;

public type PosStringOrNumber PosStringOrNumberOneOf1|PosStringOrNumberPosStringOrNumberOneOf12;

public type InlineResponse2005 TrelloList;

# Represents the Queries record for the operation: put-cards-id
public type PutCardsIdQueries record {
    # The ID of the board the card should be on
    TrelloID idBoard?;
    # For use with/by the Map View
    string address?;
    # For use with/by the Map View
    string locationName?;
    # Comma-separated list of label IDs
    TrelloID idLabels?;
    # The start date of a card, or `null`
    string? 'start?;
    # Whether the status of the card is complete
    boolean dueComplete?;
    # For use with/by the Map View. Should be latitude,longitude
    string coordinates?;
    # The ID of the list the card should be in
    TrelloID idList?;
    # Comma-separated list of member IDs
    TrelloID idMembers?;
    # Updates the card's cover
    #  | Option | Values | About |
    #  |--------|--------|-------|
    #  | color | `pink`, `yellow`, `lime`, `blue`, `black`, `orange`, `red`, `purple`, `sky`, `green` | Makes the cover a solid color . |
    #  | brightness | `dark`, `light` | Determines whether the text on the cover should be dark or light.
    #  | url | An unsplash URL: https://images.unsplash.com | Used if making an image the cover. Only Unsplash URLs work.
    #  | idAttachment | ID of an attachment on the card | Used if setting an attached image as the cover. |
    #  | size | `normal`, `full` | Determines whether to show the card name on the cover, or below it. |
    #  
    #  `brightness` can be sent alongside any of the other parameters, but all of the other parameters are mutually exclusive; you can not have the cover be a `color` and an `idAttachment` at the same time. 
    #  
    #  On the brightness options, setting it to light will make the text on the card cover dark:
    #  ![](/cloud/trello/images/rest/cards/cover-brightness-dark.png)
    #  
    #  And vice versa, setting it to dark will make the text on the card cover light: 
    #  ![](/cloud/trello/images/rest/cards/cover-brightness-light.png) 
    Cover cover?;
    # Whether the member is should be subscribed to the card
    boolean subscribed?;
    # The position of the card in its list. `top`, `bottom`, or a positive float
    Pos1 pos?;
    # When the card is due, or `null`
    string? due?;
    # The ID of the image attachment the card should use as its cover, or null for none
    TrelloID idAttachmentCover?;
    # The new name for the card
    string name?;
    # Whether the card should be archived (closed: true)
    boolean closed?;
    # The new description for the card
    string desc?;
};

public type Id1OneOf2 string;

public type InlineResponse2004 Card;

public type CustomFieldsBody record {
    PosStringOrNumber pos;
    # Whether this Custom Field should be shown on the front of Cards
    @jsondata:Name {value: "display_cardFront"}
    boolean displayCardFront = true;
    # The name of the Custom Field
    string name;
    # If the type is `checkbox` 
    string options?;
    # The type of model that the Custom Field is being defined on. This should always be `board`
    "board" modelType;
    # The type of Custom Field to create
    "checkbox"|"list"|"number"|"text"|"date" 'type;
    TrelloID idModel;
};

public type InlineResponse2006 Organization;

public type CardsidCardcustomFieldidCustomFielditemOneOf1 record {
    # An object containing the key and value to set for the card's Custom Field value. The key used to set the value should match the type of Custom Field defined
    CardsidCardcustomFieldidCustomFielditemValue value?;
};

# Represents the Queries record for the operation: membersidavatar
public type MembersidavatarQueries record {
    record {byte[] fileContent; string fileName;} file;
};

# Represents the Queries record for the operation: post-members-id-customstickers
public type PostMembersIdCustomstickersQueries record {
    record {byte[] fileContent; string fileName;} file;
};

public type CardIdChecklists Checklist|TrelloID;

public type Label record {
    TrelloID idBoard?;
    Color? color?;
    # The name displayed for the label
    string? name?;
    TrelloID id?;
};

# Represents the Queries record for the operation: get-boards-id-lists
public type GetBoardsIdListsQueries record {
    # Filter to apply to Lists
    ViewFilter filter?;
    # `all` or a comma-separated list of card [fields](/cloud/trello/guides/rest-api/object-definitions/#card-object)
    @http:Query {name: "card_fields"}
    string cardFields = "all";
    # Filter to apply to Cards
    ViewFilter cards?;
    # `all` or a comma-separated list of list [fields](/cloud/trello/guides/rest-api/object-definitions/)
    string fields = "all";
};

# Represents the Queries record for the operation: post-boards-id-boardplugins
public type PostBoardsIdBoardpluginsQueries record {
    # The ID of the Power-Up to enable
    TrelloID idPlugin?;
};

# Represents the Queries record for the operation: get-batch
public type GetBatchQueries record {
    # A list of API routes. Maximum of 10 routes allowed. The routes should begin with a forward slash and should not include the API version number - e.g. "urls=/members/trello,/cards/[cardId]"
    string urls;
};

# Represents the Queries record for the operation: post-boards-id-lists
public type PostBoardsIdListsQueries record {
    # Determines the position of the list. Valid values: `top`, `bottom`, or a positive number
    string pos = "top";
    # The name of the list to be created. 1 to 16384 characters long
    string name;
};

public type Attachment record {
    string date?;
    Color? edgeColor?;
    float pos?;
    string? bytes?;
    TrelloID idMember?;
    string name?;
    string[] previews?;
    TrelloID id?;
    boolean isUpload?;
    string mimeType?;
    string url?;
};

# Represents the Queries record for the operation: get-enterprises-id-pendingOrganizations
public type GetEnterprisesIdPendingOrganizationsQueries record {
    # Date in YYYY-MM-DD format indicating the date to search up to for activeness of workspace
    string activeSince?;
    # Date in YYYY-MM-DD format indicating the date to search up to for inactiveness of workspace
    string inactiveSince?;
};

public type ActionDisplayEntitiesCard record {
    boolean hideIfContext?;
    TrelloID id?;
    string text?;
    string 'type?;
    string shortLink?;
};

# Represents the Queries record for the operation: get-cards-id
public type GetCardsIdQueries record {
    # Whether to return the checklists on the card. `all` or `none`
    string checklists = "none";
    # Whether to return member objects for members who voted on the card
    boolean membersVoted = false;
    # Whether to include the customFieldItems
    boolean customFieldItems = false;
    # `true`, `false`, or `cover`
    Attachments attachments?;
    # `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/). **Defaults**: `avatarHash, fullName, initials, username`
    @http:Query {name: "member_fields"}
    string memberFields?;
    # `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/). **Defaults**: `avatarHash, fullName, initials, username`
    @http:Query {name: "memberVoted_fields"}
    string memberVotedFields?;
    # `all` or a comma-separated list of sticker [fields](/cloud/trello/guides/rest-api/object-definitions/)
    @http:Query {name: "sticker_fields"}
    string stickerFields = "all";
    # See the [Lists Nested Resource](/cloud/trello/guides/rest-api/nested-resources/)
    boolean list = false;
    boolean checkItemStates = false;
    # `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/#board-object). **Defaults**: `name, desc, descData, closed, idOrganization, pinned, url, prefs`
    @http:Query {name: "board_fields"}
    string boardFields?;
    # `all` or a comma-separated list of attachment [fields](/cloud/trello/guides/rest-api/object-definitions/)
    @http:Query {name: "attachment_fields"}
    string attachmentFields = "all";
    # Whether to return member objects for members on the card
    boolean members = false;
    # Whether to include pluginData on the card with the response
    boolean pluginData = false;
    # Whether to include sticker models with the response
    boolean stickers = false;
    # `all` or a comma-separated list of [fields](/cloud/trello/guides/rest-api/object-definitions/). **Defaults**: `badges, checkItemStates, closed, dateLastActivity, desc, descData, due, start, idBoard, idChecklists, idLabels, idList, idMembers, idShort, idAttachmentCover, manualCoverAttachment, labels, name, pos, shortUrl, url`
    string fields?;
    # `all` or a comma-separated list of `idBoard,idCard,name,pos`
    @http:Query {name: "checklist_fields"}
    string checklistFields = "all";
    # See the [Actions Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#actions-nested-resource)
    string actions?;
    # Whether to return the board object the card is on
    boolean board = false;
};

# Represents the Queries record for the operation: put-lists-id-closed
public type PutListsIdClosedQueries record {
    # Set to true to close (archive) the list
    TrelloID value?;
};

# Represents the Queries record for the operation: get-members-id-boardsinvited
public type GetMembersIdBoardsinvitedQueries record {
    # `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)
    BoardFields fields?;
};

public type CustomFieldItems record {
    TrelloID id?;
    "card"|"board"|"member" modelType?;
    CustomFieldItemsValue value?;
    TrelloID idCustomField?;
    TrelloID idModel?;
};

public type CardBadgesAttachmentsByType record {
    CardBadgesAttachmentsByTypeTrello trello?;
};

# Represents the Queries record for the operation: enterprises-id-members-idMember-deactivated
public type EnterprisesIdMembersIdMemberDeactivatedQueries record {
    # Any valid value that the [nested board resource](/cloud/trello/guides/rest-api/nested-resources/) accepts
    @http:Query {name: "board_fields"}
    BoardFields boardFields?;
    # Any valid value that the [nested organization resource](/cloud/trello/guides/rest-api/nested-resources/) accepts
    @http:Query {name: "organization_fields"}
    OrganizationFields organizationFields?;
    # A comma separated list of any valid values that the [nested member field resource]() accepts
    MemberFields fields?;
    # Determines whether the user is deactivated or not
    boolean value;
};

# Represents the Queries record for the operation: get-checklists-id
public type GetChecklistsIdQueries record {
    # Valid values: `all`, `closed`, `none`, `open`, `visible`. Cards is a nested resource. The additional query params available are documented at [Cards Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#cards-nested-resource)
    "all"|"closed"|"none"|"open"|"visible" cards = "none";
    # The fields on the checkItem to return if checkItems are being returned. `all` or a comma-separated list of: `name`, `nameData`, `pos`, `state`, `type`, `due`, `dueReminder`, `idMember`
    @http:Query {name: "checkItem_fields"}
    "all"|"name"|"nameData"|"pos"|"state"|"type"|"due"|"dueReminder"|"idMember" checkItemFields = "all";
    # The check items on the list to return. One of: `all`, `none`
    "all"|"none" checkItems = "all";
    # `all` or a comma-separated list of checklist [fields](/cloud/trello/guides/rest-api/object-definitions/)
    string fields = "all";
};

# Represents the Queries record for the operation: get-actions-id-card
public type GetActionsIdCardQueries record {
    # `all` or a comma-separated list of card fields
    CardFields fields?;
};

public type IdPluginListingBody record {
    # The overview to show for the given locale
    string overview?;
    # The name to use for the given locale
    string name?;
    # The description to show for the given locale
    string description?;
    # The locale that this listing should be displayed for
    string locale?;
};

public type ImageDescriptor record {
    # The width of the image
    int width?;
    # The URL of the image
    string url?;
    # The height of the image
    int height?;
};

# Represents the Queries record for the operation: post-organizations-id-exports
public type PostOrganizationsIdExportsQueries record {
    # Whether the CSV should include attachments or not
    boolean attachments = true;
};

# Represents the Queries record for the operation: post-checklists
public type PostChecklistsQueries record {
    # The ID of a checklist to copy into the new checklist
    TrelloID idChecklistSource?;
    # The position of the checklist on the card. One of: `top`, `bottom`, or a positive number
    PosStringOrNumber pos?;
    # The ID of the Card that the checklist should be added to
    TrelloID idCard;
    # The name of the checklist. Should be a string of length 1 to 16384
    @constraint:String {maxLength: 16384, minLength: 1}
    string name?;
};

# Represents the Queries record for the operation: post-cards-id-actions-comments
public type PostCardsIdActionsCommentsQueries record {
    # The comment
    string text;
};

public type InlineParameterItemsFields AttachmentFields;

public type EnterpriseOrganizationPrefs record {
    record {} boardDeleteRestrict?;
    ("computer"|"trello"|"google-drive"|"box"|"onedrive"|"link")[] attachmentRestrictions?;
    record {} boardVisibilityRestrict?;
};

public type Color "yellow"|"purple"|"blue"|"red"|"green"|"orange"|"black"|"sky"|"pink"|"lime"?;

public type CustomFieldsidBody record {
    PosStringOrNumber pos?;
    # The name of the Custom Field
    string name?;
    # Whether to display this custom field on the front of cards
    @jsondata:Name {value: "display/cardFront"}
    boolean displayCardFront?;
};

public type InlineParameterItemsIdOrganizations1 Organization;

# Represents the Queries record for the operation: get-actions-id-list
public type GetActionsIdListQueries record {
    # `all` or a comma-separated list of list fields
    ListFields fields?;
};

# Represents the Queries record for the operation: post-checklists-id-checkitems
public type PostChecklistsIdCheckitemsQueries record {
    # A dueReminder for the due date on the checkitem
    decimal? dueReminder?;
    # The position of the check item in the checklist. One of: `top`, `bottom`, or a positive number
    PosStringOrNumber pos?;
    # A due date for the checkitem
    string due?;
    # An ID of a member resource
    TrelloID idMember?;
    # The name of the new check item on the checklist. Should be a string of length 1 to 16384
    @constraint:String {maxLength: 16384, minLength: 1}
    string name;
    # Determines whether the check item is already checked when created
    boolean checked = false;
};

# Represents the Queries record for the operation: put-enterprises-id-enterpriseJoinRequest-bulk
public type PutEnterprisesIdEnterpriseJoinRequestBulkQueries record {
    # An array of IDs of an Organization resource
    InlineParameterItemsIdOrganizations1[] idOrganizations;
};

# Represents the Queries record for the operation: post-enterprises-id-tokens
public type PostEnterprisesIdTokensQueries record {
    # One of: `1hour`, `1day`, `30days`, `never`
    string expiration = "none";
};

# Represents the Queries record for the operation: get-cards-id-stickers-idsticker
public type GetCardsIdStickersIdstickerQueries record {
    # `all` or a comma-separated list of sticker [fields](/cloud/trello/guides/rest-api/object-definitions/)
    string fields = "all";
};

public type ActionDisplayEntities record {
    ActionDisplayEntitiesMemberCreator memberCreator?;
    ActionDisplayEntitiesComment comment?;
    ActionDisplayEntitiesContextOn contextOn?;
    ActionDisplayEntitiesCard card?;
};

public type Checklist record {
    TrelloID id?;
};

# Represents the Queries record for the operation: post-tokens-token-webhooks
public type PostTokensTokenWebhooksQueries record {
    # A description to be displayed when retrieving information about the webhook
    string description?;
    # The URL that the webhook should POST information to
    string callbackURL;
    # ID of the object to create a webhook on
    TrelloID idModel;
};

public type IdNotificationsChannelSettingsBody record {
    # Blocked key or array of blocked keys
    BlockedKey|BlockedKey[] blockedKeys;
    Channel channel;
};

# Represents the Queries record for the operation: post-cards-id-attachments
public type PostCardsIdAttachmentsQueries record {
    # The file to attach, as multipart/form-data
    record {byte[] fileContent; string fileName;} file?;
    # Determines whether to use the new attachment as a cover for the Card
    boolean setCover = false;
    # The name of the attachment. Max length 256
    string name?;
    # The mimeType of the attachment. Max length 256
    string mimeType?;
    # A URL to attach. Must start with `http://` or `https://`
    string url?;
};

# Represents the Queries record for the operation: get-boards-id-labels
public type GetBoardsIdLabelsQueries record {
    # The number of Labels to be returned
    @constraint:Int {minValue: 0, maxValue: 1000}
    int:Signed32 'limit = 50;
    # The fields to be returned for the Labels
    Label fields?;
};

# Represents the Queries record for the operation: post-organizations
public type PostOrganizationsQueries record {
    # A URL starting with `http://` or `https://`
    string website?;
    # The name to display for the Organization
    string displayName;
    # A string with a length of at least 3. Only lowercase letters, underscores, and numbers are allowed. If the name contains invalid characters, they will be removed. If the name conflicts with an existing name, a new name will be substituted
    @constraint:String {minLength: 3}
    string name?;
    # The description for the organizations
    string desc?;
};

# Represents the Queries record for the operation: put-boards-id-myPrefs-showsidebarboardactions
public type PutBoardsIdMyPrefsShowsidebarboardactionsQueries record {
    # Determines whether to show the sidebar board actions
    boolean value;
};

public type Action record {
    string date?;
    ActionData data?;
    ActionDisplay display?;
    ActionMemberCreator memberCreator?;
    TrelloID id?;
    string 'type?;
    TrelloID idMemberCreator?;
    ActionLimits limits?;
};

public type OrganizationFields "id"|"name";

# Represents the Queries record for the operation: post-cards-id-stickers
public type PostCardsIdStickersQueries record {
    # For custom stickers, the id of the sticker. For default stickers, the string identifier (like 'taco-cool', see below)
    string image;
    # The rotation of the sticker
    @constraint:Float {minValue: 0, maxValue: 360}
    float rotate = 0;
    # The top position of the sticker, from -60 to 100
    @constraint:Float {minValue: -60, maxValue: 100}
    float top;
    # The left position of the sticker, from -60 to 100
    @constraint:Float {minValue: -60, maxValue: 100}
    float left;
    # The z-index of the sticker
    int zIndex;
};

public type Attachments AttachmentsOneOf1|AttachmentsAttachmentsOneOf12;

public type MembershipMember record {
    string avatarURL?;
    string initials?;
    string id?;
    string fullname?;
    string memberType?;
    string dateLastImpression?;
    boolean confirmed?;
    string email?;
    string username?;
};

public type ActionMemberCreator record {
    boolean activityBlocked?;
    string avatarHash?;
    string avatarUrl?;
    string initials?;
    TrelloID idMemberReferrer?;
    string fullName?;
    TrelloID id?;
    string username?;
};

# The fields on a Card
public type CardFields "id"|"address"|"badges"|"checkItemStates"|"closed"|"coordinates"|"creationMethod"|"dueComplete"|"dateLastActivity"|"desc"|"descData"|"due"|"dueReminder"|"idBoard"|"idChecklists"|"idLabels"|"idList"|"idMembers"|"idMembersVoted"|"idShort"|"idAttachmentCover"|"labels"|"limits"|"locationName"|"manualCoverAttachment"|"name"|"pos"|"shortLink"|"shortUrl"|"subscribed"|"url"|"cover"|"isTemplate";

# Represents the Queries record for the operation: post-boards
public type PostBoardsQueries record {
    # Determines whether card covers are enabled
    @http:Query {name: "prefs_cardCovers"}
    boolean prefsCardCovers = true;
    # The id of a custom background or one of: `blue`, `orange`, `green`, `red`, `purple`, `pink`, `lime`, `sky`, `grey`
    @http:Query {name: "prefs_background"}
    "blue"|"orange"|"green"|"red"|"purple"|"pink"|"lime"|"sky"|"grey" prefsBackground = "blue";
    # Determines whether to use the default set of labels
    boolean defaultLabels = true;
    # Who can vote on this board. One of `disabled`, `members`, `observers`, `org`, `public`
    @http:Query {name: "prefs_voting"}
    "disabled"|"members"|"observers"|"org"|"public" prefsVoting = "disabled";
    # Determines what types of members can invite users to join. One of: `admins`, `members`
    @http:Query {name: "prefs_invitations"}
    "members"|"admins" prefsInvitations = "members";
    # Determines whether users can join the boards themselves or whether they have to be invited
    @http:Query {name: "prefs_selfJoin"}
    boolean prefsSelfJoin = true;
    # The permissions level of the board. One of: `org`, `private`, `public`
    @http:Query {name: "prefs_permissionLevel"}
    "org"|"private"|"public" prefsPermissionLevel = "private";
    # Determines the type of card aging that should take place on the board if card aging is enabled. One of: `pirate`, `regular`
    @http:Query {name: "prefs_cardAging"}
    "pirate"|"regular" prefsCardAging = "regular";
    # The id of a board to copy into the new board
    TrelloID idBoardSource?;
    # Who can comment on cards on this board. One of: `disabled`, `members`, `observers`, `org`, `public`
    @http:Query {name: "prefs_comments"}
    "disabled"|"members"|"observers"|"org"|"public" prefsComments = "members";
    # The new name for the board. 1 to 16384 characters long
    @constraint:String {maxLength: 16384, minLength: 1}
    string name;
    # The id or name of the Workspace the board should belong to
    TrelloID idOrganization?;
    # Determines whether to add the default set of lists to a board (To Do, Doing, Done). It is ignored if `idBoardSource` is provided
    boolean defaultLists = true;
    # To keep cards from the original board pass in the value `cards`
    "cards"|"none" keepFromSource = "none";
    # A new description for the board, 0 to 16384 characters long
    @constraint:String {maxLength: 16384}
    string desc?;
    # The Power-Ups that should be enabled on the new board. One of: `all`, `calendar`, `cardAging`, `recap`, `voting`
    "all"|"calendar"|"cardAging"|"recap"|"voting" powerUps?;
};

public type MemberPrefsTimezoneInfo record {
    string timezoneNext?;
    int offsetCurrent?;
    int offsetNext?;
    string dateNext?;
    string timezoneCurrent?;
};

# Represents the Queries record for the operation: put-boards-id
public type PutBoardsIdQueries record {
    # One of: pirate, regular
    @http:Query {name: "prefs/cardAging"}
    string prefsCardAging?;
    # Name for the orange label. 1 to 16384 characters long
    @http:Query {name: "labelNames/orange"}
    string labelNamesOrange?;
    # Determines whether the calendar feed is enabled or not
    @http:Query {name: "prefs/calendarFeedEnabled"}
    boolean prefsCalendarFeedEnabled?;
    # One of: org, private, public
    @http:Query {name: "prefs/permissionLevel"}
    string prefsPermissionLevel?;
    # Name for the yellow label. 1 to 16384 characters long
    @http:Query {name: "labelNames/yellow"}
    string labelNamesYellow?;
    # Name for the purple label. 1 to 16384 characters long
    @http:Query {name: "labelNames/purple"}
    string labelNamesPurple?;
    # Who can invite people to this board. One of: admins, members
    @http:Query {name: "prefs/invitations"}
    string prefsInvitations?;
    # Who can vote on this board. One of disabled, members, observers, org, public
    @http:Query {name: "prefs/voting"}
    string prefsVoting?;
    # Who can comment on cards on this board. One of: disabled, members, observers, org, public
    @http:Query {name: "prefs/comments"}
    string prefsComments?;
    # Name for the blue label. 1 to 16384 characters long
    @http:Query {name: "labelNames/blue"}
    string labelNamesBlue?;
    # The id of a custom background or one of: blue, orange, green, red, purple, pink, lime, sky, grey
    @http:Query {name: "prefs/background"}
    string prefsBackground?;
    # Name for the red label. 1 to 16384 characters long
    @http:Query {name: "labelNames/red"}
    string labelNamesRed?;
    # Whether the acting user is subscribed to the board
    TrelloID subscribed?;
    # The new name for the board. 1 to 16384 characters long
    string name?;
    # The id of the Workspace the board should be moved to
    string idOrganization?;
    # Whether Workspace members can join the board themselves
    @http:Query {name: "prefs/selfJoin"}
    boolean prefsSelfJoin?;
    # Whether the board is closed
    boolean closed?;
    # Whether card covers should be displayed on this board
    @http:Query {name: "prefs/cardCovers"}
    boolean prefsCardCovers?;
    # Name for the green label. 1 to 16384 characters long
    @http:Query {name: "labelNames/green"}
    string labelNamesGreen?;
    # Determines whether the Voting Power-Up should hide who voted on cards or not
    @http:Query {name: "prefs/hideVotes"}
    boolean prefsHideVotes?;
    # A new description for the board, 0 to 16384 characters long
    string desc?;
};

public type EnterpriseAuditLogMemberCreator record {
    string fullName?;
    TrelloID id?;
    string username?;
};

# An object containing the key and value to set for the card's Custom Field value. The key used to set the value should match the type of Custom Field defined. This is optional if Custom Field is list type
public type CardsidCardcustomFieldsValue record {
    string date?;
    decimal number?;
    boolean checked?;
    string text?;
};

public type TrelloList record {
    boolean subscribed?;
    string idBoard?;
    decimal pos?;
    # The name of the list
    string name?;
    boolean closed?;
    TrelloID id?;
    Limits limits?;
    string softLimit?;
};

public type ListFields "id";

# Represents the Queries record for the operation: get-cards-id-checkitemstates
public type GetCardsIdCheckitemstatesQueries record {
    # `all` or a comma-separated list of: `idCheckItem`, `state`
    string fields = "all";
};

# Represents the Queries record for the operation: post-cards
public type PostCardsQueries record {
    # For use with/by the Map View
    string address?;
    # For use with/by the Map View
    string locationName?;
    # Comma-separated list of label IDs to add to the card
    InlineParameterItemsIdLabels[] idLabels?;
    # The ID of a card to copy into the new card
    TrelloID idCardSource?;
    # The start date of a card, or `null`
    string? 'start?;
    # Whether the status of the card is complete
    boolean dueComplete?;
    # For use with/by the Map View. Should take the form latitude,longitude
    string coordinates?;
    # A URL starting with `http://` or `https://`. The URL will be attached to the card upon creation
    string urlSource?;
    record {byte[] fileContent; string fileName;} fileSource?;
    # The ID of the list the card should be created in
    TrelloID idList;
    # The mimeType of the attachment. Max length 256
    string mimeType?;
    # Comma-separated list of member IDs to add to the card
    InlineParameterItemsIdMembers[] idMembers?;
    # The position of the new card. `top`, `bottom`, or a positive float
    Pos pos?;
    # A due date for the card
    string due?;
    # The name for the card
    string name?;
    # If using `idCardSource` you can specify which properties to copy over. `all` or comma-separated list of: `attachments,checklists,customFields,comments,due,start,labels,members,start,stickers`
    "all"|"attachments"|"checklists"|"comments"|"customFields"|"due"|"start"|"labels"|"members"|"start"|"stickers" keepFromSource = "all";
    # The description for the card
    string desc?;
};

# Represents the Queries record for the operation: put-boards-id-myprefs-emailposition
public type PutBoardsIdMyprefsEmailpositionQueries record {
    # Valid values: bottom, top. Determines the position of the email address
    "bottom"|"top" value;
};

public type EnterpriseAuditLogOrganization record {
    string name?;
    TrelloID id?;
    EnterpriseAuditLogOrganizationEnterpriseJoinRequest? enterpriseJoinRequest?;
};

# Represents the Queries record for the operation: get-notifications-id-list
public type GetNotificationsIdListQueries record {
    # `all` or a comma-separated list of list [fields](/cloud/trello/guides/rest-api/object-definitions/)
    ListFields fields?;
};

# Represents the Queries record for the operation: get-actions-id-organization
public type GetActionsIdOrganizationQueries record {
    # `all` or a comma-separated list of organization fields
    OrganizationFields fields?;
};

# Represents the Queries record for the operation: get-cards-id-checklists
public type GetCardsIdChecklistsQueries record {
    # `all` or `none`
    "all"|"none" filter = "all";
    # `all` or a comma-separated list of: `name,nameData,pos,state,type,due,dueReminder,idMember`
    @http:Query {name: "checkItem_fields"}
    string checkItemFields = "name,nameData,pos,state,due,dueReminder,idMember";
    # `all` or `none`
    "all"|"none" checkItems = "all";
    # `all` or a comma-separated list of: `idBoard,idCard,name,pos`
    "all"|"name"|"nameData"|"pos"|"state"|"type" fields = "all";
};

@constraint:Float {minValue: 0}
public type PosPosOneOf12 float;

# Represents the Queries record for the operation: get-enterprises-id
public type GetEnterprisesIdQueries record {
    # Whether or not to include paid account information in the returned workspace objects
    @http:Query {name: "organization_paid_accounts"}
    boolean organizationPaidAccounts = false;
    # One of: `avatarHash`, `fullName`, `initials`, `username`
    @http:Query {name: "member_fields"}
    string memberFields = "avatarHash, fullName, initials, username";
    # Pass a [SCIM-style query](/cloud/trello/scim/) to filter members. This takes precedence over the all/normal/admins value of members. If any of the member_* args are set, the member array will be paginated
    @http:Query {name: "member_filter"}
    string memberFilter = "none";
    # Deprecated: Please use member_sort. One of: `ascending`, `descending`, `asc`, `desc`
    @http:Query {name: "member_sortOrder"}
    string memberSortOrder = "id";
    # Any valid value that the [nested organization field resource]() accepts
    @http:Query {name: "organization_fields"}
    string organizationFields = "none";
    # Comma-seperated list of: `me`, `normal`, `admin`, `active`, `deactivated`
    @http:Query {name: "organization_memberships"}
    string organizationMemberships = "none";
    # Any integer between 0 and 100
    @http:Query {name: "member_startIndex"}
    int:Signed32 memberStartIndex?;
    # One of: `none`, `normal`, `admins`, `owners`, `all`
    string members = "none";
    # Deprecated: Please use member_sort. This parameter expects a [SCIM-style sorting value](/cloud/trello/scim/). Note that the members array returned will be paginated if `members` is `normal` or `admins`. Pagination can be controlled with `member_startIndex`, etc, and the API response's header will contain the total count and pagination state
    @http:Query {name: "member_sortBy"}
    string memberSortBy = "none";
    # One of: `none`, `members`, `public`, `all`
    string organizations = "none";
    # Comma-separated list of: `id`, `name`, `displayName`, `prefs`, `ssoActivationFailed`, `idAdmins`, `idMembers` (Note that the members array returned will be paginated if `members` is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data. Read the SCIM documentation [here]() for more information on filtering), `idOrganizations`, `products`, `userTypes`, `idMembers`, `idOrganizations`
    string fields = "all";
    # 0 to 100
    @http:Query {name: "member_count"}
    int:Signed32 memberCount?;
    # This parameter expects a [SCIM-style](/cloud/trello/scim/) sorting value prefixed by a `-` to sort descending. If no `-` is prefixed, it will be sorted ascending. Note that the members array returned will be paginated if `members` is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data
    @http:Query {name: "member_sort"}
    string memberSort?;
};

# Represents the Queries record for the operation: get-members-id-cards
public type GetMembersIdCardsQueries record {
    # One of: `all`, `closed`, `complete`, `incomplete`, `none`, `open`, `visible`
    "all"|"closed"|"complete"|"incomplete"|"none"|"open"|"visible" filter = "visible";
};

public type InlineResponseItems2008 BoardBackground;

public type InlineResponseItems2009 Board;

public type InlineResponseItems2006 Member;

# Represents the Queries record for the operation: put-checklists-id-field
public type PutChecklistsIdFieldQueries record {
    # The value to change the checklist name to. Should be a string of length 1 to 16384
    Value value;
};

public type InlineResponseItems2007 BoardBackground;

public type EnterpriseAuditLog record {
    string date?;
    EnterpriseAuditLogOrganization organization?;
    EnterpriseAuditLogMemberCreator memberCreator?;
    EnterpriseAuditLogMember member?;
    string 'type?;
    TrelloID idAction?;
};

public type InlineResponseItems2005 Organization;

# Represents the Queries record for the operation: get-members-id-notifications
public type GetMembersIdNotificationsQueries record {
    string filter = "all";
    boolean entities = false;
    # A notification ID
    string before?;
    boolean display = false;
    # Max 1000
    int:Signed32 'limit?;
    boolean memberCreator = true;
    # Max 100
    int:Signed32 page?;
    # One of: `all`, `read`, `unread`
    @http:Query {name: "read_filter"}
    string readFilter = "all";
    # `all` or a comma-separated list of notification [fields](/cloud/trello/guides/rest-api/object-definitions/)
    string fields = "all";
    # `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
    @http:Query {name: "memberCreator_fields"}
    string memberCreatorFields = "avatarHash,fullName,initials,username";
    # A notification ID
    string since?;
};

public type InlineResponseItems2002 Attachment;

public type InlineResponseItems2003 Attachment;

# Represents the Queries record for the operation: get-notifications-id
public type GetNotificationsIdQueries record {
    # `all` or a comma-separated list of card [fields](/cloud/trello/guides/rest-api/object-definitions/)
    @http:Query {name: "card_fields"}
    CardFields cardFields?;
    # `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
    @http:Query {name: "member_fields"}
    MemberFields memberFields?;
    # Whether to include the display object with the results
    boolean display = false;
    # Whether to include the list object
    boolean list = false;
    # `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)
    @http:Query {name: "board_fields"}
    BoardFields boardFields?;
    # `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
    @http:Query {name: "organization_fields"}
    OrganizationFields organizationFields?;
    # Whether to include the entities object with the results
    boolean entities = false;
    # Whether to include the organization object
    boolean organization = false;
    # Whether to include the member object
    boolean member = true;
    # Whether to include the member object of the creator
    boolean memberCreator = true;
    # `all` or a comma-separated list of notification [fields](/cloud/trello/guides/rest-api/object-definitions/)
    NotificationFields fields?;
    # Whether to include the board object
    boolean board = false;
    # Whether to include the card object
    boolean card = false;
    # `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
    @http:Query {name: "memberCreator_fields"}
    MemberFields memberCreatorFields?;
};

public type InlineResponseItems2001 Attachment;

# Represents the Queries record for the operation: get-cards-id-attachments
public type GetCardsIdAttachmentsQueries record {
    # Use `cover` to restrict to just the cover attachment
    string filter = "false";
    # `all` or a comma-separated list of attachment [fields](/cloud/trello/guides/rest-api/object-definitions/)
    string fields = "all";
};

public type PendingOrganizationsTransferabilityNewBillableMembers record {
    string avatarHash?;
    string initials?;
    string fullName?;
    TrelloID id?;
    string username?;
};

public type CardBadges record {
    int comments?;
    int attachments?;
    CardBadgesAttachmentsByType attachmentsByType?;
    string? 'start?;
    boolean dueComplete?;
    boolean description?;
    boolean subscribed?;
    string? due?;
    boolean viewingMemberVoted?;
    boolean location?;
    int votes?;
    string fogbugz?;
    int checkItems?;
    int checkItemsChecked?;
};

public type MemberPrefs record {
    boolean colorBlind?;
    MemberPrefsTwoFactor twoFactor?;
    int minutesBetweenSummaries?;
    string timezone?;
    boolean sendSummaries?;
    int minutesBeforeDeadlineToNotify?;
    MemberPrefsPrivacy privacy?;
    MemberPrefsTimezoneInfo timezoneInfo?;
    string locale?;
};

# Represents the Queries record for the operation: post-cards-id-checklists
public type PostCardsIdChecklistsQueries record {
    # The ID of a source checklist to copy into the new one
    TrelloID idChecklistSource?;
    # The position of the checklist on the card. One of: `top`, `bottom`, or a positive number
    string pos?;
    # The name of the checklist
    string name?;
};

public type Token record {
    string identifier?;
    string dateCreated?;
    TokenPermission[] permissions?;
    TrelloID idMember?;
    string? dateExpires?;
    TrelloID id?;
};

# Represents the Queries record for the operation: get-enterprises-id-admins
public type GetEnterprisesIdAdminsQueries record {
    # Any valid value that the [nested member field resource]() accepts
    string fields = "fullName, userName";
};

public type ActionLimits record {
    ActionLimitsReactions reactions?;
};

public type Board record {
    string? descData?;
    string idTags?;
    boolean pinned?;
    BoardLabelNames labelNames?;
    string shortUrl?;
    string dateLastActivity?;
    string? datePluginDisable?;
    string shortLink?;
    string memberships?;
    string? creationMethod?;
    boolean subscribed?;
    boolean starred?;
    TrelloID idOrganization?;
    string dateLastView?;
    TrelloID id;
    Limits limits?;
    string powerUps?;
    string? templateGallery?;
    string url?;
    Prefs prefs?;
    boolean enterpriseOwned?;
    int ixUpdate?;
    # The name of the board
    string name?;
    boolean closed?;
    TrelloID idMemberCreator?;
    string desc?;
};

# Represents the Queries record for the operation: get-members-id-boards
public type GetMembersIdBoardsQueries record {
    # `all` or a comma-separated list of: `closed`, `members`, `open`, `organization`, `public`, `starred`
    "all"|"closed"|"members"|"open"|"organization"|"public"|"starred" filter = "all";
    # `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
    @http:Query {name: "organization_fields"}
    OrganizationFields organizationFields?;
    # Which lists to include with the boards. One of: `all`, `closed`, `none`, `open`
    "all"|"closed"|"none"|"open" lists = "none";
    # Whether to include the Organization object with the Boards
    boolean organization = false;
    # `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)
    BoardFields fields?;
};

# Represents the Queries record for the operation: put-id-idboard
public type PutIdIdboardQueries record {
    # The ID of the board to move the list to
    TrelloID value;
};

public type InlineResponseItems20011 Memberships;

public type Membership record {
    boolean licensed?;
    boolean managed?;
    MembershipMember member?;
    boolean admin?;
    boolean deactivated?;
    boolean collaborator?;
};

public type InlineResponseItems20012 PluginData;

public type InlineResponseItems20013 Tag;

public type id TrelloID|string;

public type InlineResponseItems20014 Member|Card|Board|Organization;

public type TransferrableOrganization record {
    PendingOrganizationsTransferabilityNewBillableMembers[] restrictedMembers?;
    boolean transferrable?;
    PendingOrganizationsTransferabilityNewBillableMembers[] newBillableMembers?;
};

# Represents the Queries record for the operation: put-cards-id-actions-idaction-comments
public type PutCardsIdActionsIdactionCommentsQueries record {
    # The new text for the comment
    string text;
};

public type InlineResponseItems20010 Member;

public type CardDescData record {
    record {} emoji?;
};

public type EnterprisePrefsSignup record {
    string banner?;
    string bannerHtml?;
};

# Represents the Queries record for the operation: notificationsidmember
public type NotificationsidmemberQueries record {
    # `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
    MemberFields fields?;
};

public type PosStringOrNumberOneOf1 "top"|"bottom";

public type AttachmentFields "id"|"bytes"|"date"|"edgeColor"|"idMember"|"isUpload"|"mimeType"|"name"|"previews"|"url"|"pos";

# Represents the Queries record for the operation: get-members-id-customstickers-idsticker
public type GetMembersIdCustomstickersIdstickerQueries record {
    # `all` or a comma-separated list of `scaled`, `url`
    "scaled"|"url"|"all" fields = "all";
};

# Represents the Queries record for the operation: put-members-id-boardstars-idstar
public type PutMembersIdBoardstarsIdstarQueries record {
    # New position for the starred board. `top`, `bottom`, or a positive float
    PosStringOrNumber pos?;
};

public type PendingOrganizationsTransferability record {
    PendingOrganizationsTransferabilityNewBillableMembers[] restrictedMembers?;
    boolean transferrable?;
    PendingOrganizationsTransferabilityNewBillableMembers[] newBillableMembers?;
};

public type CardCover record {
    boolean? idUploadedBackground?;
    "light"|"dark" brightness?;
    Color? color?;
    "normal" size?;
    TrelloID idAttachment?;
    boolean isTemplate?;
};

public type Card record {
    CardDescData descData?;
    CardIdLabels[] idLabels?;
    string shortUrl?;
    string dateLastActivity?;
    TrelloID idList?;
    InlineParameterItemsIdLabels[] idMembersVoted?;
    string shortLink?;
    string? creationMethod?;
    CardCover cover?;
    string? dueReminder?;
    boolean subscribed?;
    float pos?;
    CardIdChecklists[] idChecklists?;
    TrelloID id?;
    Limits limits?;
    string? address?;
    TrelloID idBoard?;
    string? locationName?;
    string? coordinates?;
    CardCheckItemStates[] checkItemStates?;
    string url?;
    InlineParameterItemsIdLabels[] labels?;
    CardBadges badges?;
    InlineParameterItemsIdLabels[] idMembers?;
    int idShort?;
    string? due?;
    TrelloID idAttachmentCover?;
    string name?;
    boolean closed?;
    boolean manualCoverAttachment?;
    string desc?;
};

public type EnterpriseAuditLogMember record {
    string fullName?;
    TrelloID id?;
    string username?;
};

public type CustomEmoji record {
    string name?;
    TrelloID id?;
    string url?;
};

public type MemberMessagesDismissed record {
    string name?;
    string count?;
    @jsondata:Name {value: "_id"}
    TrelloID id?;
    string lastDismissed?;
};

# Represents the Queries record for the operation: get-actions-idaction-reactions
public type GetActionsIdactionReactionsQueries record {
    # Whether to load the emoji as a nested resource
    boolean emoji = true;
    # Whether to load the member as a nested resource. See [Members Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#members-nested-resource)
    boolean member = true;
};

public type CheckItem record {
    string pos?;
    TrelloID idChecklist?;
    string name?;
    string? nameData?;
    "complete"|"incomplete" state?;
    TrelloID id?;
};

# Represents the Queries record for the operation: get-cards-id-board
public type GetCardsIdBoardQueries record {
    # `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/#board-object)
    string fields = "all";
};

# Represents the Queries record for the operation: get-actions-idaction-reactions-id
public type GetActionsIdactionReactionsIdQueries record {
    # Whether to load the emoji as a nested resource
    boolean emoji = true;
    # Whether to load the member as a nested resource. See [Members Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#members-nested-resource)
    boolean member = true;
};

public type Pos3Pos3OneOf12 "top"|"bottom";

public type Id TrelloID|IdOneOf2;

# Represents the Queries record for the operation: get-organizations-id-memberships-idmembership
public type GetOrganizationsIdMembershipsIdmembershipQueries record {
    # Whether to include the Member object in the response
    boolean member = false;
};

# Provides API key configurations needed when communicating with a remote HTTP endpoint.
public type ApiKeysConfig record {|
    string 'key;
    string token;
|};

public type BlockedKey "notification_comment_card"|"notification_added_a_due_date"|"notification_changed_due_date"|"notification_card_due_soon"|"notification_removed_from_card"|"notification_added_attachment_to_card"|"notification_created_card"|"notification_moved_card"|"notification_archived_card"|"notification_unarchived_card";

public type PendingOrganizationsMemberRequestor record {
    string fullName?;
    TrelloID id?;
};

public type BoardLabelNames record {
    string orange?;
    string red?;
    string sky?;
    string pink?;
    string green?;
    string blue?;
    string lime?;
    string yellow?;
    string black?;
    string purple?;
};

public type Organization record {
    TrelloID id?;
};

public type BoardFields "id"|"name"|"desc"|"descData"|"closed"|"idMemberCreator"|"idOrganization"|"pinned"|"url"|"shortUrl"|"prefs"|"labelNames"|"starred"|"limits"|"memberships"|"enterpriseOwned";

# Represents the Queries record for the operation: put-organizations-id
public type PutOrganizationsIdQueries record {
    # A URL starting with `http://`, `https://`, or `null`
    string website?;
    # Whether non-workspace members can be added to boards inside the Workspace
    boolean prefs\/externalMembersDisabled?;
    # Whether the Workspace page is publicly visible. One of: `private`, `public`
    string prefs\/permissionLevel?;
    # A new displayName for the organization. Must be at least 1 character long and not begin or end with a space
    string displayName?;
    # A new name for the organization. At least 3 lowercase letters, underscores, and numbers. Must be unique
    string name?;
    # Who can make private boards. One of: `admin`, `none`, `org`
    string prefs\/boardVisibilityRestrict\/private?;
    # The Google Apps domain to link this org to
    string prefs\/associatedDomain?;
    # Who on the Workspace can make Workspace visible boards. One of `admin`, `none`, `org`
    string prefs\/boardVisibilityRestrict\/org?;
    # `1` or `2`
    int:Signed32 prefs\/googleAppsVersion?;
    # Who on the Workspace can make public boards. One of: `admin`, `none`, `org`
    string prefs\/boardVisibilityRestrict\/public?;
    # An email address with optional wildcard characters. (E.g. `subdomain.*.trello.com`)
    string prefs\/orgInviteRestrict?;
    # A new description for the organization
    string desc?;
};

# Represents the Queries record for the operation: get-users-id
public type GetUsersIdQueries record {
    # Cursor to return next set of results, use cursor returned in the response to query the next batch
    string cursor = "none";
    # Returns members with email address or full name that start with the search value
    string search = "none";
    # When true, returns members who possess a license for the corresponding Trello Enterprise; when false, returns members who do not. If unspecified, both licensed and unlicensed members will be returned
    boolean licensed = false;
    # Returns only Trello users active since this date (inclusive)
    string activeSince = "none";
    # Returns only Trello users active since this date (inclusive)
    string inactiveSince = "none";
    # When true, returns members who are managed by the corresponding Trello Enterprise; when false, returns members who are not. If unspecified, both managed and unmanaged members will be returned
    boolean managed = false;
    # When true, returns members who are administrators of the corresponding Trello Enterprise; when false, returns members who are not. If unspecified, both admin and non-admin members will be returned
    boolean admin = false;
    # When true, returns members who have been deactivated for the corresponding Trello Enterprise; when false, returns members who have not. If unspecified, both active and deactivated members will be returned
    boolean deactivated = false;
    # When true, returns members who are guests on one or more boards in the corresponding Trello Enterprise (but do not possess a license); when false, returns members who are not. If unspecified, both guests and non-guests will be returned
    boolean collaborator = false;
};

# Represents the Queries record for the operation: put-boards-id-memberships-idmembership
public type PutBoardsIdMembershipsIdmembershipQueries record {
    # Valid values: all, avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username
    @http:Query {name: "member_fields"}
    "all"|"avatarHash"|"bio"|"bioData"|"confirmed"|"fullName"|"idPremOrgsAdmin"|"initials"|"memberType"|"products"|"status"|"url"|"username" memberFields = "fullName";
    # One of: admin, normal, observer. Determines the type of member that this membership will be to this board
    "admin"|"normal"|"observer" 'type;
};

public type Value1 Value1OneOf1|Value1Value1OneOf12|Value1Value1Value1OneOf123|Value1Value1Value1Value1OneOf1234;

# Represents the Queries record for the operation: get-actions-id
public type GetActionsIdQueries record {
    boolean entities = false;
    # `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
    @http:Query {name: "member_fields"}
    string memberFields = "avatarHash,fullName,initials,username";
    boolean display = true;
    boolean member = true;
    # Whether to include the member object for the creator of the action
    boolean memberCreator = true;
    # `all` or a comma-separated list of action [fields](/cloud/trello/guides/rest-api/object-definitions/#action-object)
    string fields = "all";
    # `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
    @http:Query {name: "memberCreator_fields"}
    string memberCreatorFields = "avatarHash,fullName,initials,username";
};

# Represents the Queries record for the operation: get-checklists-id-board
public type GetChecklistsIdBoardQueries record {
    # `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)
    "all"|"name" fields = "all";
};

public type ActionDisplayEntitiesComment record {
    string text?;
    string 'type?;
};

# Represents the Queries record for the operation: put-enterprises-id-organizations
public type PutEnterprisesIdOrganizationsQueries record {
    # ID of Organization to be transferred to Enterprise
    string idOrganization;
};

# Represents the Queries record for the operation: get-members-id-actions
public type GetMembersIdActionsQueries record {
    # A comma-separated list of [action types](https://developer.atlassian.com/cloud/trello/guides/rest-api/action-types/)
    string filter?;
};

# Name of the organization
public type Id2OneOf2 string;

public type ActionLimitsReactions record {
    ActionLimitsReactionsPerAction perAction?;
    ActionLimitsReactionsPerAction uniquePerAction?;
};

# Represents the Queries record for the operation: get-enterprises-id-members-idmember
public type GetEnterprisesIdMembersIdmemberQueries record {
    # Any valid value that the [nested board resource](/cloud/trello/guides/rest-api/nested-resources/) accepts
    @http:Query {name: "board_fields"}
    string boardFields = "name";
    # Any valid value that the [nested organization field resource](/cloud/trello/guides/rest-api/nested-resources/) accepts
    @http:Query {name: "organization_fields"}
    string organizationFields = "displayName";
    # A comma separated list of any valid values that the [nested member field resource]() accepts
    string fields = "avatarHash, fullName, initials, username";
};

# Represents the Queries record for the operation: put-boards-id-members-idmember
public type PutBoardsIdMembersIdmemberQueries record {
    # Optional param that allows organization admins to add multi-board guests onto a board
    boolean allowBillableGuest = false;
    # One of: admin, normal, observer. Determines the type of member this user will be on the board
    "admin"|"normal"|"observer" 'type;
};

# Represents the Queries record for the operation: put-boards-id-myPrefs-showsidebarmembers
public type PutBoardsIdMyPrefsShowsidebarmembersQueries record {
    # Determines whether to show members of the board in the sidebar
    boolean value;
};

# Represents the Queries record for the operation: post-cards-id-labels
public type PostCardsIdLabelsQueries record {
    # A valid label color or `null`. See [labels](/cloud/trello/guides/rest-api/object-definitions/)
    string color;
    # A name for the label
    string name?;
};

# The new position for the List
public type Value1Value1OneOf12 float;

# Represents the Queries record for the operation: put-members-id
public type PutMembersIdQueries record {
    # New initials for the member. 1-4 characters long
    @constraint:String {maxLength: 4, minLength: 1}
    string initials?;
    @http:Query {name: "prefs/locale"}
    string prefsLocale?;
    # New name for the member. Cannot begin or end with a space
    string fullName?;
    string bio?;
    # One of: `gravatar`, `none`, `upload`
    "gravatar"|"none"|"upload" avatarSource?;
    @http:Query {name: "prefs/colorBlind"}
    boolean prefsColorBlind?;
    # `-1` for disabled, `1`, or `60`
    @http:Query {name: "prefs/minutesBetweenSummaries"}
    int:Signed32 prefsMinutesBetweenSummaries?;
    # New username for the member. At least 3 characters long, only lowercase letters, underscores, and numbers. Must be unique
    string username?;
};

# Represents the Queries record for the operation: get-enterprises-id-members
public type GetEnterprisesIdMembersQueries record {
    # Pass a [SCIM-style query](/cloud/trello/scim/) to filter members. This takes precedence over the all/normal/admins value of members. If any of the below member_* args are set, the member array will be paginated
    string? filter?;
    # Any valid value that the [nested board resource](/cloud/trello/guides/rest-api/nested-resources/) accepts
    @http:Query {name: "board_fields"}
    string boardFields = "name";
    # Any integer between 0 and 9999
    @constraint:Int {minValue: 0, maxValue: 9999}
    int:Signed32 startIndex?;
    # Any valid value that the [nested organization field resource](/cloud/trello/guides/rest-api/nested-resources/) accepts
    @http:Query {name: "organization_fields"}
    string organizationFields = "displayName";
    # Deprecated: Please use `sort` instead. One of: `ascending`, `descending`, `asc`, `desc`
    "ascending"|"descending"|"asc"|"desc"? sortOrder?;
    # [SCIM-style filter](/cloud/trello/scim/)
    string count = "none";
    # Deprecated: Please use `sort` instead. This parameter expects a [SCIM-style](/cloud/trello/scim/) sorting value. Note that the members array returned will be paginated if `members` is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data
    string sortBy?;
    # This parameter expects a [SCIM-style](/cloud/trello/scim/) sorting value prefixed by a `-` to sort descending. If no `-` is prefixed, it will be sorted ascending. Note that the members array returned will be paginated if `members` is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data
    string sort?;
    # A comma-seperated list of valid [member fields](/cloud/trello/guides/rest-api/object-definitions/#member-object)
    string fields = "avatarHash, fullName, initials, username";
};

# Represents the Queries record for the operation: get-lists-id
public type GetListsIdQueries record {
    # `all` or a comma separated list of List field names
    string fields = "name,closed,idBoard,pos";
};

public type Value1Value1Value1Value1OneOf1234 boolean;

public type Export record {
    string? size?;
    string? exportUrl?;
    string startedAt?;
    TrelloID id?;
    ExportStatus status?;
};

# Represents the Queries record for the operation: post-webhooks
public type PostWebhooksQueries record {
    # A string with a length from `0` to `16384`
    @constraint:String {maxLength: 16384}
    string description?;
    # Determines whether the webhook is active and sending `POST` requests
    boolean active?;
    # A valid URL that is reachable with a `HEAD` and `POST` request
    string callbackURL;
    # ID of the model to be monitored
    TrelloID idModel;
};

public type CustomFieldDisplay record {
    string pos?;
    string name?;
    CustomFieldDisplayOptions[] options?;
    boolean cardFront?;
};

# Represents the Queries record for the operation: put-organizations-id-members-idmember-deactivated
public type PutOrganizationsIdMembersIdmemberDeactivatedQueries record {
    boolean value;
};

public type IdBoardsOneOf1 "mine";

# Represents the Queries record for the operation: post-members-id-boardbackgrounds-1
public type PostMembersIdBoardbackgrounds1Queries record {
    record {byte[] fileContent; string fileName;} file;
};

# Represents the Queries record for the operation: put-cards-id-stickers-idsticker
public type PutCardsIdStickersIdstickerQueries record {
    # The rotation of the sticker
    @constraint:Float {minValue: 0, maxValue: 360}
    float rotate = 0;
    # The top position of the sticker, from -60 to 100
    @constraint:Float {minValue: -60, maxValue: 100}
    float top;
    # The left position of the sticker, from -60 to 100
    @constraint:Float {minValue: -60, maxValue: 100}
    float left;
    # The z-index of the sticker
    int zIndex;
};

public type IdBoards IdBoardsOneOf1|TrelloID;

public type IdCardCustomFieldsBody record {
    # An array of objects containing the custom field ID, key and value, and ID of list type option
    CardsidCardcustomFieldsCustomFieldItems[] customFieldItems?;
};

# Represents the Queries record for the operation: post-members-id-onetimemessagesdismissed
public type PostMembersIdOnetimemessagesdismissedQueries record {
    # The message to dismiss
    TrelloID value;
};

public type PluginListing record {
    string overview?;
    string name?;
    string description?;
    TrelloID id?;
    string locale?;
};

# Represents the Queries record for the operation: post-members-id-boardstars
public type PostMembersIdBoardstarsQueries record {
    # The ID of the board to star
    TrelloID idBoard;
    # The position of the newly starred board. `top`, `bottom`, or a positive float
    PosStringOrNumber pos;
};

public type IdActionReactionsBody record {
    # The `skinVariation` of the emoji to add. See [/emoji](#emoji)
    string skinVariation?;
    # The emoji to add as a native unicode emoji. See [/emoji](#emoji)
    string native?;
    # The `unified` value of the emoji to add. See [/emoji](#emoji)
    string unified?;
    # The primary `shortName` of the emoji to add. See [/emoji](#emoji)
    string shortName?;
};

# Represents the Queries record for the operation: put-cards-id-checkitem-idcheckitem
public type PutCardsIdCheckitemIdcheckitemQueries record {
    # A dueReminder for the due date on the checkitem
    decimal? dueReminder?;
    # `top`, `bottom`, or a positive float
    PosStringOrNumber pos?;
    # A due date for the checkitem
    string due?;
    # The ID of the checklist this item is in
    TrelloID idChecklist?;
    # The ID of the member to remove from the card
    TrelloID idMember?;
    # The new name for the checklist item
    string name?;
    # One of: `complete`, `incomplete`
    "complete"|"incomplete" state?;
};

public type EnterpriseAdmin record {
    string fullName?;
    TrelloID id?;
    string username?;
};

# Represents the Queries record for the operation: membersidcustomboardbackgrounds-1
public type Membersidcustomboardbackgrounds1Queries record {
    record {byte[] fileContent; string fileName;} file;
};

# Represents the Queries record for the operation: get-notifications-id-membercreator
public type GetNotificationsIdMembercreatorQueries record {
    # `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
    MemberFields fields?;
};

public type LimitsAttachments record {
    LimitsObject perBoard?;
};

public type Enterprise record {
    string displayName?;
    string[] domains?;
    boolean ssoActivationFailed?;
    string dateOrganizationPrefsLastUpdated?;
    boolean isRealEnterprise?;
    string? logoHash?;
    string? logoUrl?;
    EnterprisePrefs prefs?;
    decimal[] products?;
    EnterpriseLicenses licenses?;
    string[] enterpriseDomains?;
    EnterpriseIdp idp?;
    EnterpriseOrganizationPrefs organizationPrefs?;
    TrelloID[] idAdmins?;
    string name?;
    TrelloID id?;
    TrelloID[] pluginWhitelistingEnabled?;
    TrelloID[] idOrganizations?;
};

public type InlineResponseItems200 BoardStars;

public type Tag record {
    string name?;
    TrelloID id?;
};

# Represents the Queries record for the operation: put-notifications-id-unread
public type PutNotificationsIdUnreadQueries record {
    string value?;
};

public type MemberPrefsPrivacy record {
    "public"|"private"|"collaborator" fullName?;
    "public"|"private"|"collaborator" avatar?;
};

# Represents the Queries record for the operation: post-members-id-customemoji
public type PostMembersIdCustomemojiQueries record {
    record {byte[] fileContent; string fileName;} file;
    # Name for the emoji. 2 - 64 characters
    @constraint:String {maxLength: 64, minLength: 2}
    string name;
};

public type CardAging "pirate"|"regular";

public type PosStringOrNumberPosStringOrNumberOneOf12 float;

public type EnterpriseAuditLogOrganizationEnterpriseJoinRequest record {
    string date?;
    TrelloID idEnterprise?;
    TrelloID idMember?;
};

public type IdMembersBody record {
    # The full name of the user to as a member of the board. Must have a length of at least 1 and cannot begin nor end with a space
    string fullName?;
};

public type ActionDisplay record {
    string translationKey?;
    ActionDisplayEntities entities?;
};

# Represents the Queries record for the operation: put-checlists-id
public type PutCheclistsIdQueries record {
    # Determines the position of the checklist on the card. One of: `top`, `bottom`, or a positive number
    PosStringOrNumber pos?;
    # Name of the new checklist being created. Should be length of 1 to 16384
    string name?;
};

# Represents the Queries record for the operation: tokenstokenwebhooks-1
public type Tokenstokenwebhooks1Queries record {
    # A description to be displayed when retrieving information about the webhook
    string description?;
    # The URL that the webhook should `POST` information to
    string callbackURL?;
    # ID of the object that the webhook is on
    TrelloID idModel?;
};

public type Limits record {
    LimitsAttachments attachments?;
};

public type ViewFilter "all"|"closed"|"none"|"open";

public type Member record {
    string[] idEnterprisesDeactivated?;
    string? aaEnrolledDate?;
    TrelloID idMemberReferrer?;
    string bio?;
    "gravatar"|"upload" avatarSource?;
    TrelloID[]? idBoardsPinned?;
    # Profile data with restricted visibility. These fields are visible only to members of the
    # same organization. The values here (full name, for example) may differ from the values
    # at the top level of the response
    MemberNonPublic nonPublic?;
    boolean confirmed?;
    int[] products?;
    boolean activityBlocked?;
    string uploadedAvatarHash?;
    TrelloID id?;
    TrelloID[] idOrganizations?;
    string? aaEmail?;
    string[] trophies?;
    CardDescData bioData?;
    string email?;
    TrelloID[] idEnterprisesAdmin?;
    LimitsObject limits?;
    string uploadedAvatarUrl?;
    MemberMessagesDismissed messagesDismissed?;
    string avatarUrl?;
    string initials?;
    string[] oneTimeMessagesDismissed?;
    # Whether the response contains non-public profile data for the member
    boolean nonPublicAvailable?;
    string fullName?;
    string[] premiumFeatures?;
    ("password"|"saml")[] loginTypes?;
    TrelloID[] idPremOrgsAdmin?;
    string url?;
    MemberMarketingOptIn marketingOptIn?;
    MemberPrefs prefs?;
    string gravatarHash?;
    decimal ixUpdate?;
    string avatarHash?;
    string? aaId?;
    TrelloID idEnterprise?;
    boolean isAaMastered?;
    "normal"|"ghost" memberType?;
    TrelloID[] idBoards?;
    string username?;
    "disconnected" status?;
};

public type EnterpriseLicensesRelatedEnterprises record {
    string displayName?;
    string name?;
    decimal count?;
};

# Represents the Queries record for the operation: get-boards-id-boardstars
public type GetBoardsIdBoardstarsQueries record {
    # Valid values: mine, none
    string filter = "mine";
};

# Represents the Queries record for the operation: put-members-id-customboardbackgrounds-idbackground
public type PutMembersIdCustomboardbackgroundsIdbackgroundQueries record {
    # One of: `dark`, `light`, `unknown`
    "dark"|"light"|"unknown" brightness?;
    # Whether to tile the background
    boolean tile?;
};

# The new name for the List
public type Value1OneOf1 string;

public type IdMember1OneOf2 string;

public type EmojiTrello record {
    string[] shortNames?;
    string tts?;
    string? texts?;
    string[] keywords?;
    string native?;
    string unified?;
    string name?;
    string text?;
    string shortName?;
    string category?;
    decimal sheetY?;
    decimal sheetX?;
};

public type CardIdLabels Label|TrelloID;

public type Channel "email";

public type BoardBackground record {
    TrelloID id?;
};

public type ActionDataCard record {
    int idShort?;
    string name?;
    TrelloID id?;
    string shortLink?;
};

# Represents the Queries record for the operation: get-search
public type GetSearchQueries record {
    # all or a comma-separated list of: `badges`, `checkItemStates`, `closed`, `dateLastActivity`, `desc`, `descData`, `due`, `idAttachmentCover`, `idBoard`, `idChecklists`, `idLabels`, `idList`, `idMembers`, `idMembersVoted`, `idShort`, `labels`, `manualCoverAttachment`, `name`, `pos`, `shortLink`, `shortUrl`, `subscribed`, `url`
    @http:Query {name: "card_fields"}
    string cardFields = "all";
    # Whether to include member objects with card results
    @http:Query {name: "card_members"}
    boolean cardMembers = false;
    # all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username
    @http:Query {name: "member_fields"}
    string memberFields = "avatarHash,fullName,initials,username,confirmed";
    # The search query with a length of 1 to 16384 characters
    @constraint:String {maxLength: 16834, minLength: 1}
    string query;
    # Whether to include the parent board with card results
    @http:Query {name: "card_board"}
    boolean cardBoard = false;
    # Whether to include the parent list with card results
    @http:Query {name: "card_list"}
    boolean cardList = false;
    # Whether to include the parent organization with board results
    @http:Query {name: "board_organization"}
    boolean boardOrganization = false;
    # What type or types of Trello objects you want to search. all or a comma-separated list of: `actions`, `boards`, `cards`, `members`, `organizations`
    string modelTypes = "all";
    # The maximum number of boards returned. Maximum: 1000
    @http:Query {name: "boards_limit"}
    int boardsLimit = 10;
    # all or a comma-separated list of: `closed`, `dateLastActivity`, `dateLastView`, `desc`, `descData`, `idOrganization`, `invitations`, `invited`, `labelNames`, `memberships`, `name`, `pinned`, `powerUps`, `prefs`, `shortLink`, `shortUrl`, `starred`, `subscribed`, `url`
    @http:Query {name: "board_fields"}
    string boardFields = "name,idOrganization";
    # Whether to include sticker objects with card results
    @http:Query {name: "card_stickers"}
    boolean cardStickers = false;
    # all or a comma-separated list of billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url, website
    @http:Query {name: "organization_fields"}
    string organizationFields = "name,displayName";
    # The maximum number of Workspaces to return. Maximum 1000
    @http:Query {name: "organizations_limit"}
    int:Signed32 organizationsLimit?;
    # A comma-separated list of Card IDs
    string idCards?;
    # The maximum number of members to return. Maximum 1000
    @http:Query {name: "members_limit"}
    int:Signed32 membersLimit?;
    # `mine` or a comma-separated list of Board IDs
    IdBoards idBoards?;
    # A comma-separated list of Organization IDs
    string idOrganizations?;
    # The page of results for cards. Maximum: 100
    @http:Query {name: "cards_page"}
    decimal cardsPage = 0;
    # By default, Trello searches for each word in your query against exactly matching words within Member content. Specifying partial to be true means that we will look for content that starts with any of the words in your query.  If you are looking for a Card titled "My Development Status Report", by default you would need to search for "Development". If you have partial enabled, you will be able to search for "dev" but not "velopment"
    boolean partial = false;
    # The maximum number of cards to return. Maximum: 1000
    @http:Query {name: "cards_limit"}
    int cardsLimit = 10;
    # Whether to include attachment objects with card results. A boolean value (true or false) or cover for only card cover attachments
    @http:Query {name: "card_attachments"}
    string cardAttachments = "false";
};

public type AttachmentsAttachmentsOneOf12 boolean;

# Represents the Queries record for the operation: get-members-id-boardbackgrounds-idbackground
public type GetMembersIdBoardbackgroundsIdbackgroundQueries record {
    # `all` or a comma-separated list of: `brightness`, `fullSizeUrl`, `scaled`, `tile`
    "all"|"brightness"|"fullSizeUrl"|"scaled"|"tile" fields = "all";
};

public type TokenPermission record {
    boolean read?;
    "board"|"member"|"organization"|"enterprise" modelType?;
    TrelloID|"*" idModel?;
    boolean write?;
};

public type Value PosStringOrNumber|TrelloID;

public type EnterprisePrefs record {
    boolean ssoOnly?;
    string? mandatoryTransferDate?;
    decimal? maxMembers?;
    boolean autoJoinOrganizations?;
    EnterprisePrefsSignup signup?;
    string brandingColor?;
    record {} notifications?;
};

# Represents the Queries record for the operation: post-organizations-id-logo
public type PostOrganizationsIdLogoQueries record {
    # Image file for the logo
    record {byte[] fileContent; string fileName;} file?;
};

public type ActionDisplayEntitiesContextOn record {
    boolean hideIfContext?;
    TrelloID idContext?;
    string translationKey?;
    string 'type?;
};

# Represents the Queries record for the operation: get-cards-id-checkitem-idcheckitem
public type GetCardsIdCheckitemIdcheckitemQueries record {
    # `all` or a comma-separated list of `name,nameData,pos,state,type,due,dueReminder,idMember`
    string fields = "name,nameData,pos,state,due,dueReminder,idMember";
};

# Represents the Queries record for the operation: put-notifications-id
public type PutNotificationsIdQueries record {
    # Whether the notification should be marked as read or not
    boolean unread?;
};

public type Memberships record {
    TrelloID id?;
};

@constraint:String {pattern: re `^[0-9a-fA-F]{24}$`}
public type TrelloID string;

# Represents the Queries record for the operation: get-cards-id-membersvoted
public type GetCardsIdMembersvotedQueries record {
    # `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
    string fields = "avatarHash,fullName,initials,username";
};

# Represents the Queries record for the operation: get-boards-id
public type GetBoardsIdQueries record {
    # This is a nested resource. Read more about checklists as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/)
    string checklists = "none";
    # This is a nested resource. Read more about cards as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/)
    string cards = "none";
    # This is a nested resource. Read more about custom fields as nested resources [here](#custom-fields-nested-resource)
    boolean customFields = false;
    # Use with the `cards` param to include card pluginData with the response
    @http:Query {name: "card_pluginData"}
    boolean cardPluginData = false;
    # This is a nested resource. Read more about memberships as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/)
    string memberships = "none";
    # This is a nested resource. Read more about labels as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/)
    string labels?;
    # Also known as collections, tags, refer to the collection(s) that a Board belongs to
    boolean tags = false;
    # Valid values are one of: `mine` or `none`
    string boardStars = "none";
    # This is a nested resource. Read more about lists as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/)
    string lists = "open";
    # This is a nested resource. Read more about members as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/)
    string members = "none";
    # This is a nested resource. Read more about organizations as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/)
    boolean organization = false;
    # Use with the `organization` param to include organization pluginData with the response
    @http:Query {name: "organization_pluginData"}
    boolean organizationPluginData = false;
    # Determines whether the pluginData for this board should be returned. Valid values: true or false
    boolean pluginData = false;
    boolean myPrefs = false;
    # The fields of the board to be included in the response. Valid values: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idMemberCreator, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed, url
    string fields = "name,desc,descData,closed,idOrganization,pinned,url,shortUrl,prefs,labelNames";
    # This is a nested resource. Read more about actions as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/)
    string actions = "all";
};

public type InlineResponse200 record {
    string signupUrl?;
};

# Represents the Queries record for the operation: get-notifications-id-board
public type GetNotificationsIdBoardQueries record {
    # `all` or a comma-separated list of board[fields](/cloud/trello/guides/rest-api/object-definitions/)
    BoardFields fields?;
};

# An object containing information regarding the card's cover 
#  `brightness` can be sent alongside any of the other parameters, but all of the other parameters are mutually exclusive; you can not have the cover be a color and an `idAttachment` at the same time
public type CardsidValue record {
    # Determines whether the text on the cover should be dark or light. Setting it to `light` will make the text on the card cover dark. And vice versa, setting it to dark will make the text on the card cover light
    "dark"|"light" brightness?;
    # One of: `pink, yellow, lime, blue, black, orange, red, purple, sky, green`
    "pink"|"yellow"|"lime"|"blue"|"black"|"orange"|"red"|"purple"|"sky"|"green" color?;
    # Used if making an image the cover. Only Unsplash URLs (https://images.unsplash.com/) work
    string url?;
};

# Represents the Queries record for the operation: put-boards-id-myPrefs-showsidebaractivity
public type PutBoardsIdMyPrefsShowsidebaractivityQueries record {
    # Determines whether to show sidebar activity
    boolean value;
};

# Represents the Queries record for the operation: post-boards-id-idtags
public type PostBoardsIdIdtagsQueries record {
    # The id of a tag from the organization to which this board belongs
    TrelloID value;
};

# Represents the Queries record for the operation: post-lists-id-moveallcards
public type PostListsIdMoveallcardsQueries record {
    # The ID of the board the cards should be moved to
    TrelloID idBoard;
    # The ID of the list that the cards should be moved to
    TrelloID idList;
};

# Represents the Queries record for the operation: put-members-id-savedsearches-idsearch
public type PutMembersIdSavedsearchesIdsearchQueries record {
    # New position for saves search. `top`, `bottom`, or a positive float
    string pos?;
    # The new search query
    string query?;
    # The new name for the saved search
    string name?;
};

public type CardCheckItemStates CheckItemStatesOneOf1;

# Represents the Queries record for the operation: get-cards-id-actions
public type GetCardsIdActionsQueries record {
    # A comma-separated list of [action types](https://developer.atlassian.com/cloud/trello/guides/rest-api/action-types/)
    string filter = "commentCard, updateCard:idList";
    # The page of results for actions. Each page of results has 50 actions
    @constraint:Number {maxValue: 19}
    decimal page = 0;
};

public type Pos1Pos1OneOf12 float;

public type ActionLimitsReactionsPerAction record {
    decimal warnAt?;
    decimal disableAt?;
    string status?;
};

public type CardBadgesAttachmentsByTypeTrello record {
    decimal board?;
    decimal card?;
};

# Represents the Queries record for the operation: get-actions-id-membercreator
public type GetActionsIdMembercreatorQueries record {
    # `all` or a comma-separated list of member fields
    MemberFields fields?;
};

# Represents the Queries record for the operation: put-boards-id-myprefs-idemaillist
public type PutBoardsIdMyprefsIdemaillistQueries record {
    # The id of an email list
    TrelloID value;
};

# Represents the Queries record for the operation: get-tokens-token-member
public type GetTokensTokenMemberQueries record {
    # `all` or a comma-separated list of valid fields for [Member Object](/cloud/trello/guides/rest-api/object-definitions/)
    MemberFields fields?;
};

public type Pos2OneOf1 float;

public type Emoji record {
    EmojiTrello[] trello?;
};

public type BoardStars record {
    TrelloID idBoard?;
    int pos?;
    TrelloID id?;
};

public type ClaimableOrganizations record {
    decimal claimableCount?;
    ClaimableOrganizationsOrganizations[] organizations?;
};

public type ActionDataList record {
    string name?;
    TrelloID id?;
};

# Represents the Queries record for the operation: get-boards-id-actions
public type GetBoardsIdActionsQueries record {
    # A date string in the form of YYYY-MM-DDThh:mm:ssZ or a mongo object ID. Only objects created before this date will be returned
    string before?;
    # The fields of the [member](/cloud/trello/guides/rest-api/object-definitions/#member-object) to return
    @http:Query {name: "member_fields"}
    string memberFields = "activityBlocked,avatarHash,avatarUrl,fullName,idMemberReferrer,initials,nonPublic,nonPublicAvailable,username";
    # The format of the returned Actions. Either list or count
    string format = "list";
    # A comma-separated list of [action types](/cloud/trello/guides/rest-api/action-types/)
    string filter?;
    # The limit of the number of responses, between 0 and 1000
    decimal 'limit = 50;
    # Whether to return the member object for each action
    boolean member = true;
    # Whether to return the memberCreator object for each action
    boolean memberCreator = true;
    # Whether to show reactions on comments or not
    boolean reactions?;
    # The page of results for actions
    decimal page = 0;
    # The fields to be returned for the Actions. [See Action fields here](/cloud/trello/guides/rest-api/object-definitions/#action-object)
    Action fields?;
    # The fields of the [member](/cloud/trello/guides/rest-api/object-definitions/#member-object) creator to return
    @http:Query {name: "memberCreator_fields"}
    string memberCreatorFields = "activityBlocked,avatarHash,avatarUrl,fullName,idMemberReferrer,initials,nonPublic,nonPublicAvailable,username";
    # A comma-separated list of idModels. Only actions related to these models will be returned
    string idModels?;
    # A date string in the form of YYYY-MM-DDThh:mm:ssZ or a mongo object ID. Only objects created since this date will be returned
    string since?;
};

# Represents the Queries record for the operation: get-cards-id-attachments-idattachment
public type GetCardsIdAttachmentsIdattachmentQueries record {
    # The Attachment fields to be included in the response
    InlineParameterItemsFields[] fields = ["id"];
};

public type MemberMarketingOptIn record {
    string date?;
    boolean optedIn?;
};

public type Pos3OneOf1 float;

# Represents the Queries record for the operation: get-organizations-id-boards
public type GetOrganizationsIdBoardsQueries record {
    # `all` or a comma-separated list of: `open`, `closed`, `members`, `organization`, `public`
    "all"|"open"|"closed"|"members"|"organization"|"public" filter = "all";
    # `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)
    BoardFields fields?;
};

# Represents the Queries record for the operation: post-cards-id-idmembers
public type PostCardsIdIdmembersQueries record {
    # The ID of the Member to add to the card
    TrelloID value?;
};

public type Pos2Pos2OneOf12 "top"|"bottom";

# Represents the Queries record for the operation: post-labels
public type PostLabelsQueries record {
    # The ID of the Board to create the Label on
    string idBoard;
    # The color for the label
    Color? color;
    # Name for the label
    string name;
};

public type NotificationsChannelSettingschannelBody record {
    # Singular key or array of notification keys
    BlockedKey|BlockedKey[] blockedKeys;
};

public type CustomSticker record {
    CustomStickerScaled[] scaled?;
    TrelloID id?;
    string url?;
};

public type IdCustomFieldItemBody CardsidCardcustomFieldidCustomFielditemOneOf1|CardsidCardcustomFieldidCustomFielditemcardsidCardcustomFieldidCustomFielditemOneOf12;

public type CustomField record {
    CustomFieldDisplay display?;
    TrelloID id?;
    "card"|"board"|"member" modelType?;
    string fieldGroup?;
    string 'type?;
    string idModel?;
};

public type IdMember IdMemberOneOf1|TrelloID;

public type MemberFields "id";

# Represents the Queries record for the operation: get-actions-id-board
public type GetActionsIdBoardQueries record {
    # `all` or a comma-separated list of board fields
    BoardFields fields?;
};

# Represents the Queries record for the operation: post-boards-id-labels
public type PostBoardsIdLabelsQueries record {
    # Sets the color of the new label. Valid values are a label color or `null`
    string color;
    # The name of the label to be created. 1 to 16384 characters long
    string name;
};

public type IdMemberOneOf1 string;

public type Plugin record {
    TrelloID id?;
};
