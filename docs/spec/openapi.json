{
  "openapi": "3.0.0",
  "info": {
    "title": "Trello REST API",
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "https://api.trello.com/1"
    }
  ],
  "security": [
    {
      "APIKey": [],
      "APIToken": []
    }
  ],
  "paths": {
    "/actions/{id}": {
      "get": {
        "tags": [],
        "summary": "Get an Action",
        "description": "Get an Action",
        "operationId": "get-actions-id",
        "parameters": [
          {
            "name": "display",
            "in": "query",
            "description": "",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "entities",
            "in": "query",
            "description": "",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of action [fields](/cloud/trello/guides/rest-api/object-definitions/#action-object)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "all"
            }
          },
          {
            "name": "member",
            "in": "query",
            "description": "",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "member_fields",
            "in": "query",
            "description": "`all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "avatarHash,fullName,initials,username"
            },
            "x-ballerina-name": "memberFields"
          },
          {
            "name": "memberCreator",
            "in": "query",
            "description": "Whether to include the member object for the creator of the action",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "memberCreator_fields",
            "in": "query",
            "description": "`all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "avatarHash,fullName,initials,username"
            },
            "x-ballerina-name": "memberCreatorFields"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [],
        "summary": "Update an Action",
        "description": "Update a specific Action. Only comment actions can be updated. Used to edit the content of a comment.",
        "operationId": "put-actions-id",
        "parameters": [
          {
            "name": "text",
            "in": "query",
            "description": "The new text for the comment",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [],
        "summary": "Delete an Action",
        "description": "Delete a specific action. Only comment actions can be deleted.",
        "operationId": "delete-actions-id",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID of the Action",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/actions/{id}/{field}": {
      "get": {
        "tags": [],
        "summary": "Get a specific field on an Action",
        "description": "Get a specific property of an action",
        "operationId": "get-actions-id-field",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Action",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "field",
            "in": "path",
            "description": "An action field",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/ActionFields"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/actions/{id}/board": {
      "get": {
        "tags": [],
        "summary": "Get the Board for an Action",
        "description": "Get the Board for an Action",
        "operationId": "get-actions-id-board",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the action",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of board fields",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/BoardFields"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Board"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/actions/{id}/card": {
      "get": {
        "tags": [],
        "summary": "Get the Card for an Action",
        "description": "Get the card for an action",
        "operationId": "get-actions-id-card",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the action",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of card fields",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/CardFields"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/actions/{id}/list": {
      "get": {
        "tags": [],
        "summary": "Get the List for an Action",
        "description": "Get the List for an Action",
        "operationId": "get-actions-id-list",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the action",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of list fields",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/ListFields"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrelloList"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/actions/{id}/member": {
      "get": {
        "tags": [],
        "summary": "Get the Member of an Action",
        "description": "Gets the member of an action (not the creator)",
        "operationId": "get-actions-id-member",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Action",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of member fields",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/MemberFields"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/actions/{id}/memberCreator": {
      "get": {
        "tags": [],
        "summary": "Get the Member Creator of an Action",
        "description": "Get the Member who created the Action",
        "operationId": "get-actions-id-membercreator",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Action",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of member fields",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/MemberFields"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/actions/{id}/organization": {
      "get": {
        "tags": [],
        "summary": "Get the Organization of an Action",
        "description": "Get the Organization of an Action",
        "operationId": "get-actions-id-organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the action",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of organization fields",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/OrganizationFields"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/actions/{id}/text": {
      "put": {
        "tags": [],
        "summary": "Update a Comment Action",
        "description": "Update a comment action",
        "operationId": "put-actions-id-text",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the action to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "The new text for the comment",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/actions/{idAction}/reactions": {
      "get": {
        "tags": [],
        "summary": "Get Action's Reactions",
        "description": "List reactions for an action",
        "operationId": "get-actions-idaction-reactions",
        "parameters": [
          {
            "name": "member",
            "in": "query",
            "description": "Whether to load the member as a nested resource. See [Members Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#members-nested-resource)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "emoji",
            "in": "query",
            "description": "Whether to load the emoji as a nested resource",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [],
        "summary": "Create Reaction for Action",
        "description": "Adds a new reaction to an action",
        "operationId": "post-actions-idaction-reactions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdActionReactionsBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "idAction",
          "in": "path",
          "description": "The ID of the action",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/actions/{idAction}/reactions/{id}": {
      "get": {
        "tags": [],
        "summary": "Get Action's Reaction",
        "description": "Get information for a reaction",
        "operationId": "get-actions-idaction-reactions-id",
        "parameters": [
          {
            "name": "member",
            "in": "query",
            "description": "Whether to load the member as a nested resource. See [Members Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#members-nested-resource)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "emoji",
            "in": "query",
            "description": "Whether to load the emoji as a nested resource",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [],
        "summary": "Delete Action's Reaction",
        "description": "Deletes a reaction",
        "operationId": "delete-actions-idaction-reactions-id",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "idAction",
          "in": "path",
          "description": "The ID of the Action",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "The ID of the reaction",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/actions/{idAction}/reactionsSummary": {
      "get": {
        "tags": [],
        "summary": "List Action's summary of Reactions",
        "description": "List a summary of all reactions for an action",
        "operationId": "get-actions-idaction-reactionsummary",
        "parameters": [
          {
            "name": "idAction",
            "in": "path",
            "description": "The ID of the action",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/applications/{key}/compliance": {
      "get": {
        "tags": [],
        "summary": "Get Application's compliance data",
        "description": "",
        "operationId": "applications-key-compliance",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "key",
          "in": "path",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/batch": {
      "get": {
        "tags": [],
        "summary": "Batch Requests",
        "description": "Make up to 10 GET requests in a single, batched API call.",
        "operationId": "get-batch",
        "parameters": [
          {
            "name": "urls",
            "in": "query",
            "description": "A list of API routes. Maximum of 10 routes allowed. The routes should begin with a forward slash and should not include the API version number - e.g. \"urls=/members/trello,/cards/[cardId]\"",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/boards/{id}/memberships": {
      "get": {
        "tags": [],
        "summary": "Get Memberships of a Board",
        "description": "Get information about the memberships users have to the board.",
        "operationId": "get-boards-id-memberships",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the board",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "One of `admins`, `all`, `none`, `normal`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "admins",
                "all",
                "none",
                "normal"
              ],
              "default": "all"
            }
          },
          {
            "name": "activity",
            "in": "query",
            "description": "Works for premium organizations only",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "orgMemberType",
            "in": "query",
            "description": "Shows the type of member to the org the user is. For instance, an org admin will have a `orgMemberType` of `admin`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "member",
            "in": "query",
            "description": "Determines whether to include a [nested member object](/cloud/trello/guides/rest-api/nested-resources/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "member_fields",
            "in": "query",
            "description": "Fields to show if `member=true`. Valid values: [nested member resource fields](/cloud/trello/guides/rest-api/nested-resources/)",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/MemberFields"
            },
            "x-ballerina-name": "memberFields"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Memberships"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/boards/{id}": {
      "get": {
        "tags": [],
        "summary": "Get a Board",
        "description": "Request a single board.",
        "operationId": "get-boards-id",
        "parameters": [
          {
            "name": "actions",
            "in": "query",
            "description": "This is a nested resource. Read more about actions as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "all"
            }
          },
          {
            "name": "boardStars",
            "in": "query",
            "description": "Valid values are one of: `mine` or `none`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "none"
            }
          },
          {
            "name": "cards",
            "in": "query",
            "description": "This is a nested resource. Read more about cards as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "none"
            }
          },
          {
            "name": "card_pluginData",
            "in": "query",
            "description": "Use with the `cards` param to include card pluginData with the response",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-ballerina-name": "cardPluginData"
          },
          {
            "name": "checklists",
            "in": "query",
            "description": "This is a nested resource. Read more about checklists as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "none"
            }
          },
          {
            "name": "customFields",
            "in": "query",
            "description": "This is a nested resource. Read more about custom fields as nested resources [here](#custom-fields-nested-resource)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The fields of the board to be included in the response. Valid values: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idMemberCreator, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed, url",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "name,desc,descData,closed,idOrganization,pinned,url,shortUrl,prefs,labelNames"
            }
          },
          {
            "name": "labels",
            "in": "query",
            "description": "This is a nested resource. Read more about labels as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lists",
            "in": "query",
            "description": "This is a nested resource. Read more about lists as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "open"
            }
          },
          {
            "name": "members",
            "in": "query",
            "description": "This is a nested resource. Read more about members as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "none"
            }
          },
          {
            "name": "memberships",
            "in": "query",
            "description": "This is a nested resource. Read more about memberships as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "none"
            }
          },
          {
            "name": "pluginData",
            "in": "query",
            "description": "Determines whether the pluginData for this board should be returned. Valid values: true or false",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "organization",
            "in": "query",
            "description": "This is a nested resource. Read more about organizations as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "organization_pluginData",
            "in": "query",
            "description": "Use with the `organization` param to include organization pluginData with the response",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-ballerina-name": "organizationPluginData"
          },
          {
            "name": "myPrefs",
            "in": "query",
            "description": "",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Also known as collections, tags, refer to the collection(s) that a Board belongs to",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Board"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [],
        "summary": "Update a Board",
        "description": "Update an existing board by id",
        "operationId": "put-boards-id",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The new name for the board. 1 to 16384 characters long",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "desc",
            "in": "query",
            "description": "A new description for the board, 0 to 16384 characters long",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "closed",
            "in": "query",
            "description": "Whether the board is closed",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "subscribed",
            "in": "query",
            "description": "Whether the acting user is subscribed to the board",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idOrganization",
            "in": "query",
            "description": "The id of the Workspace the board should be moved to",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefs/permissionLevel",
            "in": "query",
            "description": "One of: org, private, public",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "x-ballerina-name": "prefsPermissionLevel"
          },
          {
            "name": "prefs/selfJoin",
            "in": "query",
            "description": "Whether Workspace members can join the board themselves",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            },
            "x-ballerina-name": "prefsSelfJoin"
          },
          {
            "name": "prefs/cardCovers",
            "in": "query",
            "description": "Whether card covers should be displayed on this board",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            },
            "x-ballerina-name": "prefsCardCovers"
          },
          {
            "name": "prefs/hideVotes",
            "in": "query",
            "description": "Determines whether the Voting Power-Up should hide who voted on cards or not",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            },
            "x-ballerina-name": "prefsHideVotes"
          },
          {
            "name": "prefs/invitations",
            "in": "query",
            "description": "Who can invite people to this board. One of: admins, members",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "x-ballerina-name": "prefsInvitations"
          },
          {
            "name": "prefs/voting",
            "in": "query",
            "description": "Who can vote on this board. One of disabled, members, observers, org, public",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "x-ballerina-name": "prefsVoting"
          },
          {
            "name": "prefs/comments",
            "in": "query",
            "description": "Who can comment on cards on this board. One of: disabled, members, observers, org, public",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "x-ballerina-name": "prefsComments"
          },
          {
            "name": "prefs/background",
            "in": "query",
            "description": "The id of a custom background or one of: blue, orange, green, red, purple, pink, lime, sky, grey",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "x-ballerina-name": "prefsBackground"
          },
          {
            "name": "prefs/cardAging",
            "in": "query",
            "description": "One of: pirate, regular",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "x-ballerina-name": "prefsCardAging"
          },
          {
            "name": "prefs/calendarFeedEnabled",
            "in": "query",
            "description": "Determines whether the calendar feed is enabled or not",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            },
            "x-ballerina-name": "prefsCalendarFeedEnabled"
          },
          {
            "name": "labelNames/green",
            "in": "query",
            "description": "Name for the green label. 1 to 16384 characters long",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "x-ballerina-name": "labelNamesGreen"
          },
          {
            "name": "labelNames/yellow",
            "in": "query",
            "description": "Name for the yellow label. 1 to 16384 characters long",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "x-ballerina-name": "labelNamesYellow"
          },
          {
            "name": "labelNames/orange",
            "in": "query",
            "description": "Name for the orange label. 1 to 16384 characters long",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "x-ballerina-name": "labelNamesOrange"
          },
          {
            "name": "labelNames/red",
            "in": "query",
            "description": "Name for the red label. 1 to 16384 characters long",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "x-ballerina-name": "labelNamesRed"
          },
          {
            "name": "labelNames/purple",
            "in": "query",
            "description": "Name for the purple label. 1 to 16384 characters long",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "x-ballerina-name": "labelNamesPurple"
          },
          {
            "name": "labelNames/blue",
            "in": "query",
            "description": "Name for the blue label. 1 to 16384 characters long",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "x-ballerina-name": "labelNamesBlue"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [],
        "summary": "Delete a Board",
        "description": "Delete a board.",
        "operationId": "delete-boards-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the board to delete",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/boards/{id}/{field}": {
      "get": {
        "tags": [],
        "summary": "Get a field on a Board",
        "description": "Get a single, specific field on a board",
        "operationId": "get-boards-id-field",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the board",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field",
            "in": "path",
            "description": "The field you'd like to receive. Valid values: closed, dateLastActivity, dateLastView, desc, descData, idMemberCreator, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed, url",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/boards/{boardId}/actions": {
      "get": {
        "tags": [],
        "summary": "Get Actions of a Board",
        "description": "Get all of the actions of a Board. See [Nested Resources](/cloud/trello/guides/rest-api/nested-resources/) for more information.",
        "operationId": "get-boards-id-actions",
        "parameters": [
          {
            "name": "boardId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The fields to be returned for the Actions. [See Action fields here](/cloud/trello/guides/rest-api/object-definitions/#action-object)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/Action"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A comma-separated list of [action types](/cloud/trello/guides/rest-api/action-types/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "The format of the returned Actions. Either list or count",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "list"
            }
          },
          {
            "name": "idModels",
            "in": "query",
            "description": "A comma-separated list of idModels. Only actions related to these models will be returned",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The limit of the number of responses, between 0 and 1000",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "default": 50
            }
          },
          {
            "name": "member",
            "in": "query",
            "description": "Whether to return the member object for each action",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "member_fields",
            "in": "query",
            "description": "The fields of the [member](/cloud/trello/guides/rest-api/object-definitions/#member-object) to return",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "activityBlocked,avatarHash,avatarUrl,fullName,idMemberReferrer,initials,nonPublic,nonPublicAvailable,username"
            },
            "x-ballerina-name": "memberFields"
          },
          {
            "name": "memberCreator",
            "in": "query",
            "description": "Whether to return the memberCreator object for each action",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "memberCreator_fields",
            "in": "query",
            "description": "The fields of the [member](/cloud/trello/guides/rest-api/object-definitions/#member-object) creator to return",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "activityBlocked,avatarHash,avatarUrl,fullName,idMemberReferrer,initials,nonPublic,nonPublicAvailable,username"
            },
            "x-ballerina-name": "memberCreatorFields"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page of results for actions",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "default": 0
            }
          },
          {
            "name": "reactions",
            "in": "query",
            "description": "Whether to show reactions on comments or not",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "A date string in the form of YYYY-MM-DDThh:mm:ssZ or a mongo object ID. Only objects created before this date will be returned",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "A date string in the form of YYYY-MM-DDThh:mm:ssZ or a mongo object ID. Only objects created since this date will be returned",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/boards/{boardId}/boardStars": {
      "get": {
        "tags": [],
        "summary": "Get boardStars on a Board",
        "description": "",
        "operationId": "get-boards-id-boardstars",
        "parameters": [
          {
            "name": "boardId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Valid values: mine, none",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "mine"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InlineResponseItems200"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/boards/{id}/checklists": {
      "get": {
        "tags": [],
        "summary": "Get Checklists on a Board",
        "description": "Get all of the checklists on a Board.",
        "operationId": "boards-id-checklists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the board",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/boards/{id}/cards": {
      "get": {
        "tags": [],
        "summary": "Get Cards on a Board",
        "description": "Get all of the open Cards on a Board. See [Nested Resources](/cloud/trello/guides/rest-api/nested-resources/) for more information.",
        "operationId": "get-boards-id-cards",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/boards/{id}/cards/{filter}": {
      "get": {
        "tags": [],
        "summary": "Get filtered Cards on a Board",
        "description": "Get the Cards on a Board that match a given filter. See [Nested Resources](/cloud/trello/guides/rest-api/nested-resources/) for more information.",
        "operationId": "get-boards-id-cards-filter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Board",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "path",
            "description": "One of: `all`, `closed`, `complete`, `incomplete`, `none`, `open`, `visible`",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "closed",
                "complete",
                "incomplete",
                "none",
                "open",
                "visible"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/boards/{id}/customFields": {
      "get": {
        "tags": [],
        "summary": "Get Custom Fields for Board",
        "description": "Get the Custom Field Definitions that exist on a board.",
        "operationId": "get-boards-id-customfields",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the board",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomField"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/boards/{id}/labels": {
      "get": {
        "tags": [],
        "summary": "Get Labels on a Board",
        "description": "Get all of the Labels on a Board.",
        "operationId": "get-boards-id-labels",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Board",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The fields to be returned for the Labels",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/Label"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of Labels to be returned",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [],
        "summary": "Create a Label on a Board",
        "description": "Create a new Label on a Board.",
        "operationId": "post-boards-id-labels",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the board to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the label to be created. 1 to 16384 characters long",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "color",
            "in": "query",
            "description": "Sets the color of the new label. Valid values are a label color or `null`",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/boards/{id}/lists": {
      "get": {
        "tags": [],
        "summary": "Get Lists on a Board",
        "description": "Get the Lists on a Board",
        "operationId": "get-boards-id-lists",
        "parameters": [
          {
            "name": "cards",
            "in": "query",
            "description": "Filter to apply to Cards",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/ViewFilter"
            }
          },
          {
            "name": "card_fields",
            "in": "query",
            "description": "`all` or a comma-separated list of card [fields](/cloud/trello/guides/rest-api/object-definitions/#card-object)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "all"
            },
            "x-ballerina-name": "cardFields"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter to apply to Lists",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/ViewFilter"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of list [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "all"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrelloList"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [],
        "summary": "Create a List on a Board",
        "description": "Create a new List on a Board.",
        "operationId": "post-boards-id-lists",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The name of the list to be created. 1 to 16384 characters long",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pos",
            "in": "query",
            "description": "Determines the position of the list. Valid values: `top`, `bottom`, or a positive number",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "top"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrelloList"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID of the board",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/boards/{id}/lists/{filter}": {
      "get": {
        "tags": [],
        "summary": "Get filtered Lists on a Board",
        "description": "",
        "operationId": "get-boards-id-lists-filter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the board",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "filter",
            "in": "path",
            "description": "One of `all`, `closed`, `none`, `open`",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/ViewFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/boards/{id}/members": {
      "get": {
        "tags": [],
        "summary": "Get the Members of a Board",
        "description": "Get the Members for a board",
        "operationId": "get-boards-id-members",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [],
        "summary": "Invite Member to Board via email",
        "description": "Invite a Member to a Board via their email address.",
        "operationId": "put-boards-id-members",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The email address of a user to add as a member of the board",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "email"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Valid values: admin, normal, observer. Determines what type of member the user being added should be of the board",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "admin",
                "normal",
                "observer"
              ],
              "default": "normal"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdMembersBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID of the board",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/boards/{id}/members/{idMember}": {
      "put": {
        "tags": [],
        "summary": "Add a Member to a Board",
        "description": "Add a member to the board.",
        "operationId": "put-boards-id-members-idmember",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "One of: admin, normal, observer. Determines the type of member this user will be on the board",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "admin",
                "normal",
                "observer"
              ]
            }
          },
          {
            "name": "allowBillableGuest",
            "in": "query",
            "description": "Optional param that allows organization admins to add multi-board guests onto a board",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [],
        "summary": "Remove Member from Board",
        "description": "",
        "operationId": "boardsidmembersidmember",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The id of the board to update",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        },
        {
          "name": "idMember",
          "in": "path",
          "description": "The id of the member to add to the board",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/boards/{id}/memberships/{idMembership}": {
      "put": {
        "tags": [],
        "summary": "Update Membership of Member on a Board",
        "description": "Update an existing board by id",
        "operationId": "put-boards-id-memberships-idmembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the board to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idMembership",
            "in": "path",
            "description": "The id of a membership that should be added to this board",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "One of: admin, normal, observer. Determines the type of member that this membership will be to this board",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "admin",
                "normal",
                "observer"
              ]
            }
          },
          {
            "name": "member_fields",
            "in": "query",
            "description": "Valid values: all, avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "avatarHash",
                "bio",
                "bioData",
                "confirmed",
                "fullName",
                "idPremOrgsAdmin",
                "initials",
                "memberType",
                "products",
                "status",
                "url",
                "username"
              ],
              "default": "fullName"
            },
            "x-ballerina-name": "memberFields"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/boards/{id}/myPrefs/emailPosition": {
      "put": {
        "tags": [],
        "summary": "Update emailPosition Pref on a Board",
        "description": "Update emailPosition Pref on a Board",
        "operationId": "put-boards-id-myprefs-emailposition",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the board to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "Valid values: bottom, top. Determines the position of the email address",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "bottom",
                "top"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/boards/{id}/myPrefs/idEmailList": {
      "put": {
        "tags": [],
        "summary": "Update idEmailList Pref on a Board",
        "description": "Change the default list that email-to-board cards are created in.",
        "operationId": "put-boards-id-myprefs-idemaillist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the board to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "The id of an email list",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/boards/{id}/myPrefs/showSidebar": {
      "put": {
        "tags": [],
        "summary": "Update showSidebar Pref on a Board",
        "operationId": "put-boards-id-myPrefs-showsidebar",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the board to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "Determines whether to show the side bar",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/boards/{id}/myPrefs/showSidebarActivity": {
      "put": {
        "tags": [],
        "summary": "Update showSidebarActivity Pref on a Board",
        "operationId": "put-boards-id-myPrefs-showsidebaractivity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the board to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "Determines whether to show sidebar activity",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/boards/{id}/myPrefs/showSidebarBoardActions": {
      "put": {
        "tags": [],
        "summary": "Update showSidebarBoardActions Pref on a Board",
        "operationId": "put-boards-id-myPrefs-showsidebarboardactions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the board to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "Determines whether to show the sidebar board actions",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/boards/{id}/myPrefs/showSidebarMembers": {
      "put": {
        "tags": [],
        "summary": "Update showSidebarMembers Pref on a Board",
        "operationId": "put-boards-id-myPrefs-showsidebarmembers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the board to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "Determines whether to show members of the board in the sidebar",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/boards/": {
      "post": {
        "tags": [],
        "summary": "Create a Board",
        "description": "Create a new board.",
        "operationId": "post-boards",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The new name for the board. 1 to 16384 characters long",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 16384,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "defaultLabels",
            "in": "query",
            "description": "Determines whether to use the default set of labels",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "defaultLists",
            "in": "query",
            "description": "Determines whether to add the default set of lists to a board (To Do, Doing, Done). It is ignored if `idBoardSource` is provided",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "desc",
            "in": "query",
            "description": "A new description for the board, 0 to 16384 characters long",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "idOrganization",
            "in": "query",
            "description": "The id or name of the Workspace the board should belong to",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idBoardSource",
            "in": "query",
            "description": "The id of a board to copy into the new board",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "keepFromSource",
            "in": "query",
            "description": "To keep cards from the original board pass in the value `cards`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "cards",
                "none"
              ],
              "default": "none"
            }
          },
          {
            "name": "powerUps",
            "in": "query",
            "description": "The Power-Ups that should be enabled on the new board. One of: `all`, `calendar`, `cardAging`, `recap`, `voting`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "calendar",
                "cardAging",
                "recap",
                "voting"
              ]
            }
          },
          {
            "name": "prefs_permissionLevel",
            "in": "query",
            "description": "The permissions level of the board. One of: `org`, `private`, `public`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "org",
                "private",
                "public"
              ],
              "default": "private"
            },
            "x-ballerina-name": "prefsPermissionLevel"
          },
          {
            "name": "prefs_voting",
            "in": "query",
            "description": "Who can vote on this board. One of `disabled`, `members`, `observers`, `org`, `public`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "disabled",
                "members",
                "observers",
                "org",
                "public"
              ],
              "default": "disabled"
            },
            "x-ballerina-name": "prefsVoting"
          },
          {
            "name": "prefs_comments",
            "in": "query",
            "description": "Who can comment on cards on this board. One of: `disabled`, `members`, `observers`, `org`, `public`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "disabled",
                "members",
                "observers",
                "org",
                "public"
              ],
              "default": "members"
            },
            "x-ballerina-name": "prefsComments"
          },
          {
            "name": "prefs_invitations",
            "in": "query",
            "description": "Determines what types of members can invite users to join. One of: `admins`, `members`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "members",
                "admins"
              ],
              "default": "members"
            },
            "x-ballerina-name": "prefsInvitations"
          },
          {
            "name": "prefs_selfJoin",
            "in": "query",
            "description": "Determines whether users can join the boards themselves or whether they have to be invited",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-ballerina-name": "prefsSelfJoin"
          },
          {
            "name": "prefs_cardCovers",
            "in": "query",
            "description": "Determines whether card covers are enabled",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-ballerina-name": "prefsCardCovers"
          },
          {
            "name": "prefs_background",
            "in": "query",
            "description": "The id of a custom background or one of: `blue`, `orange`, `green`, `red`, `purple`, `pink`, `lime`, `sky`, `grey`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "blue",
                "orange",
                "green",
                "red",
                "purple",
                "pink",
                "lime",
                "sky",
                "grey"
              ],
              "default": "blue"
            },
            "x-ballerina-name": "prefsBackground"
          },
          {
            "name": "prefs_cardAging",
            "in": "query",
            "description": "Determines the type of card aging that should take place on the board if card aging is enabled. One of: `pirate`, `regular`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "pirate",
                "regular"
              ],
              "default": "regular"
            },
            "x-ballerina-name": "prefsCardAging"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/boards/{id}/calendarKey/generate": {
      "post": {
        "tags": [],
        "summary": "Create a calendarKey for a Board",
        "description": "Create a new board.",
        "operationId": "post-boards-id-calendarkey-generate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the board to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/boards/{id}/emailKey/generate": {
      "post": {
        "tags": [],
        "summary": "Create a emailKey for a Board",
        "description": "",
        "operationId": "post-boards-id-emailkey-generate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the board to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/boards/{id}/idTags": {
      "post": {
        "tags": [],
        "summary": "Create a Tag for a Board",
        "operationId": "post-boards-id-idtags",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the board to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "The id of a tag from the organization to which this board belongs",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/boards/{id}/markedAsViewed": {
      "post": {
        "tags": [],
        "summary": "Mark Board as viewed",
        "description": "",
        "operationId": "post-boards-id-markedasviewed",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the board to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/boards/{id}/boardPlugins": {
      "get": {
        "tags": [],
        "summary": "Get Enabled Power-Ups on Board",
        "description": "Get the enabled Power-Ups on a board",
        "operationId": "get-boards-id-boardplugins",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Plugin"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [],
        "summary": "Enable a Power-Up on a Board",
        "description": "Enable a Power-Up on a Board",
        "operationId": "post-boards-id-boardplugins",
        "parameters": [
          {
            "name": "idPlugin",
            "in": "query",
            "description": "The ID of the Power-Up to enable",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": true
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID of the Board",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/boards/{id}/boardPlugins/{idPlugin}": {
      "delete": {
        "tags": [],
        "summary": "Disable a Power-Up on a Board",
        "description": "Disable a Power-Up on a board",
        "operationId": "delete-boards-id-boardplugins",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the board",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idPlugin",
            "in": "path",
            "description": "The ID of the Power-Up to disable",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": true
      }
    },
    "/boards/{id}/plugins": {
      "get": {
        "tags": [],
        "summary": "Get Power-Ups on a Board",
        "description": "List the Power-Ups on a board",
        "operationId": "get-board-id-plugins",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the board",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "One of: `enabled` or `available`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "available"
              ],
              "default": "enabled"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cards": {
      "post": {
        "tags": [],
        "summary": "Create a new Card",
        "description": "Create a new card. Query parameters may also be replaced with a JSON request body instead.",
        "operationId": "post-cards",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The name for the card",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "desc",
            "in": "query",
            "description": "The description for the card",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pos",
            "in": "query",
            "description": "The position of the new card. `top`, `bottom`, or a positive float",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/Pos"
            }
          },
          {
            "name": "due",
            "in": "query",
            "description": "A due date for the card",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The start date of a card, or `null`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date",
              "nullable": true
            }
          },
          {
            "name": "dueComplete",
            "in": "query",
            "description": "Whether the status of the card is complete",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "idList",
            "in": "query",
            "description": "The ID of the list the card should be created in",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idMembers",
            "in": "query",
            "description": "Comma-separated list of member IDs to add to the card",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InlineParameterItemsIdMembers"
              }
            }
          },
          {
            "name": "idLabels",
            "in": "query",
            "description": "Comma-separated list of label IDs to add to the card",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InlineParameterItemsIdLabels"
              }
            }
          },
          {
            "name": "urlSource",
            "in": "query",
            "description": "A URL starting with `http://` or `https://`. The URL will be attached to the card upon creation",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "url"
            }
          },
          {
            "name": "fileSource",
            "in": "query",
            "description": "",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          {
            "name": "mimeType",
            "in": "query",
            "description": "The mimeType of the attachment. Max length 256",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idCardSource",
            "in": "query",
            "description": "The ID of a card to copy into the new card",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "keepFromSource",
            "in": "query",
            "description": "If using `idCardSource` you can specify which properties to copy over. `all` or comma-separated list of: `attachments,checklists,customFields,comments,due,start,labels,members,start,stickers`",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "attachments",
                "checklists",
                "comments",
                "customFields",
                "due",
                "start",
                "labels",
                "members",
                "start",
                "stickers"
              ],
              "default": "all"
            }
          },
          {
            "name": "address",
            "in": "query",
            "description": "For use with/by the Map View",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationName",
            "in": "query",
            "description": "For use with/by the Map View",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "coordinates",
            "in": "query",
            "description": "For use with/by the Map View. Should take the form latitude,longitude",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cards/{id}": {
      "get": {
        "tags": [],
        "summary": "Get a Card",
        "description": "Get a card by its ID",
        "operationId": "get-cards-id",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of [fields](/cloud/trello/guides/rest-api/object-definitions/). **Defaults**: `badges, checkItemStates, closed, dateLastActivity, desc, descData, due, start, idBoard, idChecklists, idLabels, idList, idMembers, idShort, idAttachmentCover, manualCoverAttachment, labels, name, pos, shortUrl, url`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actions",
            "in": "query",
            "description": "See the [Actions Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#actions-nested-resource)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachments",
            "in": "query",
            "description": "`true`, `false`, or `cover`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/Attachments"
            }
          },
          {
            "name": "attachment_fields",
            "in": "query",
            "description": "`all` or a comma-separated list of attachment [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "all"
            },
            "x-ballerina-name": "attachmentFields"
          },
          {
            "name": "members",
            "in": "query",
            "description": "Whether to return member objects for members on the card",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "member_fields",
            "in": "query",
            "description": "`all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/). **Defaults**: `avatarHash, fullName, initials, username`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "x-ballerina-name": "memberFields"
          },
          {
            "name": "membersVoted",
            "in": "query",
            "description": "Whether to return member objects for members who voted on the card",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "memberVoted_fields",
            "in": "query",
            "description": "`all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/). **Defaults**: `avatarHash, fullName, initials, username`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "x-ballerina-name": "memberVotedFields"
          },
          {
            "name": "checkItemStates",
            "in": "query",
            "description": "",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "checklists",
            "in": "query",
            "description": "Whether to return the checklists on the card. `all` or `none`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "none"
            }
          },
          {
            "name": "checklist_fields",
            "in": "query",
            "description": "`all` or a comma-separated list of `idBoard,idCard,name,pos`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "all"
            },
            "x-ballerina-name": "checklistFields"
          },
          {
            "name": "board",
            "in": "query",
            "description": "Whether to return the board object the card is on",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "board_fields",
            "in": "query",
            "description": "`all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/#board-object). **Defaults**: `name, desc, descData, closed, idOrganization, pinned, url, prefs`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "x-ballerina-name": "boardFields"
          },
          {
            "name": "list",
            "in": "query",
            "description": "See the [Lists Nested Resource](/cloud/trello/guides/rest-api/nested-resources/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "pluginData",
            "in": "query",
            "description": "Whether to include pluginData on the card with the response",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "stickers",
            "in": "query",
            "description": "Whether to include sticker models with the response",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "sticker_fields",
            "in": "query",
            "description": "`all` or a comma-separated list of sticker [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "all"
            },
            "x-ballerina-name": "stickerFields"
          },
          {
            "name": "customFieldItems",
            "in": "query",
            "description": "Whether to include the customFieldItems",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [],
        "summary": "Update a Card",
        "description": "Update a card. Query parameters may also be replaced with a JSON request body instead.",
        "operationId": "put-cards-id",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The new name for the card",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "desc",
            "in": "query",
            "description": "The new description for the card",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "closed",
            "in": "query",
            "description": "Whether the card should be archived (closed: true)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "idMembers",
            "in": "query",
            "description": "Comma-separated list of member IDs",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idAttachmentCover",
            "in": "query",
            "description": "The ID of the image attachment the card should use as its cover, or null for none",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idList",
            "in": "query",
            "description": "The ID of the list the card should be in",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idLabels",
            "in": "query",
            "description": "Comma-separated list of label IDs",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idBoard",
            "in": "query",
            "description": "The ID of the board the card should be on",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "pos",
            "in": "query",
            "description": "The position of the card in its list. `top`, `bottom`, or a positive float",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/Pos1"
            }
          },
          {
            "name": "due",
            "in": "query",
            "description": "When the card is due, or `null`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date",
              "nullable": true
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The start date of a card, or `null`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date",
              "nullable": true
            }
          },
          {
            "name": "dueComplete",
            "in": "query",
            "description": "Whether the status of the card is complete",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "subscribed",
            "in": "query",
            "description": "Whether the member is should be subscribed to the card",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "address",
            "in": "query",
            "description": "For use with/by the Map View",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationName",
            "in": "query",
            "description": "For use with/by the Map View",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "coordinates",
            "in": "query",
            "description": "For use with/by the Map View. Should be latitude,longitude",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cover",
            "in": "query",
            "description": "Updates the card's cover\n | Option | Values | About |\n |--------|--------|-------|\n | color | `pink`, `yellow`, `lime`, `blue`, `black`, `orange`, `red`, `purple`, `sky`, `green` | Makes the cover a solid color . |\n | brightness | `dark`, `light` | Determines whether the text on the cover should be dark or light.\n | url | An unsplash URL: https://images.unsplash.com | Used if making an image the cover. Only Unsplash URLs work.\n | idAttachment | ID of an attachment on the card | Used if setting an attached image as the cover. |\n | size | `normal`, `full` | Determines whether to show the card name on the cover, or below it. |\n \n `brightness` can be sent alongside any of the other parameters, but all of the other parameters are mutually exclusive; you can not have the cover be a `color` and an `idAttachment` at the same time. \n \n On the brightness options, setting it to light will make the text on the card cover dark:\n ![](/cloud/trello/images/rest/cards/cover-brightness-dark.png)\n \n And vice versa, setting it to dark will make the text on the card cover light: \n ![](/cloud/trello/images/rest/cards/cover-brightness-light.png) ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/Cover"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [],
        "summary": "Delete a Card",
        "description": "Delete a Card",
        "operationId": "delete-cards-id",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrelloList"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID of the Card",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/cards/{id}/{field}": {
      "get": {
        "tags": [],
        "summary": "Get a field on a Card",
        "description": "Get a specific property of a card",
        "operationId": "get-cards-id-field",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Card",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "field",
            "in": "path",
            "description": "The desired field",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/CardFields"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cards/{id}/actions": {
      "get": {
        "tags": [],
        "summary": "Get Actions on a Card",
        "description": "List the Actions on a Card. See [Nested Resources](/cloud/trello/guides/rest-api/nested-resources/) for more information.",
        "operationId": "get-cards-id-actions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Card",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A comma-separated list of [action types](https://developer.atlassian.com/cloud/trello/guides/rest-api/action-types/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "commentCard, updateCard:idList"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page of results for actions. Each page of results has 50 actions",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 19,
              "type": "number",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Action"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cards/{id}/attachments": {
      "get": {
        "tags": [],
        "summary": "Get Attachments on a Card",
        "description": "List the attachments on a card",
        "operationId": "get-cards-id-attachments",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of attachment [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "all"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Use `cover` to restrict to just the cover attachment",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "false"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InlineResponseItems2001"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [],
        "summary": "Create Attachment On Card",
        "description": "Create an Attachment to a Card. See https://glitch.com/~trello-attachments-api for code examples. You may need to remix the project in order to view it.",
        "operationId": "post-cards-id-attachments",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The name of the attachment. Max length 256",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "The file to attach, as multipart/form-data",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          {
            "name": "mimeType",
            "in": "query",
            "description": "The mimeType of the attachment. Max length 256",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "A URL to attach. Must start with `http://` or `https://`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "setCover",
            "in": "query",
            "description": "Determines whether to use the new attachment as a cover for the Card",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InlineResponseItems2002"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID of the Card",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/cards/{id}/attachments/{idAttachment}": {
      "get": {
        "tags": [],
        "summary": "Get an Attachment on a Card",
        "description": "Get a specific Attachment on a Card.",
        "operationId": "get-cards-id-attachments-idattachment",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The Attachment fields to be included in the response",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InlineParameterItemsFields"
              },
              "default": [
                "id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InlineResponseItems2003"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [],
        "summary": "Delete an Attachment on a Card",
        "description": "Delete an Attachment",
        "operationId": "deleted-cards-id-attachments-idattachment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Card",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idAttachment",
            "in": "path",
            "description": "The ID of the attachment to delete",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID of the Card",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        },
        {
          "name": "idAttachment",
          "in": "path",
          "description": "The ID of the Attachment",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/cards/{id}/board": {
      "get": {
        "tags": [],
        "summary": "Get the Board the Card is on",
        "description": "Get the board a card is on",
        "operationId": "get-cards-id-board",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Card",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/#board-object)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "all"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/cards/{id}/checkItemStates": {
      "get": {
        "tags": [],
        "summary": "Get checkItems on a Card",
        "description": "Get the completed checklist items on a card",
        "operationId": "get-cards-id-checkitemstates",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Card",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of: `idCheckItem`, `state`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "all"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/cards/{id}/checklists": {
      "get": {
        "tags": [],
        "summary": "Get Checklists on a Card",
        "description": "Get the checklists on a card",
        "operationId": "get-cards-id-checklists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Card",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "checkItems",
            "in": "query",
            "description": "`all` or `none`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "none"
              ],
              "default": "all"
            }
          },
          {
            "name": "checkItem_fields",
            "in": "query",
            "description": "`all` or a comma-separated list of: `name,nameData,pos,state,type,due,dueReminder,idMember`",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "name,nameData,pos,state,due,dueReminder,idMember"
            },
            "x-ballerina-name": "checkItemFields"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "`all` or `none`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "none"
              ],
              "default": "all"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of: `idBoard,idCard,name,pos`",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "name",
                "nameData",
                "pos",
                "state",
                "type"
              ],
              "default": "all"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [],
        "summary": "Create Checklist on a Card",
        "description": "Create a new checklist on a card",
        "operationId": "post-cards-id-checklists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Card",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the checklist",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idChecklistSource",
            "in": "query",
            "description": "The ID of a source checklist to copy into the new one",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "pos",
            "in": "query",
            "description": "The position of the checklist on the card. One of: `top`, `bottom`, or a positive number",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/cards/{id}/checkItem/{idCheckItem}": {
      "get": {
        "tags": [],
        "summary": "Get checkItem on a Card",
        "description": "Get a specific checkItem on a card",
        "operationId": "get-cards-id-checkitem-idcheckitem",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of `name,nameData,pos,state,type,due,dueReminder,idMember`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "name,nameData,pos,state,due,dueReminder,idMember"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [],
        "summary": "Update a checkItem on a Card",
        "description": "Update an item in a checklist on a card.",
        "operationId": "put-cards-id-checkitem-idcheckitem",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The new name for the checklist item",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "One of: `complete`, `incomplete`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "complete",
                "incomplete"
              ]
            }
          },
          {
            "name": "idChecklist",
            "in": "query",
            "description": "The ID of the checklist this item is in",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "pos",
            "in": "query",
            "description": "`top`, `bottom`, or a positive float",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/PosStringOrNumber"
            }
          },
          {
            "name": "due",
            "in": "query",
            "description": "A due date for the checkitem",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "dueReminder",
            "in": "query",
            "description": "A dueReminder for the due date on the checkitem",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "nullable": true
            }
          },
          {
            "name": "idMember",
            "in": "query",
            "description": "The ID of the member to remove from the card",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [],
        "summary": "Delete checkItem on a Card",
        "description": "Delete a checklist item",
        "operationId": "delete-cards-id-checkitem-idcheckitem",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID of the Card",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        },
        {
          "name": "idCheckItem",
          "in": "path",
          "description": "The ID of the checkitem",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/cards/{id}/list": {
      "get": {
        "tags": [],
        "summary": "Get the List of a Card",
        "description": "Get the list a card is in",
        "operationId": "get-cards-id-list",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Card",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of list [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "all"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/cards/{id}/members": {
      "get": {
        "tags": [],
        "summary": "Get the Members of a Card",
        "description": "Get the members on a card",
        "operationId": "get-cards-id-members",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Card",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "avatarHash,fullName,initials,username"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/cards/{id}/membersVoted": {
      "get": {
        "tags": [],
        "summary": "Get Members who have voted on a Card",
        "description": "Get the members who have voted on a card",
        "operationId": "get-cards-id-membersvoted",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "avatarHash,fullName,initials,username"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [],
        "summary": "Add Member vote to Card",
        "description": "Vote on the card for a given member.",
        "operationId": "cardsidmembersvoted-1",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "description": "The ID of the member to vote 'yes' on the card",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID of the Card",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/cards/{id}/pluginData": {
      "get": {
        "tags": [],
        "summary": "Get pluginData on a Card",
        "description": "Get any shared pluginData on a card.",
        "operationId": "get-cards-id-plugindata",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Card",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/cards/{id}/stickers": {
      "get": {
        "tags": [],
        "summary": "Get Stickers on a Card",
        "description": "Get the stickers on a card",
        "operationId": "get-cards-id-stickers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Card",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of sticker [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "all"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [],
        "summary": "Add a Sticker to a Card",
        "description": "Add a sticker to a card",
        "operationId": "post-cards-id-stickers",
        "parameters": [
          {
            "name": "image",
            "in": "query",
            "description": "For custom stickers, the id of the sticker. For default stickers, the string identifier (like 'taco-cool', see below)",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The top position of the sticker, from -60 to 100",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100,
              "minimum": -60,
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "left",
            "in": "query",
            "description": "The left position of the sticker, from -60 to 100",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100,
              "minimum": -60,
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "zIndex",
            "in": "query",
            "description": "The z-index of the sticker",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "rotate",
            "in": "query",
            "description": "The rotation of the sticker",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 360,
              "minimum": 0,
              "type": "number",
              "format": "float",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID of the Card",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/cards/{id}/stickers/{idSticker}": {
      "get": {
        "tags": [],
        "summary": "Get a Sticker on a Card",
        "description": "Get a specific sticker on a card",
        "operationId": "get-cards-id-stickers-idsticker",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of sticker [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "all"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [],
        "summary": "Update a Sticker on a Card",
        "description": "Update a sticker on a card",
        "operationId": "put-cards-id-stickers-idsticker",
        "parameters": [
          {
            "name": "top",
            "in": "query",
            "description": "The top position of the sticker, from -60 to 100",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100,
              "minimum": -60,
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "left",
            "in": "query",
            "description": "The left position of the sticker, from -60 to 100",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100,
              "minimum": -60,
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "zIndex",
            "in": "query",
            "description": "The z-index of the sticker",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "rotate",
            "in": "query",
            "description": "The rotation of the sticker",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 360,
              "minimum": 0,
              "type": "number",
              "format": "float",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [],
        "summary": "Delete a Sticker on a Card",
        "description": "Remove a sticker from the card",
        "operationId": "delete-cards-id-stickers-idsticker",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID of the Card",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        },
        {
          "name": "idSticker",
          "in": "path",
          "description": "The ID of the sticker",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/cards/{id}/actions/{idAction}/comments": {
      "put": {
        "tags": [],
        "summary": "Update Comment Action on a Card",
        "description": "Update an existing comment",
        "operationId": "put-cards-id-actions-idaction-comments",
        "parameters": [
          {
            "name": "text",
            "in": "query",
            "description": "The new text for the comment",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [],
        "summary": "Delete a comment on a Card",
        "description": "Delete a comment",
        "operationId": "delete-cards-id-actions-id-comments",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID of the Card",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        },
        {
          "name": "idAction",
          "in": "path",
          "description": "The ID of the comment action to update",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/cards/{idCard}/customField/{idCustomField}/item": {
      "put": {
        "tags": [],
        "summary": "Update Custom Field item on Card",
        "description": "Setting, updating, and removing the value for a Custom Field on a card. For more details on updating custom fields check out the [Getting Started With Custom Fields](/cloud/trello/guides/rest-api/getting-started-with-custom-fields/)",
        "operationId": "put-cards-idcard-customfield-idcustomfield-item",
        "parameters": [
          {
            "name": "idCard",
            "in": "path",
            "description": "ID of the card that the Custom Field value should be set/updated for",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idCustomField",
            "in": "path",
            "description": "ID of the Custom Field on the card",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdCustomFieldItemBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/cards/{idCard}/customFields": {
      "put": {
        "tags": [],
        "summary": "Update Multiple Custom Field items on Card",
        "description": "Setting, updating, and removing the values for multiple Custom Fields on a card. For more details on updating custom fields check out the [Getting Started With Custom Fields](/cloud/trello/guides/rest-api/getting-started-with-custom-fields/)",
        "operationId": "put-cards-idcard-customfields",
        "parameters": [
          {
            "name": "idCard",
            "in": "path",
            "required": true,
            "description": "The ID of the card",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdCardCustomFieldsBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/cards/{id}/customFieldItems": {
      "get": {
        "tags": [],
        "summary": "Get Custom Field Items for a Card",
        "description": "Get the custom field items for a card.",
        "operationId": "get-cards-id-customfielditems",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Card",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomFieldItems"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cards/{id}/actions/comments": {
      "post": {
        "tags": [],
        "summary": "Add a new comment to a Card",
        "description": "Add a new comment to a card",
        "operationId": "post-cards-id-actions-comments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Card",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "text",
            "in": "query",
            "description": "The comment",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cards/{id}/idLabels": {
      "post": {
        "tags": [],
        "summary": "Add a Label to a Card",
        "description": "Add a label to a card",
        "operationId": "post-cards-id-idlabels",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Card",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "The ID of the label to add",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/cards/{id}/idMembers": {
      "post": {
        "tags": [],
        "summary": "Add a Member to a Card",
        "description": "Add a member to a card",
        "operationId": "post-cards-id-idmembers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Card",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "The ID of the Member to add to the card",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/cards/{id}/labels": {
      "post": {
        "tags": [],
        "summary": "Create a new Label on a Card",
        "description": "Create a new label for the board and add it to the given card.",
        "operationId": "post-cards-id-labels",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Card",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "color",
            "in": "query",
            "description": "A valid label color or `null`. See [labels](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "A name for the label",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/cards/{id}/markAssociatedNotificationsRead": {
      "post": {
        "tags": [],
        "summary": "Mark a Card's Notifications as read",
        "description": "Mark notifications about this card as read",
        "operationId": "post-cards-id-markassociatednotificationsread",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Card",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/cards/{id}/idLabels/{idLabel}": {
      "delete": {
        "tags": [],
        "summary": "Remove a Label from a Card",
        "description": "Remove a label from a card",
        "operationId": "delete-cards-id-idlabels-idlabel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Card",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idLabel",
            "in": "path",
            "description": "The ID of the label to remove",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/cards/{id}/idMembers/{idMember}": {
      "delete": {
        "tags": [],
        "summary": "Remove a Member from a Card",
        "description": "Remove a member from a card",
        "operationId": "delete-id-idmembers-idmember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Card",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idMember",
            "in": "path",
            "description": "The ID of the member to remove from the card",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/cards/{id}/membersVoted/{idMember}": {
      "delete": {
        "tags": [],
        "summary": "Remove a Member's Vote on a Card",
        "description": "Remove a member's vote from a card",
        "operationId": "delete-cards-id-membersvoted-idmember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Card",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idMember",
            "in": "path",
            "description": "The ID of the member whose vote to remove",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}": {
      "put": {
        "tags": [],
        "summary": "Update Checkitem on Checklist on Card",
        "description": "Update an item in a checklist on a card.",
        "operationId": "put-cards-idcard-checklist-idchecklist-checkitem-idcheckitem",
        "parameters": [
          {
            "name": "idCard",
            "in": "path",
            "description": "The ID of the Card",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idCheckItem",
            "in": "path",
            "description": "The ID of the checklist item to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "pos",
            "in": "query",
            "description": "`top`, `bottom`, or a positive float",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/PosStringOrNumber"
            }
          },
          {
            "name": "idChecklist",
            "in": "path",
            "description": "The ID of the item to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckItem"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/cards/{id}/checklists/{idChecklist}": {
      "delete": {
        "tags": [],
        "summary": "Delete a Checklist on a Card",
        "description": "Delete a checklist from a card",
        "operationId": "delete-cards-id-checklists-idchecklist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Card",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idChecklist",
            "in": "path",
            "description": "The ID of the checklist to delete",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/checklists": {
      "post": {
        "tags": [],
        "summary": "Create a Checklist",
        "description": "",
        "operationId": "post-checklists",
        "parameters": [
          {
            "name": "idCard",
            "in": "query",
            "description": "The ID of the Card that the checklist should be added to",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the checklist. Should be a string of length 1 to 16384",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 16384,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "pos",
            "in": "query",
            "description": "The position of the checklist on the card. One of: `top`, `bottom`, or a positive number",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/PosStringOrNumber"
            }
          },
          {
            "name": "idChecklistSource",
            "in": "query",
            "description": "The ID of a checklist to copy into the new checklist",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/checklists/{id}": {
      "get": {
        "tags": [],
        "summary": "Get a Checklist",
        "description": "",
        "operationId": "get-checklists-id",
        "parameters": [
          {
            "name": "cards",
            "in": "query",
            "description": "Valid values: `all`, `closed`, `none`, `open`, `visible`. Cards is a nested resource. The additional query params available are documented at [Cards Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#cards-nested-resource)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "closed",
                "none",
                "open",
                "visible"
              ],
              "default": "none"
            }
          },
          {
            "name": "checkItems",
            "in": "query",
            "description": "The check items on the list to return. One of: `all`, `none`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "none"
              ],
              "default": "all"
            }
          },
          {
            "name": "checkItem_fields",
            "in": "query",
            "description": "The fields on the checkItem to return if checkItems are being returned. `all` or a comma-separated list of: `name`, `nameData`, `pos`, `state`, `type`, `due`, `dueReminder`, `idMember`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "name",
                "nameData",
                "pos",
                "state",
                "type",
                "due",
                "dueReminder",
                "idMember"
              ],
              "default": "all"
            },
            "x-ballerina-name": "checkItemFields"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of checklist [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "all"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [],
        "summary": "Update a Checklist",
        "description": "Update an existing checklist.",
        "operationId": "put-checlists-id",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name of the new checklist being created. Should be length of 1 to 16384",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pos",
            "in": "query",
            "description": "Determines the position of the checklist on the card. One of: `top`, `bottom`, or a positive number",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/PosStringOrNumber"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [],
        "summary": "Delete a Checklist",
        "description": "Delete a checklist",
        "operationId": "delete-checklists-id",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of a checklist",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/checklists/{id}/{field}": {
      "get": {
        "tags": [],
        "summary": "Get field on a Checklist",
        "description": "",
        "operationId": "get-checklists-id-field",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [],
        "summary": "Update field on a Checklist",
        "description": "",
        "operationId": "put-checklists-id-field",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "description": "The value to change the checklist name to. Should be a string of length 1 to 16384",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/Value"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of a checklist",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        },
        {
          "name": "field",
          "in": "path",
          "description": "Field to update",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string",
            "enum": [
              "name",
              "pos"
            ]
          }
        }
      ]
    },
    "/checklists/{id}/board": {
      "get": {
        "tags": [],
        "summary": "Get the Board the Checklist is on",
        "description": "",
        "operationId": "get-checklists-id-board",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of a checklist",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "name"
              ],
              "default": "all"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/checklists/{id}/cards": {
      "get": {
        "tags": [],
        "summary": "Get the Card a Checklist is on",
        "description": "",
        "operationId": "get-checklists-id-cards",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of a checklist",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/checklists/{id}/checkItems": {
      "get": {
        "tags": [],
        "summary": "Get Checkitems on a Checklist",
        "description": "",
        "operationId": "get-checklists-id-checkitems",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "One of: `all`, `none`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "none"
              ],
              "default": "all"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "One of: `all`, `name`, `nameData`, `pos`, `state`,`type`, `due`, `dueReminder`, `idMember`",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "name",
                "nameData",
                "pos",
                "state",
                "type",
                "due",
                "dueReminder",
                "idMember"
              ],
              "default": "all"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [],
        "summary": "Create Checkitem on Checklist",
        "description": "",
        "operationId": "post-checklists-id-checkitems",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The name of the new check item on the checklist. Should be a string of length 1 to 16384",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 16384,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "pos",
            "in": "query",
            "description": "The position of the check item in the checklist. One of: `top`, `bottom`, or a positive number",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/PosStringOrNumber"
            }
          },
          {
            "name": "checked",
            "in": "query",
            "description": "Determines whether the check item is already checked when created",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "due",
            "in": "query",
            "description": "A due date for the checkitem",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "dueReminder",
            "in": "query",
            "description": "A dueReminder for the due date on the checkitem",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "nullable": true
            }
          },
          {
            "name": "idMember",
            "in": "query",
            "description": "An ID of a member resource",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of a checklist",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/checklists/{id}/checkItems/{idCheckItem}": {
      "get": {
        "tags": [],
        "summary": "Get a Checkitem on a Checklist",
        "description": "",
        "operationId": "get-checklists-id-checkitems-idcheckitem",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "One of: `all`, `name`, `nameData`, `pos`, `state`, `type`, `due`, `dueReminder`, `idMember`,",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "name",
                "nameData",
                "pos",
                "state",
                "type",
                "due",
                "dueReminder",
                "idMember"
              ],
              "default": "all"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [],
        "summary": "Delete Checkitem from Checklist",
        "description": "Remove an item from a checklist",
        "operationId": "delete-checklists-id-checkitems-idcheckitem",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of a checklist",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        },
        {
          "name": "idCheckItem",
          "in": "path",
          "description": "ID of the check item to retrieve",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/customFields": {
      "post": {
        "tags": [],
        "summary": "Create a new Custom Field on a Board",
        "description": "Create a new Custom Field on a board.",
        "operationId": "post-customfields",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldsBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomField"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/customFields/{id}": {
      "get": {
        "tags": [],
        "summary": "Get a Custom Field",
        "description": "",
        "operationId": "get-customfields-id",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomField"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [],
        "summary": "Update a Custom Field definition",
        "description": "Update a Custom Field definition.",
        "operationId": "put-customfields-id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldsidBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomField"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [],
        "summary": "Delete a Custom Field definition",
        "description": "Delete a Custom Field from a board.",
        "operationId": "delete-customfields-id",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the Custom Field",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/customFields/{id}/options": {
      "get": {
        "tags": [],
        "summary": "Get Options of Custom Field drop down",
        "description": "Get the options of a drop down Custom Field",
        "operationId": "post-customfields-id-options",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [],
        "summary": "Add Option to Custom Field dropdown",
        "description": "Add an option to a dropdown Custom Field",
        "operationId": "get-customfields-id-options",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the customfield",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/customFields/{id}/options/{idCustomFieldOption}": {
      "get": {
        "tags": [],
        "summary": "Get Option of Custom Field dropdown",
        "description": "Retrieve a specific, existing Option on a given dropdown-type Custom Field",
        "operationId": "get-customfields-options-idcustomfieldoption",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [],
        "summary": "Delete Option of Custom Field dropdown",
        "description": "Delete an option from a Custom Field dropdown.",
        "operationId": "delete-customfields-options-idcustomfieldoption",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the customfielditem",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        },
        {
          "name": "idCustomFieldOption",
          "in": "path",
          "description": "ID of the customfieldoption to retrieve",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/emoji": {
      "get": {
        "tags": [],
        "summary": "List available Emoji",
        "description": "List available Emoji",
        "operationId": "emoji",
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "description": "The locale to return emoji descriptions and names in. Defaults to the logged in member's locale",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "spritesheets",
            "in": "query",
            "description": "`true` to return spritesheet URLs in the response",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Emoji"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/enterprises/{id}": {
      "get": {
        "tags": [],
        "summary": "Get an Enterprise",
        "description": "Get an enterprise by its ID.",
        "operationId": "get-enterprises-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the enterprise to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated list of: `id`, `name`, `displayName`, `prefs`, `ssoActivationFailed`, `idAdmins`, `idMembers` (Note that the members array returned will be paginated if `members` is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data. Read the SCIM documentation [here]() for more information on filtering), `idOrganizations`, `products`, `userTypes`, `idMembers`, `idOrganizations`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "all"
            }
          },
          {
            "name": "members",
            "in": "query",
            "description": "One of: `none`, `normal`, `admins`, `owners`, `all`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "none"
            }
          },
          {
            "name": "member_fields",
            "in": "query",
            "description": "One of: `avatarHash`, `fullName`, `initials`, `username`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "avatarHash, fullName, initials, username"
            },
            "x-ballerina-name": "memberFields"
          },
          {
            "name": "member_filter",
            "in": "query",
            "description": "Pass a [SCIM-style query](/cloud/trello/scim/) to filter members. This takes precedence over the all/normal/admins value of members. If any of the member_* args are set, the member array will be paginated",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "none"
            },
            "x-ballerina-name": "memberFilter"
          },
          {
            "name": "member_sort",
            "in": "query",
            "description": "This parameter expects a [SCIM-style](/cloud/trello/scim/) sorting value prefixed by a `-` to sort descending. If no `-` is prefixed, it will be sorted ascending. Note that the members array returned will be paginated if `members` is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "x-ballerina-name": "memberSort"
          },
          {
            "name": "member_sortBy",
            "in": "query",
            "description": "Deprecated: Please use member_sort. This parameter expects a [SCIM-style sorting value](/cloud/trello/scim/). Note that the members array returned will be paginated if `members` is `normal` or `admins`. Pagination can be controlled with `member_startIndex`, etc, and the API response's header will contain the total count and pagination state",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "none"
            },
            "x-ballerina-name": "memberSortBy"
          },
          {
            "name": "member_sortOrder",
            "in": "query",
            "description": "Deprecated: Please use member_sort. One of: `ascending`, `descending`, `asc`, `desc`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "id"
            },
            "x-ballerina-name": "memberSortOrder"
          },
          {
            "name": "member_startIndex",
            "in": "query",
            "description": "Any integer between 0 and 100",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-ballerina-name": "memberStartIndex"
          },
          {
            "name": "member_count",
            "in": "query",
            "description": "0 to 100",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-ballerina-name": "memberCount"
          },
          {
            "name": "organizations",
            "in": "query",
            "description": "One of: `none`, `members`, `public`, `all`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "none"
            }
          },
          {
            "name": "organization_fields",
            "in": "query",
            "description": "Any valid value that the [nested organization field resource]() accepts",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "none"
            },
            "x-ballerina-name": "organizationFields"
          },
          {
            "name": "organization_paid_accounts",
            "in": "query",
            "description": "Whether or not to include paid account information in the returned workspace objects",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-ballerina-name": "organizationPaidAccounts"
          },
          {
            "name": "organization_memberships",
            "in": "query",
            "description": "Comma-seperated list of: `me`, `normal`, `admin`, `active`, `deactivated`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "none"
            },
            "x-ballerina-name": "organizationMemberships"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Enterprise"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/enterprises/{id}/auditlog": {
      "get": {
        "tags": [],
        "summary": "Get auditlog data for an Enterprise",
        "description": "Returns an array of Actions related to the Enterprise object. Used for populating data sent to Google Sheets from an Enterprise's audit log page: https://trello.com/e/{enterprise_name}/admin/auditlog. An Enterprise admin token is required for this route. \n\n NOTE: For enterprises that have opted in to user management via AdminHub, the auditlog will will contain actions taken in AdminHub, but may not contain the source for those actions.",
        "operationId": "get-enterprises-id-auditlog",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the enterprise to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnterpriseAuditLog"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enterprises/{id}/admins": {
      "get": {
        "tags": [],
        "summary": "Get Enterprise admin Members",
        "description": "Get an enterprise's admin members.",
        "operationId": "get-enterprises-id-admins",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the enterprise to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Any valid value that the [nested member field resource]() accepts",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "fullName, userName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnterpriseAdmin"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/enterprises/{id}/signupUrl": {
      "get": {
        "tags": [],
        "summary": "Get signupUrl for Enterprise",
        "description": "Get the signup URL for an enterprise.",
        "operationId": "get-enterprises-id-signupurl",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the enterprise to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "authenticate",
            "in": "query",
            "description": "",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "confirmationAccepted",
            "in": "query",
            "description": "",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "returnUrl",
            "in": "query",
            "description": "Any valid URL",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "url",
              "nullable": true
            }
          },
          {
            "name": "tosAccepted",
            "in": "query",
            "description": "Designates whether the user has seen/consented to the Trello ToS prior to being redirected to the enterprise signup page/their IdP",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineResponse200"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/enterprises/{id}/members/query": {
      "get": {
        "tags": [],
        "summary": "Get Users of an Enterprise",
        "description": "Get an enterprise's users. You can choose to retrieve licensed members, board guests, etc. The response is paginated and will return 100 users at a time.",
        "operationId": "get-users-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the enterprise to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "licensed",
            "in": "query",
            "description": "When true, returns members who possess a license for the corresponding Trello Enterprise; when false, returns members who do not. If unspecified, both licensed and unlicensed members will be returned",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "deactivated",
            "in": "query",
            "description": "When true, returns members who have been deactivated for the corresponding Trello Enterprise; when false, returns members who have not. If unspecified, both active and deactivated members will be returned",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "collaborator",
            "in": "query",
            "description": "When true, returns members who are guests on one or more boards in the corresponding Trello Enterprise (but do not possess a license); when false, returns members who are not. If unspecified, both guests and non-guests will be returned",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "managed",
            "in": "query",
            "description": "When true, returns members who are managed by the corresponding Trello Enterprise; when false, returns members who are not. If unspecified, both managed and unmanaged members will be returned",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "admin",
            "in": "query",
            "description": "When true, returns members who are administrators of the corresponding Trello Enterprise; when false, returns members who are not. If unspecified, both admin and non-admin members will be returned",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "activeSince",
            "in": "query",
            "description": "Returns only Trello users active since this date (inclusive)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "none"
            }
          },
          {
            "name": "inactiveSince",
            "in": "query",
            "description": "Returns only Trello users active since this date (inclusive)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "none"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Returns members with email address or full name that start with the search value",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "none"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor to return next set of results, use cursor returned in the response to query the next batch",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "none"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Membership"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/enterprises/{id}/members": {
      "get": {
        "tags": [],
        "summary": "Get Members of Enterprise",
        "description": "Get the members of an enterprise.",
        "operationId": "get-enterprises-id-members",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Enterprise to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A comma-seperated list of valid [member fields](/cloud/trello/guides/rest-api/object-definitions/#member-object)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "avatarHash, fullName, initials, username"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Pass a [SCIM-style query](/cloud/trello/scim/) to filter members. This takes precedence over the all/normal/admins value of members. If any of the below member_* args are set, the member array will be paginated",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "This parameter expects a [SCIM-style](/cloud/trello/scim/) sorting value prefixed by a `-` to sort descending. If no `-` is prefixed, it will be sorted ascending. Note that the members array returned will be paginated if `members` is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Deprecated: Please use `sort` instead. This parameter expects a [SCIM-style](/cloud/trello/scim/) sorting value. Note that the members array returned will be paginated if `members` is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Deprecated: Please use `sort` instead. One of: `ascending`, `descending`, `asc`, `desc`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "nullable": true,
              "enum": [
                "ascending",
                "descending",
                "asc",
                "desc",
                null
              ]
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Any integer between 0 and 9999",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 9999,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "[SCIM-style filter](/cloud/trello/scim/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "none"
            }
          },
          {
            "name": "organization_fields",
            "in": "query",
            "description": "Any valid value that the [nested organization field resource](/cloud/trello/guides/rest-api/nested-resources/) accepts",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "displayName"
            },
            "x-ballerina-name": "organizationFields"
          },
          {
            "name": "board_fields",
            "in": "query",
            "description": "Any valid value that the [nested board resource](/cloud/trello/guides/rest-api/nested-resources/) accepts",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "name"
            },
            "x-ballerina-name": "boardFields"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Member"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/enterprises/{id}/members/{idMember}": {
      "get": {
        "tags": [],
        "summary": "Get a Member of Enterprise",
        "description": "Get a specific member of an enterprise by ID.",
        "operationId": "get-enterprises-id-members-idmember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the enterprise to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idMember",
            "in": "path",
            "description": "An ID of a member resource",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of any valid values that the [nested member field resource]() accepts",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "avatarHash, fullName, initials, username"
            }
          },
          {
            "name": "organization_fields",
            "in": "query",
            "description": "Any valid value that the [nested organization field resource](/cloud/trello/guides/rest-api/nested-resources/) accepts",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "displayName"
            },
            "x-ballerina-name": "organizationFields"
          },
          {
            "name": "board_fields",
            "in": "query",
            "description": "Any valid value that the [nested board resource](/cloud/trello/guides/rest-api/nested-resources/) accepts",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "name"
            },
            "x-ballerina-name": "boardFields"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/enterprises/{id}/transferrable/organization/{idOrganization}": {
      "get": {
        "tags": [],
        "summary": "Get whether an organization can be transferred to an enterprise.",
        "description": "Get whether an organization can be transferred to an enterprise.",
        "operationId": "get-enterprises-id-transferrable-organization-idOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Enterprise to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idOrganization",
            "in": "path",
            "description": "An ID of an Organization resource",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferrableOrganization"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/enterprises/{id}/transferrable/bulk/{idOrganizations}": {
      "get": {
        "tags": [],
        "summary": "Get a bulk list of organizations that can be transferred to an enterprise.",
        "description": "Get a list of organizations that can be transferred to an enterprise when given a bulk list of organizations.",
        "operationId": "get-enterprises-id-transferrable-bulk-idOrganizations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Enterprise to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idOrganizations",
            "in": "path",
            "description": "An array of IDs of an Organization resource",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InlineParameterItemsIdOrganizations"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InlineResponseItems2004"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/enterprises/${id}/enterpriseJoinRequest/bulk": {
      "put": {
        "tags": [],
        "summary": "Decline enterpriseJoinRequests from one organization or a bulk list of organizations.",
        "description": "Decline enterpriseJoinRequests from one organization or bulk amount of organizations",
        "operationId": "put-enterprises-id-enterpriseJoinRequest-bulk",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Enterprise to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idOrganizations",
            "in": "query",
            "description": "An array of IDs of an Organization resource",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InlineParameterItemsIdOrganizations1"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/enterprises/{id}/claimableOrganizations": {
      "get": {
        "tags": [],
        "summary": "Get ClaimableOrganizations of an Enterprise",
        "description": "Get the Workspaces that are claimable by the enterprise by ID. Can optionally query for workspaces based on activeness/ inactiveness.",
        "operationId": "get-enterprises-id-claimableOrganizations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the enterprise to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of workspaces to be sorted",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Specifies the sort order to return matching documents",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the enterprise to retrieve workspaces for",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activeSince",
            "in": "query",
            "description": "Date in YYYY-MM-DD format indicating the date to search up to for activeness of workspace",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inactiveSince",
            "in": "query",
            "description": "Date in YYYY-MM-DD format indicating the date to search up to for inactiveness of workspace",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimableOrganizations"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "description": "Unexpected erorr",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/enterprises/{id}/pendingOrganizations": {
      "get": {
        "tags": [],
        "summary": "Get PendingOrganizations of an Enterprise",
        "description": "Get the Workspaces that are pending for the enterprise by ID.",
        "operationId": "get-enterprises-id-pendingOrganizations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the enterprise to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "activeSince",
            "in": "query",
            "description": "Date in YYYY-MM-DD format indicating the date to search up to for activeness of workspace",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inactiveSince",
            "in": "query",
            "description": "Date in YYYY-MM-DD format indicating the date to search up to for inactiveness of workspace",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PendingOrganizations"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "description": "Unexpected erorr",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/enterprises/{id}/tokens": {
      "post": {
        "tags": [],
        "summary": "Create an auth Token for an Enterprise.",
        "description": "Create an auth Token for an Enterprise.",
        "operationId": "post-enterprises-id-tokens",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the enterprise to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "One of: `1hour`, `1day`, `30days`, `never`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "none"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/enterprises/{id}/organizations": {
      "put": {
        "tags": [],
        "summary": "Transfer an Organization to an Enterprise.",
        "description": "Transfer an organization to an enterprise.\n\n NOTE: For enterprises that have opted in to user management via AdminHub, this endpoint will result in the organization being added to the enterprise asynchronously. A 200 response only indicates receipt of the request, it does not indicate successful addition to the enterprise.",
        "operationId": "put-enterprises-id-organizations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Enterprise to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idOrganization",
            "in": "query",
            "description": "ID of Organization to be transferred to Enterprise",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InlineResponseItems2005"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/enterprises/{id}/members/{idMember}/licensed": {
      "put": {
        "summary": "Update a Member's licensed status",
        "description": "This endpoint is used to update whether the provided Member should use one of the Enterprise's available licenses or not. Revoking a license will deactivate a Member of an Enterprise. \n\n NOTE: Revoking of licenses is not possible for enterprises that have opted in to user management via AdminHub.",
        "operationId": "put-enterprises-id-members-idmember-licensed",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Enterprise",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idMember",
            "in": "path",
            "description": "The ID of the Member",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "Boolean value to determine whether the user should be given an Enterprise license (true) or not (false)",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/enterprises/{id}/members/{idMember}/deactivated": {
      "put": {
        "tags": [],
        "summary": "Deactivate a Member of an Enterprise.",
        "description": "Deactivate a Member of an Enterprise.\n\n NOTE: Deactivation is not possible for enterprises that have opted in to user management via AdminHub.",
        "operationId": "enterprises-id-members-idMember-deactivated",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the enterprise to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idMember",
            "in": "path",
            "description": "ID of the Member to deactive",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "Determines whether the user is deactivated or not",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of any valid values that the [nested member field resource]() accepts",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/MemberFields"
            }
          },
          {
            "name": "organization_fields",
            "in": "query",
            "description": "Any valid value that the [nested organization resource](/cloud/trello/guides/rest-api/nested-resources/) accepts",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/OrganizationFields"
            },
            "x-ballerina-name": "organizationFields"
          },
          {
            "name": "board_fields",
            "in": "query",
            "description": "Any valid value that the [nested board resource](/cloud/trello/guides/rest-api/nested-resources/) accepts",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/BoardFields"
            },
            "x-ballerina-name": "boardFields"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/enterprises/{id}/admins/{idMember}": {
      "put": {
        "tags": [],
        "summary": "Update Member to be admin of Enterprise",
        "description": "Make Member an admin of Enterprise.\n\n NOTE: This endpoint is not available to enterprises that have opted in to user management via AdminHub.",
        "operationId": "put-enterprises-id-admins-idmember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the enterprise to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idMember",
            "in": "path",
            "description": "ID of member to be made an admin of enterprise",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [],
        "summary": "Remove a Member as admin from Enterprise.",
        "description": "Remove a member as admin from an enterprise.\n\n NOTE: This endpoint is not available to enterprises that have opted in to user management via AdminHub.",
        "operationId": "enterprises-id-organizations-idmember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Enterprise to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idMember",
            "in": "path",
            "description": "ID of the member to be removed as an admin from enterprise",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/enterprises/{id}/organizations/{idOrg}": {
      "delete": {
        "tags": [],
        "summary": "Delete an Organization from an Enterprise.",
        "description": "Remove an organization from an enterprise.",
        "operationId": "delete-enterprises-id-organizations-idorg",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the enterprise to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idOrg",
            "in": "path",
            "description": "ID of the organization to be removed from the enterprise",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/enterprises/{id}/organizations/bulk/{idOrganizations}": {
      "get": {
        "tags": [],
        "summary": "Bulk accept a set of organizations to an Enterprise.",
        "description": "Accept an array of organizations to an enterprise.\n\n NOTE: For enterprises that have opted in to user management via AdminHub, this endpoint will result in organizations being added to the enterprise asynchronously. A 200 response only indicates receipt of the request, it does not indicate successful addition to the enterprise.",
        "operationId": "get-enterprises-id-organizations-bulk-idOrganizations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the enterprise to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idOrganizations",
            "in": "path",
            "description": "An array of IDs of the organizations to be removed from the enterprise",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InlineParameterItemsIdOrganizations2"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/labels/{id}": {
      "get": {
        "tags": [],
        "summary": "Get a Label",
        "description": "Get information about a single Label.",
        "operationId": "get-labels-id",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "all or a comma-separated list of [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "all"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [],
        "summary": "Update a Label",
        "description": "Update a label by ID.",
        "operationId": "put-labels-id",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The new name for the label",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "color",
            "in": "query",
            "description": "The new color for the label. See: [fields](/cloud/trello/guides/rest-api/object-definitions/) for color options",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/Color"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [],
        "summary": "Delete a Label",
        "description": "Delete a label by ID.",
        "operationId": "delete-labels-id",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID of the Label",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/labels/{id}/{field}": {
      "put": {
        "tags": [],
        "summary": "Update a field on a label",
        "description": "Update a field on a label.",
        "operationId": "put-labels-id-field",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the label",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field",
            "in": "path",
            "description": "The field on the Label to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "color",
                "name"
              ]
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "The new value for the field",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/labels": {
      "post": {
        "tags": [],
        "summary": "Create a Label",
        "description": "Create a new Label on a Board.",
        "operationId": "post-labels",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name for the label",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "color",
            "in": "query",
            "description": "The color for the label",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/Color"
            }
          },
          {
            "name": "idBoard",
            "in": "query",
            "description": "The ID of the Board to create the Label on",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/lists/{id}": {
      "get": {
        "tags": [],
        "summary": "Get a List",
        "description": "Get information about a List",
        "operationId": "get-lists-id",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma separated list of List field names",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "name,closed,idBoard,pos"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrelloList"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [],
        "summary": "Update a List",
        "description": "Update the properties of a List",
        "operationId": "put-lists-id",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "New name for the list",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "closed",
            "in": "query",
            "description": "Whether the list should be closed (archived)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "idBoard",
            "in": "query",
            "description": "ID of a board the list should be moved to",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "pos",
            "in": "query",
            "description": "New position for the list: `top`, `bottom`, or a positive floating point number",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/Pos2"
            }
          },
          {
            "name": "subscribed",
            "in": "query",
            "description": "Whether the active member is subscribed to this list",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID of the list",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/lists": {
      "post": {
        "tags": [],
        "summary": "Create a new List",
        "description": "Create a new List on a Board",
        "operationId": "post-lists",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name for the list",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idBoard",
            "in": "query",
            "description": "The long ID of the board the list should be created on",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idListSource",
            "in": "query",
            "description": "ID of the List to copy into the new List",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "pos",
            "in": "query",
            "description": "Position of the list. `top`, `bottom`, or a positive floating point number",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/Pos3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrelloList"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/lists/{id}/archiveAllCards": {
      "post": {
        "tags": [],
        "summary": "Archive all Cards in List",
        "description": "Archive all cards in a list",
        "operationId": "post-lists-id-archiveallcards",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the list",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/lists/{id}/moveAllCards": {
      "post": {
        "tags": [],
        "summary": "Move all Cards in List",
        "description": "Move all Cards in a List",
        "operationId": "post-lists-id-moveallcards",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the list",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idBoard",
            "in": "query",
            "description": "The ID of the board the cards should be moved to",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idList",
            "in": "query",
            "description": "The ID of the list that the cards should be moved to",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/lists/{id}/closed": {
      "put": {
        "tags": [],
        "summary": "Archive or unarchive a list",
        "description": "Archive or unarchive a list",
        "operationId": "put-lists-id-closed",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the list",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "Set to true to close (archive) the list",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/lists/{id}/idBoard": {
      "put": {
        "tags": [],
        "summary": "Move List to Board",
        "description": "Move a List to a different Board",
        "operationId": "put-id-idboard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the list",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "The ID of the board to move the list to",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/lists/{id}/{field}": {
      "put": {
        "tags": [],
        "summary": "Update a field on a List",
        "description": "Rename a list",
        "operationId": "put-lists-id-field",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the list",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "field",
            "in": "path",
            "description": "The field on the List to be updated",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "pos",
                "subscribed"
              ]
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "The new value for the field",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/Value1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/lists/{id}/actions": {
      "get": {
        "tags": [],
        "summary": "Get Actions for a List",
        "description": "Get the Actions on a List",
        "operationId": "get-lists-id-actions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the list",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A comma-separated list of [action types](https://developer.atlassian.com/cloud/trello/guides/rest-api/action-types/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/lists/{id}/board": {
      "get": {
        "tags": [],
        "summary": "Get the Board a List is on",
        "description": "Get the board a list is on",
        "operationId": "get-lists-id-board",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the list",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/#board-object)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "all"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/lists/{id}/cards": {
      "get": {
        "tags": [],
        "summary": "Get Cards in a List",
        "description": "List the cards in a list",
        "operationId": "get-lists-id-cards",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the list",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Card"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/members/{id}": {
      "get": {
        "tags": [],
        "summary": "Get a Member",
        "description": "Get a member",
        "operationId": "get-members=id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or username of the member",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "actions",
            "in": "query",
            "description": "See the [Actions Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#actions-nested-resource)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "boards",
            "in": "query",
            "description": "See the [Boards Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#boards-nested-resource)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "boardBackgrounds",
            "in": "query",
            "description": "One of: `all`, `custom`, `default`, `none`, `premium`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "custom",
                "default",
                "none",
                "premium"
              ],
              "default": "none"
            }
          },
          {
            "name": "boardsInvited",
            "in": "query",
            "description": "`all` or a comma-separated list of: closed, members, open, organization, pinned, public, starred, unpinned",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "closed",
                "members",
                "open",
                "organization",
                "pinned",
                "public",
                "starred",
                "unpinned"
              ]
            }
          },
          {
            "name": "boardsInvited_fields",
            "in": "query",
            "description": "`all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/BoardFields"
            },
            "x-ballerina-name": "boardsInvitedFields"
          },
          {
            "name": "boardStars",
            "in": "query",
            "description": "Whether to return the boardStars or not",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "cards",
            "in": "query",
            "description": "See the [Cards Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#cards-nested-resource) for additional options",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "none"
            }
          },
          {
            "name": "customBoardBackgrounds",
            "in": "query",
            "description": "`all` or `none`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "none"
              ],
              "default": "none"
            }
          },
          {
            "name": "customEmoji",
            "in": "query",
            "description": "`all` or `none`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "none"
              ],
              "default": "none"
            }
          },
          {
            "name": "customStickers",
            "in": "query",
            "description": "`all` or `none`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "none"
              ],
              "default": "none"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/MemberFields"
            }
          },
          {
            "name": "notifications",
            "in": "query",
            "description": "See the [Notifications Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#notifications-nested-resource)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organizations",
            "in": "query",
            "description": "One of: `all`, `members`, `none`, `public`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "members",
                "none",
                "public"
              ],
              "default": "none"
            }
          },
          {
            "name": "organization_fields",
            "in": "query",
            "description": "`all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/OrganizationFields"
            },
            "x-ballerina-name": "organizationFields"
          },
          {
            "name": "organization_paid_account",
            "in": "query",
            "description": "Whether or not to include paid account information in the returned workspace object",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-ballerina-name": "organizationPaidAccount"
          },
          {
            "name": "organizationsInvited",
            "in": "query",
            "description": "One of: `all`, `members`, `none`, `public`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "members",
                "none",
                "public"
              ],
              "default": "none"
            }
          },
          {
            "name": "organizationsInvited_fields",
            "in": "query",
            "description": "`all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/OrganizationFields"
            },
            "x-ballerina-name": "organizationsInvitedFields"
          },
          {
            "name": "paid_account",
            "in": "query",
            "description": "Whether or not to include paid account information in the returned member object",
            "required": false,
            "deprecated": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-ballerina-name": "paidAccount"
          },
          {
            "name": "savedSearches",
            "in": "query",
            "description": "",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "tokens",
            "in": "query",
            "description": "`all` or `none`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "none"
              ],
              "default": "none"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineResponse2001"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [],
        "summary": "Update a Member",
        "description": "Update a Member",
        "operationId": "put-members-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or username of the member",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fullName",
            "in": "query",
            "description": "New name for the member. Cannot begin or end with a space",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "initials",
            "in": "query",
            "description": "New initials for the member. 1-4 characters long",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 4,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "New username for the member. At least 3 characters long, only lowercase letters, underscores, and numbers. Must be unique",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bio",
            "in": "query",
            "description": "",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "avatarSource",
            "in": "query",
            "description": "One of: `gravatar`, `none`, `upload`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "gravatar",
                "none",
                "upload"
              ]
            }
          },
          {
            "name": "prefs/colorBlind",
            "in": "query",
            "description": "",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            },
            "x-ballerina-name": "prefsColorBlind"
          },
          {
            "name": "prefs/locale",
            "in": "query",
            "description": "",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "x-ballerina-name": "prefsLocale"
          },
          {
            "name": "prefs/minutesBetweenSummaries",
            "in": "query",
            "description": "`-1` for disabled, `1`, or `60`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-ballerina-name": "prefsMinutesBetweenSummaries"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineResponse2001"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/members/{id}/{field}": {
      "get": {
        "tags": [],
        "summary": "Get a field on a Member",
        "description": "Get a particular property of a member",
        "operationId": "get-members-id-field",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or username of the member",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "field",
            "in": "path",
            "description": "One of the member [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/MemberFields"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineResponse2001"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/members/{id}/actions": {
      "get": {
        "tags": [],
        "summary": "Get a Member's Actions",
        "description": "List the actions for a member",
        "operationId": "get-members-id-actions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or username of the member",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A comma-separated list of [action types](https://developer.atlassian.com/cloud/trello/guides/rest-api/action-types/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InlineResponseItems2006"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/members/{id}/boardBackgrounds": {
      "get": {
        "tags": [],
        "summary": "Get Member's custom Board backgrounds",
        "description": "Get a member's custom board backgrounds",
        "operationId": "get-members-id-boardbackgrounds",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or username of the member",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "One of: `all`, `custom`, `default`, `none`, `premium`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "custom",
                "default",
                "none",
                "premium"
              ],
              "default": "all"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InlineResponseItems2007"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [],
        "summary": "Upload new boardBackground for Member",
        "description": "Upload a new boardBackground",
        "operationId": "post-members-id-boardbackgrounds-1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or username of the member",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InlineResponseItems2008"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/members/{id}/boardBackgrounds/{idBackground}": {
      "get": {
        "tags": [],
        "summary": "Get a boardBackground of a Member",
        "description": "Get a member's board background",
        "operationId": "get-members-id-boardbackgrounds-idbackground",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of: `brightness`, `fullSizeUrl`, `scaled`, `tile`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "brightness",
                "fullSizeUrl",
                "scaled",
                "tile"
              ],
              "default": "all"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardBackground"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [],
        "summary": "Update a Member's custom Board background",
        "description": "Update a board background",
        "operationId": "put-members-id-boardbackgrounds-idbackground",
        "parameters": [
          {
            "name": "brightness",
            "in": "query",
            "description": "One of: `dark`, `light`, `unknown`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "dark",
                "light",
                "unknown"
              ]
            }
          },
          {
            "name": "tile",
            "in": "query",
            "description": "Whether the background should be tiled",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardBackground"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [],
        "summary": "Delete a Member's custom Board background",
        "description": "Delete a board background",
        "operationId": "delete-members-id-boardbackgrounds-idbackground",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID or username of the member",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        },
        {
          "name": "idBackground",
          "in": "path",
          "description": "The ID of the board background",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/members/{id}/boardStars": {
      "get": {
        "tags": [],
        "summary": "Get a Member's boardStars",
        "description": "List a member's board stars",
        "operationId": "get-members-id-boardstars",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or username of the member",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [],
        "summary": "Create Star for Board",
        "description": "Star a new board on behalf of a Member",
        "operationId": "post-members-id-boardstars",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or username of the member",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/Id1"
            }
          },
          {
            "name": "idBoard",
            "in": "query",
            "description": "The ID of the board to star",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "pos",
            "in": "query",
            "description": "The position of the newly starred board. `top`, `bottom`, or a positive float",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/PosStringOrNumber"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BoardStars"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/members/{id}/boardStars/{idStar}": {
      "get": {
        "tags": [],
        "summary": "Get a boardStar of Member",
        "description": "Get a specific boardStar",
        "operationId": "get-members-id-boardstars-idstar",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardStars"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [],
        "summary": "Update the position of a boardStar of Member",
        "description": "Update the position of a starred board",
        "operationId": "put-members-id-boardstars-idstar",
        "parameters": [
          {
            "name": "pos",
            "in": "query",
            "description": "New position for the starred board. `top`, `bottom`, or a positive float",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/PosStringOrNumber"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [],
        "summary": "Delete Star for Board",
        "description": "Unstar a board",
        "operationId": "delete-members-id-boardstars-idstar",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID or username of the member",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        },
        {
          "name": "idStar",
          "in": "path",
          "description": "The ID of the board star",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/members/{id}/boards": {
      "get": {
        "tags": [],
        "summary": "Get Boards that Member belongs to",
        "description": "Lists the boards that the user is a member of.",
        "operationId": "get-members-id-boards",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or username of the member",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "`all` or a comma-separated list of: `closed`, `members`, `open`, `organization`, `public`, `starred`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "closed",
                "members",
                "open",
                "organization",
                "public",
                "starred"
              ],
              "default": "all"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/BoardFields"
            }
          },
          {
            "name": "lists",
            "in": "query",
            "description": "Which lists to include with the boards. One of: `all`, `closed`, `none`, `open`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "closed",
                "none",
                "open"
              ],
              "default": "none"
            }
          },
          {
            "name": "organization",
            "in": "query",
            "description": "Whether to include the Organization object with the Boards",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "organization_fields",
            "in": "query",
            "description": "`all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/OrganizationFields"
            },
            "x-ballerina-name": "organizationFields"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Board"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/members/{id}/boardsInvited": {
      "get": {
        "tags": [],
        "summary": "Get Boards the Member has been invited to",
        "description": "Get the boards the member has been invited to",
        "operationId": "get-members-id-boardsinvited",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or username of the member",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/BoardFields"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Board"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/members/{id}/cards": {
      "get": {
        "tags": [],
        "summary": "Get Cards the Member is on",
        "description": "Gets the cards a member is on",
        "operationId": "get-members-id-cards",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or username of the member",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "One of: `all`, `closed`, `complete`, `incomplete`, `none`, `open`, `visible`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "closed",
                "complete",
                "incomplete",
                "none",
                "open",
                "visible"
              ],
              "default": "visible"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Card"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/members/{id}/customBoardBackgrounds": {
      "get": {
        "tags": [],
        "summary": "Get a Member's custom Board Backgrounds",
        "description": "Get a member's custom board backgrounds",
        "operationId": "get-members-id-customboardbackgrounds",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BoardBackground"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [],
        "summary": "Create a new custom Board Background",
        "description": "Upload a new custom board background",
        "operationId": "membersidcustomboardbackgrounds-1",
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "description": "",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardBackground"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID or username of the member",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/members/{id}/customBoardBackgrounds/{idBackground}": {
      "get": {
        "tags": [],
        "summary": "Get custom Board Background of Member",
        "description": "Get a specific custom board background",
        "operationId": "get-members-id-customboardbackgrounds-idbackground",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardBackground"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [],
        "summary": "Update custom Board Background of Member",
        "description": "Update a specific custom board background",
        "operationId": "put-members-id-customboardbackgrounds-idbackground",
        "parameters": [
          {
            "name": "brightness",
            "in": "query",
            "description": "One of: `dark`, `light`, `unknown`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "dark",
                "light",
                "unknown"
              ]
            }
          },
          {
            "name": "tile",
            "in": "query",
            "description": "Whether to tile the background",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardBackground"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [],
        "summary": "Delete custom Board Background of Member",
        "description": "Delete a specific custom board background",
        "operationId": "delete-members-id-customboardbackgrounds-idbackground",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID or username of the member",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TrelloID"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "name": "idBackground",
          "in": "path",
          "description": "The ID of the custom background",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/members/{id}/customEmoji": {
      "get": {
        "tags": [],
        "summary": "Get a Member's customEmojis",
        "description": "Get a Member's uploaded custom Emojis",
        "operationId": "get-members-id-customemoji",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomEmoji"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [],
        "summary": "Create custom Emoji for Member",
        "description": "Create a new custom Emoji",
        "operationId": "post-members-id-customemoji",
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "description": "",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name for the emoji. 2 - 64 characters",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 64,
              "minLength": 2,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEmoji"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID or username of the member",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/members/{id}/customEmoji/{idEmoji}": {
      "get": {
        "tags": [],
        "summary": "Get a Member's custom Emoji",
        "description": "Get a Member's custom Emoji",
        "operationId": "membersidcustomemojiidemoji",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or username of the member",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idEmoji",
            "in": "path",
            "description": "The ID of the custom emoji",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of `name`, `url`",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "url",
                "all"
              ],
              "default": "all"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEmoji"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/members/{id}/customStickers": {
      "get": {
        "tags": [],
        "summary": "Get Member's custom Stickers",
        "description": "Get a Member's uploaded stickers",
        "operationId": "get-members-id-customstickers",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomSticker"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [],
        "summary": "Create custom Sticker for Member",
        "description": "Upload a new custom sticker",
        "operationId": "post-members-id-customstickers",
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "description": "",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomSticker"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID or username of the member",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/members/{id}/customStickers/{idSticker}": {
      "get": {
        "tags": [],
        "summary": "Get a Member's custom Sticker",
        "description": "Get a Member's custom Sticker",
        "operationId": "get-members-id-customstickers-idsticker",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of `scaled`, `url`",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "scaled",
                "url",
                "all"
              ],
              "default": "all"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomSticker"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [],
        "summary": "Delete a Member's custom Sticker",
        "description": "Delete a Member's custom Sticker",
        "operationId": "delete-members-id-customstickers-idsticker",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID or username of the member",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        },
        {
          "name": "idSticker",
          "in": "path",
          "description": "The ID of the uploaded sticker",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/members/{id}/notifications": {
      "get": {
        "tags": [],
        "summary": "Get Member's Notifications",
        "description": "Get a member's notifications",
        "operationId": "get-members-id-notifications",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or username of the member",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "entities",
            "in": "query",
            "description": "",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "display",
            "in": "query",
            "description": "",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "all"
            }
          },
          {
            "name": "read_filter",
            "in": "query",
            "description": "One of: `all`, `read`, `unread`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "all"
            },
            "x-ballerina-name": "readFilter"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of notification [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "all"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max 1000",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Max 100",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "A notification ID",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "A notification ID",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberCreator",
            "in": "query",
            "description": "",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "memberCreator_fields",
            "in": "query",
            "description": "`all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "avatarHash,fullName,initials,username"
            },
            "x-ballerina-name": "memberCreatorFields"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Notification"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/members/{id}/organizations": {
      "get": {
        "tags": [],
        "summary": "Get Member's Organizations",
        "description": "Get a member's Workspaces",
        "operationId": "get-members-id-organizations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or username of the member",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "One of: `all`, `members`, `none`, `public` (Note: `members` filters to only private Workspaces)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "members",
                "none",
                "public"
              ],
              "default": "all"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/OrganizationFields"
            }
          },
          {
            "name": "paid_account",
            "in": "query",
            "description": "Whether or not to include paid account information in the returned workspace object",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-ballerina-name": "paidAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/members/{id}/organizationsInvited": {
      "get": {
        "tags": [],
        "summary": "Get Organizations a Member has been invited to",
        "description": "Get a member's Workspaces they have been invited to",
        "operationId": "get-members-id-organizationsinvited",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or username of the member",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/OrganizationFields"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/members/{id}/savedSearches": {
      "get": {
        "tags": [],
        "summary": "Get Member's saved searched",
        "description": "List the saved searches of a Member",
        "operationId": "get-members-id-savedsearches",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SavedSearch"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [],
        "summary": "Create saved Search for Member",
        "description": "Create a saved search",
        "operationId": "post-members-id-savedsearches",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The name for the saved search",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "The search query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pos",
            "in": "query",
            "description": "The position of the saved search. `top`, `bottom`, or a positive float",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/PosStringOrNumber"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedSearch"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID or username of the member",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/members/{id}/savedSearches/{idSearch}": {
      "get": {
        "tags": [],
        "summary": "Get a saved search",
        "description": "Get a saved search",
        "operationId": "get-members-id-savedsearches-idsearch",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedSearch"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [],
        "summary": "Update a saved search",
        "description": "Update a saved search",
        "operationId": "put-members-id-savedsearches-idsearch",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The new name for the saved search",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "The new search query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pos",
            "in": "query",
            "description": "New position for saves search. `top`, `bottom`, or a positive float",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedSearch"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [],
        "summary": "Delete a saved search",
        "description": "Delete a saved search",
        "operationId": "delete-members-id-savedsearches-idsearch",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID or username of the member",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "idSearch",
          "in": "path",
          "description": "The ID of the saved search to delete",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/members/{id}/tokens": {
      "get": {
        "tags": [],
        "summary": "Get Member's Tokens",
        "description": "List a members app tokens",
        "operationId": "get-members-id-tokens",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or username of the member",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "webhooks",
            "in": "query",
            "description": "Whether to include webhooks",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Token"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/members/{id}/avatar": {
      "post": {
        "tags": [],
        "summary": "Create Avatar for Member",
        "description": "Create a new avatar for a member",
        "operationId": "membersidavatar",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or username of the member",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/members/{id}/oneTimeMessagesDismissed": {
      "post": {
        "tags": [],
        "summary": "Dismiss a message for Member",
        "description": "Dismiss a message",
        "operationId": "post-members-id-onetimemessagesdismissed",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or username of the member",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "The message to dismiss",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/members/{id}/notificationsChannelSettings": {
      "get": {
        "tags": [],
        "summary": "Get a Member's notification channel settings",
        "description": "Get a member's notification channel settings",
        "operationId": "get-members-id-notificationChannelSettings",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationChannelSettings"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [],
        "summary": "Update blocked notification keys of Member on a channel",
        "description": "Update blocked notification keys of Member on a specific channel",
        "operationId": "put-members-id-notificationChannelSettings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdNotificationsChannelSettingsBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationChannelSettings"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID or username of the member",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TrelloID"
              },
              {
                "type": "string"
              }
            ]
          }
        }
      ]
    },
    "/members/{id}/notificationsChannelSettings/{channel}": {
      "get": {
        "tags": [],
        "summary": "Get blocked notification keys of Member on this channel",
        "description": "Get blocked notification keys of Member on a specific channel",
        "operationId": "get-members-id-notificationChannelSettings-channel",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationChannelSettings"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [],
        "summary": "Update blocked notification keys of Member on a channel",
        "description": "Update blocked notification keys of Member on a specific channel",
        "operationId": "put-members-id-notificationChannelSettings-channel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationsChannelSettingschannelBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationChannelSettings"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID or username of the member",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TrelloID"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "name": "channel",
          "in": "path",
          "description": "Channel to block notifications on",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/Channel"
          }
        }
      ]
    },
    "/members/{id}/notificationsChannelSettings/{channel}/{blockedKeys}": {
      "put": {
        "tags": [],
        "summary": "Update blocked notification keys of Member on a channel",
        "description": "Update blocked notification keys of Member on a specific channel",
        "operationId": "put-members-id-notificationChannelSettings-channel-blockedKeys",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationChannelSettings"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID or username of the member",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TrelloID"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "name": "channel",
          "in": "path",
          "description": "Channel to block notifications on",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/Channel"
          }
        },
        {
          "name": "blockedKeys",
          "in": "path",
          "description": "Singular key or comma-separated list of notification keys",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/BlockedKey"
          }
        }
      ]
    },
    "/notifications/{id}": {
      "get": {
        "tags": [],
        "summary": "Get a Notification",
        "description": "",
        "operationId": "get-notifications-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the notification",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "board",
            "in": "query",
            "description": "Whether to include the board object",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "board_fields",
            "in": "query",
            "description": "`all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/BoardFields"
            },
            "x-ballerina-name": "boardFields"
          },
          {
            "name": "card",
            "in": "query",
            "description": "Whether to include the card object",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "card_fields",
            "in": "query",
            "description": "`all` or a comma-separated list of card [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/CardFields"
            },
            "x-ballerina-name": "cardFields"
          },
          {
            "name": "display",
            "in": "query",
            "description": "Whether to include the display object with the results",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "entities",
            "in": "query",
            "description": "Whether to include the entities object with the results",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of notification [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/NotificationFields"
            }
          },
          {
            "name": "list",
            "in": "query",
            "description": "Whether to include the list object",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "member",
            "in": "query",
            "description": "Whether to include the member object",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "member_fields",
            "in": "query",
            "description": "`all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/MemberFields"
            },
            "x-ballerina-name": "memberFields"
          },
          {
            "name": "memberCreator",
            "in": "query",
            "description": "Whether to include the member object of the creator",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "memberCreator_fields",
            "in": "query",
            "description": "`all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/MemberFields"
            },
            "x-ballerina-name": "memberCreatorFields"
          },
          {
            "name": "organization",
            "in": "query",
            "description": "Whether to include the organization object",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "organization_fields",
            "in": "query",
            "description": "`all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/OrganizationFields"
            },
            "x-ballerina-name": "organizationFields"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineResponse2002"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [],
        "summary": "Update a Notification's read status",
        "description": "Update the read status of a notification",
        "operationId": "put-notifications-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the notification",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "unread",
            "in": "query",
            "description": "Whether the notification should be marked as read or not",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineResponse2002"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/notifications/{id}/{field}": {
      "get": {
        "tags": [],
        "summary": "Get a field of a Notification",
        "description": "Get a specific property of a notification",
        "operationId": "get-notifications-id-field",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the notification",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "field",
            "in": "path",
            "description": "A notification [field](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/NotificationFields"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineResponse2002"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/notifications/all/read": {
      "post": {
        "tags": [],
        "summary": "Mark all Notifications as read",
        "description": "Mark all notifications as read",
        "operationId": "post-notifications-all-read",
        "parameters": [
          {
            "name": "read",
            "in": "query",
            "description": "Boolean to specify whether to mark as read or unread (defaults to `true`, marking as read)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "A comma-seperated list of IDs. Allows specifying an array of notification IDs to change the read state for. This will become useful as we add grouping of notifications to the UI, with a single button to mark all notifications in the group as read/unread",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TrelloID"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineResponse2002"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/notifications/{id}/unread": {
      "put": {
        "tags": [],
        "summary": "Update Notification's read status",
        "description": "Update Notification's read status",
        "operationId": "put-notifications-id-unread",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the notification",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineResponse2002"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/{id}/board": {
      "get": {
        "tags": [],
        "summary": "Get the Board a Notification is on",
        "description": "Get the board a notification is associated with",
        "operationId": "get-notifications-id-board",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the notification",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of board[fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/BoardFields"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineResponse2003"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/notifications/{id}/card": {
      "get": {
        "tags": [],
        "summary": "Get the Card a Notification is on",
        "description": "Get the card a notification is associated with",
        "operationId": "get-notifications-id-card",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the notification",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of card [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/CardFields"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineResponse2004"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/notifications/{id}/list": {
      "get": {
        "tags": [],
        "summary": "Get the List a Notification is on",
        "description": "Get the list a notification is associated with",
        "operationId": "get-notifications-id-list",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the notification",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of list [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/ListFields"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineResponse2005"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/notifications/{id}/member": {
      "get": {
        "tags": [],
        "summary": "Get the Member a Notification is about (not the creator)",
        "description": "Get the member (not the creator) a notification is about",
        "operationId": "notificationsidmember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the notification",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/MemberFields"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineResponseItems2006"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/notifications/{id}/memberCreator": {
      "get": {
        "tags": [],
        "summary": "Get the Member who created the Notification",
        "description": "Get the member who created the notification",
        "operationId": "get-notifications-id-membercreator",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the notification",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/MemberFields"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineResponseItems2006"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/notifications/{id}/organization": {
      "get": {
        "tags": [],
        "summary": "Get a Notification's associated Organization",
        "description": "Get the organization a notification is associated with",
        "operationId": "get-notifications-id-organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the notification",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/OrganizationFields"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineResponse2006"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/organizations": {
      "post": {
        "tags": [],
        "summary": "Create a new Organization",
        "description": "Create a new Workspace",
        "operationId": "post-organizations",
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "The name to display for the Organization",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "desc",
            "in": "query",
            "description": "The description for the organizations",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "A string with a length of at least 3. Only lowercase letters, underscores, and numbers are allowed. If the name contains invalid characters, they will be removed. If the name conflicts with an existing name, a new name will be substituted",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minLength": 3,
              "type": "string"
            }
          },
          {
            "name": "website",
            "in": "query",
            "description": "A URL starting with `http://` or `https://`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "url"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineResponse2006"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/organizations/{id}": {
      "get": {
        "tags": [],
        "summary": "Get an Organization",
        "description": "",
        "operationId": "get-organizations-id",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [],
        "summary": "Update an Organization",
        "description": "Update an organization",
        "operationId": "put-organizations-id",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "A new name for the organization. At least 3 lowercase letters, underscores, and numbers. Must be unique",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "displayName",
            "in": "query",
            "description": "A new displayName for the organization. Must be at least 1 character long and not begin or end with a space",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "desc",
            "in": "query",
            "description": "A new description for the organization",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "website",
            "in": "query",
            "description": "A URL starting with `http://`, `https://`, or `null`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefs/associatedDomain",
            "in": "query",
            "description": "The Google Apps domain to link this org to",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefs/externalMembersDisabled",
            "in": "query",
            "description": "Whether non-workspace members can be added to boards inside the Workspace",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "prefs/googleAppsVersion",
            "in": "query",
            "description": "`1` or `2`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "prefs/boardVisibilityRestrict/org",
            "in": "query",
            "description": "Who on the Workspace can make Workspace visible boards. One of `admin`, `none`, `org`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefs/boardVisibilityRestrict/private",
            "in": "query",
            "description": "Who can make private boards. One of: `admin`, `none`, `org`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefs/boardVisibilityRestrict/public",
            "in": "query",
            "description": "Who on the Workspace can make public boards. One of: `admin`, `none`, `org`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefs/orgInviteRestrict",
            "in": "query",
            "description": "An email address with optional wildcard characters. (E.g. `subdomain.*.trello.com`)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefs/permissionLevel",
            "in": "query",
            "description": "Whether the Workspace page is publicly visible. One of: `private`, `public`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [],
        "summary": "Delete an Organization",
        "description": "Delete an Organization",
        "operationId": "delete-organizations-id",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID or name of the Organization",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/organizations/{id}/{field}": {
      "get": {
        "tags": [],
        "summary": "Get field on Organization",
        "description": "",
        "operationId": "get-organizations-id-field",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or name of the organization",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "field",
            "in": "path",
            "description": "An organization [field](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/OrganizationFields"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/organizations/{id}/actions": {
      "get": {
        "tags": [],
        "summary": "Get Actions for Organization",
        "description": "List the actions on a Workspace",
        "operationId": "get-organizations-id-actions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or name of the organization",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Action"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/organizations/{id}/boards": {
      "get": {
        "tags": [],
        "summary": "Get Boards in an Organization",
        "description": "List the boards in a Workspace",
        "operationId": "get-organizations-id-boards",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or name of the organization",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "`all` or a comma-separated list of: `open`, `closed`, `members`, `organization`, `public`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "open",
                "closed",
                "members",
                "organization",
                "public"
              ],
              "default": "all"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/BoardFields"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InlineResponseItems2009"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/organizations/{id}/exports": {
      "get": {
        "tags": [],
        "summary": "Retrieve Organization's Exports",
        "description": "Retrieve the exports that exist for the given organization",
        "operationId": "get-organizations-id-exports",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Export"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [],
        "summary": "Create Export for Organizations",
        "description": "Kick off CSV export for an organization",
        "operationId": "post-organizations-id-exports",
        "parameters": [
          {
            "name": "attachments",
            "in": "query",
            "description": "Whether the CSV should include attachments or not",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Export"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID or name of the Workspace",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/organizations/{id}/members": {
      "get": {
        "tags": [],
        "summary": "Get the Members of an Organization",
        "description": "List the members in a Workspace",
        "operationId": "get-organizations-id-members",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or name of the Organization",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InlineResponseItems20010"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [],
        "summary": "Update an Organization's Members",
        "description": "",
        "operationId": "put-organizations-id-members",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or name of the organization",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "An email address",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "email"
            }
          },
          {
            "name": "fullName",
            "in": "query",
            "description": "Name for the member, at least 1 character not beginning or ending with a space",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "One of: `admin`, `normal`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "admin",
                "normal"
              ],
              "default": "normal"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/organizations/{id}/memberships": {
      "get": {
        "tags": [],
        "summary": "Get Memberships of an Organization",
        "description": "List the memberships of a Workspace",
        "operationId": "get-organizations-id-memberships",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or name of the organization",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "`all` or a comma-separated list of: `active`, `admin`, `deactivated`, `me`, `normal`",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "active",
                "admin",
                "deactivated",
                "me",
                "normal"
              ],
              "default": "all"
            }
          },
          {
            "name": "member",
            "in": "query",
            "description": "Whether to include the Member objects with the Memberships",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InlineResponseItems20011"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/organizations/{id}/memberships/{idMembership}": {
      "get": {
        "tags": [],
        "summary": "Get a Membership of an Organization",
        "description": "Get a single Membership for an Organization",
        "operationId": "get-organizations-id-memberships-idmembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or name of the organization",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idMembership",
            "in": "path",
            "description": "The ID of the membership to load",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "member",
            "in": "query",
            "description": "Whether to include the Member object in the response",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineResponseItems20011"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/organizations/{id}/pluginData": {
      "get": {
        "tags": [],
        "summary": "Get the pluginData Scoped to Organization",
        "description": "Get organization scoped pluginData on this Workspace",
        "operationId": "get-organizations-id-plugindata",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or name of the organization",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InlineResponseItems20012"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/organizations/{id}/tags": {
      "get": {
        "tags": [],
        "summary": "Get Tags of an Organization",
        "description": "List the organization's collections",
        "operationId": "get-organizations-id-tags",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InlineResponseItems20013"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [],
        "summary": "Create a Tag in Organization",
        "description": "Create a Tag in an Organization",
        "operationId": "post-organizations-id-tags",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineResponseItems20013"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The ID or name of the Organization",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/TrelloID"
              }
            ]
          }
        }
      ]
    },
    "/organizations/{id}/members/{idMember}": {
      "put": {
        "tags": [],
        "summary": "Update a Member of an Organization",
        "description": "Add a member to a Workspace or update their member type.",
        "operationId": "put-organizations-id-members-idmember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or name of the organization",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idMember",
            "in": "path",
            "description": "The ID or username of the member to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/IdMember"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "One of: `admin`, `normal`",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "admin",
                "normal"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineResponseItems20010"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [],
        "summary": "Remove a Member from an Organization",
        "description": "Remove a member from a Workspace",
        "operationId": "delete-organizations-id-members",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or name of the organization",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/Id2"
            }
          },
          {
            "name": "idMember",
            "in": "path",
            "description": "The ID of the Member to remove from the Workspace",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/organizations/{id}/members/{idMember}/deactivated": {
      "put": {
        "tags": [],
        "summary": "Deactivate or reactivate a member of an Organization",
        "description": "Deactivate or reactivate a member of a Workspace",
        "operationId": "put-organizations-id-members-idmember-deactivated",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or name of the organization",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idMember",
            "in": "path",
            "description": "The ID or username of the member to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/IdMember1"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/organizations/{id}/logo": {
      "post": {
        "tags": [],
        "summary": "Update logo for an Organization",
        "description": "Set the logo image for a Workspace",
        "operationId": "post-organizations-id-logo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or name of the Workspace",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "Image file for the logo",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineResponse2006"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [],
        "summary": "Delete Logo for Organization",
        "description": "Delete a the logo from a Workspace",
        "operationId": "delete-organizations-id-logo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or name of the organization",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/organizations/{id}/members/{idMember}/all": {
      "delete": {
        "tags": [],
        "summary": "Remove a Member from an Organization and all Organization Boards",
        "description": "Remove a member from a Workspace and from all Workspace boards",
        "operationId": "organizations-id-members-idmember-all",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or name of the organization",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idMember",
            "in": "path",
            "description": "The ID of the member to remove from the Workspace",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/organizations/{id}/prefs/associatedDomain": {
      "delete": {
        "tags": [],
        "summary": "Remove the associated Google Apps domain from a Workspace",
        "description": "Remove the associated Google Apps domain from a Workspace",
        "operationId": "delete-organizations-id-prefs-associateddomain",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or name of the organization",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/organizations/{id}/prefs/orgInviteRestrict": {
      "delete": {
        "tags": [],
        "summary": "Delete the email domain restriction on who can be invited to the Workspace",
        "description": "Remove the email domain restriction on who can be invited to the Workspace",
        "operationId": "delete-organizations-id-prefs-orginviterestrict",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or name of the organization",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/organizations/{id}/tags/{idTag}": {
      "delete": {
        "tags": [],
        "summary": "Delete an Organization's Tag",
        "description": "Delete an organization's tag",
        "operationId": "delete-organizations-id-tags-idtag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or name of the organization",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idTag",
            "in": "path",
            "description": "The ID of the tag to delete",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/organizations/{id}/newBillableGuests/{idBoard}": {
      "get": {
        "tags": [],
        "summary": "Get Organizations new billable guests",
        "description": "Used to check whether the given board has new billable guests on it.",
        "operationId": "get-organizations-id-newbillableguests-idboard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or name of the organization",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idBoard",
            "in": "path",
            "description": "The ID of the board to check for new billable guests",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/plugins/{id}/": {
      "get": {
        "tags": [],
        "summary": "Get a Plugin",
        "description": "Get plugins",
        "operationId": "get-plugins-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or name of the organization",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [],
        "summary": "Update a Plugin",
        "description": "Update a Plugin",
        "operationId": "put-plugins-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID or name of the organization",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/plugins/{idPlugin}/listing": {
      "post": {
        "tags": [],
        "summary": "Create a Listing for Plugin",
        "description": "Create a new listing for a given locale for your Power-Up",
        "operationId": "post-plugins-idplugin-listing",
        "parameters": [
          {
            "name": "idPlugin",
            "in": "path",
            "description": "The ID of the Power-Up for which you are creating a new listing",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdPluginListingBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginListing"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/plugins/{id}/compliance/memberPrivacy": {
      "get": {
        "tags": [],
        "summary": "Get Plugin's Member privacy compliance",
        "description": "",
        "operationId": "get-plugins-id-compliance-memberprivacy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Power-Up",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/plugins/{idPlugin}/listings/{idListing}": {
      "put": {
        "tags": [],
        "summary": "Updating Plugin's Listing",
        "description": "Update an existing listing for your Power-Up",
        "operationId": "put-plugins-idplugin-listings-idlisting",
        "parameters": [
          {
            "name": "idPlugin",
            "in": "path",
            "description": "The ID of the Power-Up whose listing is being updated",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idListing",
            "in": "path",
            "description": "The ID of the existing listing for the Power-Up that is being updated",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdPluginListingBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginListing"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/search": {
      "get": {
        "tags": [],
        "summary": "Search Trello",
        "description": "Find what you're looking for in Trello",
        "operationId": "get-search",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "The search query with a length of 1 to 16384 characters",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 16834,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "idBoards",
            "in": "query",
            "description": "`mine` or a comma-separated list of Board IDs",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/IdBoards"
            }
          },
          {
            "name": "idOrganizations",
            "in": "query",
            "description": "A comma-separated list of Organization IDs",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idCards",
            "in": "query",
            "description": "A comma-separated list of Card IDs",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "modelTypes",
            "in": "query",
            "description": "What type or types of Trello objects you want to search. all or a comma-separated list of: `actions`, `boards`, `cards`, `members`, `organizations`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "all"
            }
          },
          {
            "name": "board_fields",
            "in": "query",
            "description": "all or a comma-separated list of: `closed`, `dateLastActivity`, `dateLastView`, `desc`, `descData`, `idOrganization`, `invitations`, `invited`, `labelNames`, `memberships`, `name`, `pinned`, `powerUps`, `prefs`, `shortLink`, `shortUrl`, `starred`, `subscribed`, `url`",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "name,idOrganization"
            },
            "x-ballerina-name": "boardFields"
          },
          {
            "name": "boards_limit",
            "in": "query",
            "description": "The maximum number of boards returned. Maximum: 1000",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 1000,
              "type": "integer",
              "default": 10
            },
            "x-ballerina-name": "boardsLimit"
          },
          {
            "name": "board_organization",
            "in": "query",
            "description": "Whether to include the parent organization with board results",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-ballerina-name": "boardOrganization"
          },
          {
            "name": "card_fields",
            "in": "query",
            "description": "all or a comma-separated list of: `badges`, `checkItemStates`, `closed`, `dateLastActivity`, `desc`, `descData`, `due`, `idAttachmentCover`, `idBoard`, `idChecklists`, `idLabels`, `idList`, `idMembers`, `idMembersVoted`, `idShort`, `labels`, `manualCoverAttachment`, `name`, `pos`, `shortLink`, `shortUrl`, `subscribed`, `url`",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "all"
            },
            "x-ballerina-name": "cardFields"
          },
          {
            "name": "cards_limit",
            "in": "query",
            "description": "The maximum number of cards to return. Maximum: 1000",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "maximum": 1000,
              "type": "integer",
              "default": 10
            },
            "x-ballerina-name": "cardsLimit"
          },
          {
            "name": "cards_page",
            "in": "query",
            "description": "The page of results for cards. Maximum: 100",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100,
              "type": "number",
              "default": 0
            },
            "x-ballerina-name": "cardsPage"
          },
          {
            "name": "card_board",
            "in": "query",
            "description": "Whether to include the parent board with card results",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-ballerina-name": "cardBoard"
          },
          {
            "name": "card_list",
            "in": "query",
            "description": "Whether to include the parent list with card results",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-ballerina-name": "cardList"
          },
          {
            "name": "card_members",
            "in": "query",
            "description": "Whether to include member objects with card results",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-ballerina-name": "cardMembers"
          },
          {
            "name": "card_stickers",
            "in": "query",
            "description": "Whether to include sticker objects with card results",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-ballerina-name": "cardStickers"
          },
          {
            "name": "card_attachments",
            "in": "query",
            "description": "Whether to include attachment objects with card results. A boolean value (true or false) or cover for only card cover attachments",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "false"
            },
            "x-ballerina-name": "cardAttachments"
          },
          {
            "name": "organization_fields",
            "in": "query",
            "description": "all or a comma-separated list of billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url, website",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "name,displayName"
            },
            "x-ballerina-name": "organizationFields"
          },
          {
            "name": "organizations_limit",
            "in": "query",
            "description": "The maximum number of Workspaces to return. Maximum 1000",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-ballerina-name": "organizationsLimit"
          },
          {
            "name": "member_fields",
            "in": "query",
            "description": "all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "avatarHash,fullName,initials,username,confirmed"
            },
            "x-ballerina-name": "memberFields"
          },
          {
            "name": "members_limit",
            "in": "query",
            "description": "The maximum number of members to return. Maximum 1000",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-ballerina-name": "membersLimit"
          },
          {
            "name": "partial",
            "in": "query",
            "description": "By default, Trello searches for each word in your query against exactly matching words within Member content. Specifying partial to be true means that we will look for content that starts with any of the words in your query.  If you are looking for a Card titled \"My Development Status Report\", by default you would need to search for \"Development\". If you have partial enabled, you will be able to search for \"dev\" but not \"velopment\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InlineResponseItems20014"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/search/members/": {
      "get": {
        "tags": [],
        "summary": "Search for Members",
        "description": "Search for Trello members.",
        "operationId": "get-search-members",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Search query 1 to 16384 characters long",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 16394,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return. Maximum of 20",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 20,
              "type": "integer",
              "format": "int32",
              "default": 8
            }
          },
          {
            "name": "idBoard",
            "in": "query",
            "description": "",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "idOrganization",
            "in": "query",
            "description": "",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "onlyOrgMembers",
            "in": "query",
            "description": "",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Member"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/tokens/{token}": {
      "get": {
        "tags": [],
        "summary": "Get a Token",
        "description": "Retrieve information about a token.",
        "operationId": "get-tokens-token",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of `dateCreated`, `dateExpires`, `idMember`, `identifier`, `permissions`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TokenFields"
            }
          },
          {
            "name": "webhooks",
            "in": "query",
            "description": "Determines whether to include webhooks",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/tokens/{token}/member": {
      "get": {
        "tags": [],
        "summary": "Get Token's Member",
        "description": "Retrieve information about a token's owner by token.",
        "operationId": "get-tokens-token-member",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "`all` or a comma-separated list of valid fields for [Member Object](/cloud/trello/guides/rest-api/object-definitions/)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/MemberFields"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/tokens/{token}/webhooks": {
      "get": {
        "tags": [],
        "summary": "Get Webhooks for Token",
        "description": "Retrieve all webhooks created with a Token.",
        "operationId": "get-tokens-token-webhooks",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Webhook"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [],
        "summary": "Create Webhooks for Token",
        "description": "Create a new webhook for a Token.",
        "operationId": "post-tokens-token-webhooks",
        "parameters": [
          {
            "name": "description",
            "in": "query",
            "description": "A description to be displayed when retrieving information about the webhook",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "callbackURL",
            "in": "query",
            "description": "The URL that the webhook should POST information to",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "url"
            }
          },
          {
            "name": "idModel",
            "in": "query",
            "description": "ID of the object to create a webhook on",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "token",
          "in": "path",
          "description": "",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/tokens/{token}/webhooks/{idWebhook}": {
      "get": {
        "tags": [],
        "summary": "Get a Webhook belonging to a Token",
        "description": "Retrieve a webhook created with a Token.",
        "operationId": "get-tokens-token-webhooks-idwebhook",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [],
        "summary": "Update a Webhook created by Token",
        "description": "Update a Webhook created by Token",
        "operationId": "tokenstokenwebhooks-1",
        "parameters": [
          {
            "name": "description",
            "in": "query",
            "description": "A description to be displayed when retrieving information about the webhook",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "callbackURL",
            "in": "query",
            "description": "The URL that the webhook should `POST` information to",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "url"
            }
          },
          {
            "name": "idModel",
            "in": "query",
            "description": "ID of the object that the webhook is on",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [],
        "summary": "Delete a Webhook created by Token",
        "description": "Delete a webhook created with given token.",
        "operationId": "delete-tokens-token-webhooks-idwebhook",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "token",
          "in": "path",
          "description": "",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "idWebhook",
          "in": "path",
          "description": "ID of the [Webhooks](ref:webhooks) to retrieve",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/tokens/{token}/": {
      "delete": {
        "tags": [],
        "summary": "Delete a Token",
        "description": "Delete a token.",
        "operationId": "delete-token",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    },
    "/webhooks/": {
      "post": {
        "tags": [],
        "summary": "Create a Webhook",
        "description": "Create a new webhook.",
        "operationId": "post-webhooks",
        "parameters": [
          {
            "name": "description",
            "in": "query",
            "description": "A string with a length from `0` to `16384`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "callbackURL",
            "in": "query",
            "description": "A valid URL that is reachable with a `HEAD` and `POST` request",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "url"
            }
          },
          {
            "name": "idModel",
            "in": "query",
            "description": "ID of the model to be monitored",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Determines whether the webhook is active and sending `POST` requests",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/webhooks/{id}": {
      "get": {
        "tags": [],
        "summary": "Get a Webhook",
        "description": "Get a webhook by ID. You must use the token query parameter and pass in the token the webhook was created under, or else you will encounter a 'webhook does not belong to token' error.",
        "operationId": "get-webhooks-id",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [],
        "summary": "Update a Webhook",
        "description": "Update a webhook by ID.",
        "operationId": "put-webhooks-id",
        "parameters": [
          {
            "name": "description",
            "in": "query",
            "description": "A string with a length from `0` to `16384`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "callbackURL",
            "in": "query",
            "description": "A valid URL that is reachable with a `HEAD` and `POST` request",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "url"
            }
          },
          {
            "name": "idModel",
            "in": "query",
            "description": "ID of the model to be monitored",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Determines whether the webhook is active and sending `POST` requests",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [],
        "summary": "Delete a Webhook",
        "description": "Delete a webhook by ID.",
        "operationId": "delete-webhooks-id",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the webhook to retrieve",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      ]
    },
    "/webhooks/{id}/{field}": {
      "get": {
        "tags": [],
        "summary": "Get a field on a Webhook",
        "description": "Get a field on a Webhook",
        "operationId": "webhooksidfield",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the webhook",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          {
            "name": "field",
            "in": "path",
            "description": "Field to retrieve. One of: `active`, `callbackURL`, `description`, `idModel`",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "callbackURL",
                "description",
                "idModel",
                "consecutiveFailures",
                "firstConsecutiveFailDate"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": false
      }
    }
  },
  "components": {
    "schemas": {
      "EnterpriseIdp": {
        "type": "object",
        "properties": {
          "loginUrl": {
            "type": "string",
            "format": "url",
            "nullable": true,
            "example": null
          },
          "certificate": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "requestSigned": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "EnterpriseLicenses": {
        "type": "object",
        "properties": {
          "totalMembers": {
            "type": "number",
            "format": "integer",
            "example": 5
          },
          "relatedEnterprises": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnterpriseLicensesRelatedEnterprises"
            }
          },
          "maxMembers": {
            "type": "number",
            "format": "integer",
            "nullable": true,
            "example": null
          }
        }
      },
      "Value1Value1Value1OneOf123": {
        "type": "string",
        "description": "The new position for the List",
        "enum": [
          "top",
          "bottom"
        ]
      },
      "ActionDisplayEntitiesMemberCreator": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "text": {
            "type": "string",
            "example": "Bob Loblaw (World)"
          },
          "type": {
            "type": "string",
            "example": "member"
          },
          "username": {
            "type": "string",
            "example": "bobloblaw"
          }
        }
      },
      "ActionData": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "example": "Can never go wrong with bowie"
          },
          "list": {
            "$ref": "#/components/schemas/ActionDataList"
          },
          "card": {
            "$ref": "#/components/schemas/ActionDataCard"
          },
          "board": {
            "$ref": "#/components/schemas/ActionDataBoard"
          }
        }
      },
      "Prefs": {
        "type": "object",
        "properties": {
          "backgroundBrightness": {
            "type": "string",
            "example": "dark"
          },
          "comments": {
            "type": "string"
          },
          "backgroundTopColor": {
            "type": "string",
            "example": "#ffffff"
          },
          "canBeEnterprise": {
            "type": "boolean"
          },
          "hideVotes": {
            "type": "boolean"
          },
          "backgroundImage": {
            "type": "string",
            "format": "uri"
          },
          "canBeOrg": {
            "type": "boolean"
          },
          "backgroundBottomColor": {
            "type": "string",
            "example": "#1e2e00"
          },
          "voting": {
            "type": "string",
            "enum": [
              "disabled",
              "enabled"
            ]
          },
          "calendarFeedEnabled": {
            "type": "boolean"
          },
          "backgroundTile": {
            "type": "boolean"
          },
          "canBePublic": {
            "type": "boolean"
          },
          "canBePrivate": {
            "type": "boolean"
          },
          "backgroundImageScaled": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageDescriptor"
            }
          },
          "permissionLevel": {
            "type": "string",
            "enum": [
              "org",
              "board"
            ]
          },
          "cardAging": {
            "$ref": "#/components/schemas/CardAging"
          },
          "canInvite": {
            "type": "boolean"
          },
          "invitations": {
            "type": "string",
            "enum": [
              "admins",
              "members"
            ]
          },
          "isTemplate": {
            "type": "boolean"
          },
          "background": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "cardCovers": {
            "type": "boolean"
          },
          "selfJoin": {
            "type": "boolean"
          }
        }
      },
      "InlineParameterItemsIdOrganizations": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/Organization"
          }
        ]
      },
      "CustomFieldItemsValue": {
        "type": "object",
        "properties": {
          "checked": {
            "type": "string",
            "example": "true"
          }
        }
      },
      "CustomFieldDisplayValue": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "example": "High"
          }
        }
      },
      "InlineParameterItemsIdMembers": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TrelloID"
          }
        ]
      },
      "CardsidCardcustomFieldidCustomFielditemValue": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2018-03-13T16:00:00Z"
          },
          "number": {
            "type": "number"
          },
          "checked": {
            "type": "boolean"
          },
          "text": {
            "type": "string"
          }
        },
        "description": "An object containing the key and value to set for the card's Custom Field value. The key used to set the value should match the type of Custom Field defined"
      },
      "IdOneOf2": {
        "type": "string"
      },
      "PluginData": {
        "type": "object",
        "properties": {
          "access": {
            "type": "string",
            "example": "private",
            "enum": [
              "private",
              "shared"
            ]
          },
          "scope": {
            "type": "string",
            "example": "organization",
            "enum": [
              "member",
              "board",
              "organization",
              "card"
            ]
          },
          "idPlugin": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "idModel": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "value": {
            "type": "string",
            "example": "{\"token\":\"S=s458:U=bda7cda:E=16fd2e21f55:C=1687b30f2c0:P=185:A=it-team-0604:V=2:H=3b0f3bac9c2a2af766202ebb9530a4a5\"}"
          }
        }
      },
      "LimitsObject": {
        "type": "object",
        "properties": {
          "warnAt": {
            "type": "number",
            "example": 32400
          },
          "disableAt": {
            "type": "number",
            "example": 36000
          },
          "status": {
            "type": "string",
            "enum": [
              "ok",
              "warning"
            ]
          }
        }
      },
      "Pos": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PosOneOf1"
          },
          {
            "$ref": "#/components/schemas/PosPosOneOf12"
          }
        ]
      },
      "PosOneOf1": {
        "type": "string",
        "enum": [
          "top",
          "bottom"
        ]
      },
      "Pos1OneOf1": {
        "type": "string",
        "enum": [
          "top",
          "bottom"
        ]
      },
      "MemberNonPublic": {
        "type": "object",
        "properties": {
          "avatarUrl": {
            "type": "string",
            "description": "A URL that references the non-public avatar for the member",
            "format": "url",
            "example": "https://trello-members.s3.amazonaws.com/5b02e7f4e1facdc393169f9d/db2adf80c2e6c26b76e1f10400eb4c45"
          },
          "avatarHash": {
            "type": "string",
            "example": "db2adf80c2e6c26b76e1f10400eb4c45"
          },
          "initials": {
            "type": "string",
            "example": "BC"
          },
          "fullName": {
            "type": "string",
            "example": "Bentley Cook"
          }
        },
        "description": "Profile data with restricted visibility. These fields are visible only to members of the\nsame organization. The values here (full name, for example) may differ from the values\nat the top level of the response\n"
      },
      "ActionDataBoard": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Mullets"
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "shortLink": {
            "type": "string",
            "example": "3CsPkqOF"
          }
        }
      },
      "CustomStickerScaled": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      },
      "InlineParameterItemsIdLabels": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TrelloID"
          }
        ]
      },
      "SavedSearch": {
        "type": "object",
        "properties": {
          "pos": {
            "$ref": "#/components/schemas/PosStringOrNumber"
          },
          "query": {
            "type": "string",
            "example": "@me"
          },
          "name": {
            "type": "string",
            "example": "My Cards"
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      },
      "ExportStatus": {
        "type": "object",
        "properties": {
          "stage": {
            "type": "string",
            "example": "Export_queued"
          },
          "finished": {
            "type": "boolean",
            "example": false
          },
          "attempts": {
            "type": "number",
            "example": 0
          }
        }
      },
      "CheckItemStatesOneOf1": {
        "type": "string"
      },
      "PendingOrganizations": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date"
          },
          "displayName": {
            "type": "string",
            "example": "Organization Name"
          },
          "idMember": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "membershipCount": {
            "type": "number",
            "example": 2
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "memberRequestor": {
            "$ref": "#/components/schemas/PendingOrganizationsMemberRequestor"
          },
          "logoUrl": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "transferability": {
            "$ref": "#/components/schemas/PendingOrganizationsTransferability"
          }
        }
      },
      "ClaimableOrganizationsOrganizations": {
        "type": "object",
        "properties": {
          "dateLastActive": {
            "type": "string",
            "description": "The date of the most recent activity on any of the boards in the workspace. If the workspace has no boards, or the boards have no activity, this value will be null",
            "format": "date",
            "nullable": true
          },
          "activeMembershipCount": {
            "type": "number",
            "example": 5
          },
          "displayName": {
            "type": "string",
            "example": "Organization Name"
          },
          "name": {
            "type": "string",
            "example": "organization_name"
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "logoUrl": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "idActiveAdmins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          "products": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "integer"
            }
          }
        }
      },
      "Notification": {
        "properties": {
          "id": {
            "type": "string",
            "example": "5dc591ac425f2a223aba0a8e"
          },
          "unread": {
            "type": "boolean",
            "example": true
          },
          "type": {
            "type": "string",
            "example": "cardDueSoon",
            "enum": [
              "cardDueSoon"
            ]
          },
          "date": {
            "type": "string",
            "example": "2019-11-08T16:02:52.763Z"
          },
          "dateRead": {
            "type": "string",
            "example": null
          },
          "data": {
            "type": "string",
            "example": null
          },
          "card": {
            "$ref": "#/components/schemas/Card"
          },
          "board": {
            "$ref": "#/components/schemas/Board"
          },
          "idMemberCreator": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "idAction": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "reactions": {
            "type": "array",
            "example": [],
            "items": {
              "type": "object"
            }
          }
        }
      },
      "CFValue": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string"
          }
        }
      },
      "MemberPrefsTwoFactor": {
        "type": "object",
        "properties": {
          "needsNewBackups": {
            "type": "boolean",
            "example": false
          },
          "enabled": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "Id2": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TrelloID"
          },
          {
            "$ref": "#/components/schemas/Id2OneOf2"
          }
        ]
      },
      "Id1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TrelloID"
          },
          {
            "$ref": "#/components/schemas/Id1OneOf2"
          }
        ]
      },
      "Pos2": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Pos2OneOf1"
          },
          {
            "$ref": "#/components/schemas/Pos2Pos2OneOf12"
          }
        ]
      },
      "TokenFields": {
        "type": "string",
        "enum": [
          "identifier",
          "idMember",
          "dateCreated",
          "dateExpires",
          "permissions"
        ]
      },
      "Pos3": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Pos3OneOf1"
          },
          {
            "$ref": "#/components/schemas/Pos3Pos3OneOf12"
          }
        ]
      },
      "Pos1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Pos1OneOf1"
          },
          {
            "$ref": "#/components/schemas/Pos1Pos1OneOf12"
          }
        ]
      },
      "CardsidCardcustomFieldsCustomFieldItems": {
        "type": "object",
        "properties": {
          "idValue": {
            "pattern": "^[0-9a-fA-F]{32}$",
            "description": "The ID of the option for the list type Custom Field. This is optional if Custom Field is not list type",
            "example": "5abbe4b7ddc1b351ef961414"
          },
          "idCustomField": {
            "pattern": "^[0-9a-fA-F]{32}$",
            "description": "The ID of the Custom Field",
            "example": "5abbe4b7ddc1b351ef961414"
          },
          "value": {
            "$ref": "#/components/schemas/CardsidCardcustomFieldsValue"
          }
        }
      },
      "IdMember1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TrelloID"
          },
          {
            "$ref": "#/components/schemas/IdMember1OneOf2"
          }
        ]
      },
      "NotificationFields": {
        "type": "string",
        "enum": [
          "id",
          "unread",
          "type",
          "date",
          "dateRead",
          "data",
          "card",
          "board",
          "idMemberCreator",
          "idAction",
          "reactions"
        ]
      },
      "NotificationChannelSettings": {
        "properties": {
          "id": {
            "type": "string",
            "example": "5dc591ac425f2a223aba0a8e"
          },
          "idMember": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "blockedKeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlockedKey"
            }
          },
          "channel": {
            "$ref": "#/components/schemas/Channel"
          }
        }
      },
      "CardsidCardcustomFieldidCustomFielditemcardsidCardcustomFieldidCustomFielditemOneOf12": {
        "type": "object",
        "properties": {
          "idValue": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      },
      "AttachmentsOneOf1": {
        "type": "string",
        "enum": [
          "cover"
        ]
      },
      "ActionFields": {
        "type": "string",
        "enum": [
          "id",
          "idMemberCreator",
          "data",
          "type",
          "date",
          "limits",
          "display",
          "memberCreator"
        ]
      },
      "Cover": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/CardsidValue"
          }
        }
      },
      "InlineResponse2001": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Member"
          }
        ]
      },
      "Webhook": {
        "type": "object",
        "properties": {
          "firstConsecutiveFailDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": null
          },
          "consecutiveFailures": {
            "type": "number",
            "example": 0
          },
          "description": {
            "type": "string",
            "example": "Board Webhook"
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "callbackURL": {
            "type": "string",
            "format": "url",
            "example": "https://mywebhookurl.com/?type=board"
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "idModel": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      },
      "InlineResponse2003": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Board"
          }
        ]
      },
      "CustomFieldDisplayOptions": {
        "type": "object",
        "properties": {
          "color": {
            "type": "string",
            "example": "red"
          },
          "pos": {
            "type": "number",
            "example": 16384
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "idCustomField": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "value": {
            "$ref": "#/components/schemas/CustomFieldDisplayValue"
          }
        }
      },
      "InlineResponse2002": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Notification"
          }
        ]
      },
      "InlineResponse2005": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TrelloList"
          }
        ]
      },
      "PosStringOrNumber": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PosStringOrNumberOneOf1"
          },
          {
            "$ref": "#/components/schemas/PosStringOrNumberPosStringOrNumberOneOf12"
          }
        ]
      },
      "InlineResponse2004": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Card"
          }
        ]
      },
      "Id1OneOf2": {
        "type": "string"
      },
      "CustomFieldsBody": {
        "required": [
          "idModel",
          "modelType",
          "name",
          "pos",
          "type"
        ],
        "type": "object",
        "properties": {
          "pos": {
            "$ref": "#/components/schemas/PosStringOrNumber"
          },
          "display_cardFront": {
            "type": "boolean",
            "description": "Whether this Custom Field should be shown on the front of Cards",
            "default": true,
            "x-ballerina-name": "displayCardFront"
          },
          "name": {
            "type": "string",
            "description": "The name of the Custom Field"
          },
          "options": {
            "type": "string",
            "description": "If the type is `checkbox` "
          },
          "modelType": {
            "type": "string",
            "description": "The type of model that the Custom Field is being defined on. This should always be `board`",
            "enum": [
              "board"
            ]
          },
          "type": {
            "type": "string",
            "description": "The type of Custom Field to create",
            "enum": [
              "checkbox",
              "list",
              "number",
              "text",
              "date"
            ]
          },
          "idModel": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      },
      "InlineResponse2006": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Organization"
          }
        ]
      },
      "CardsidCardcustomFieldidCustomFielditemOneOf1": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/CardsidCardcustomFieldidCustomFielditemValue"
          }
        }
      },
      "CardIdChecklists": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Checklist"
          },
          {
            "$ref": "#/components/schemas/TrelloID"
          }
        ]
      },
      "Label": {
        "type": "object",
        "properties": {
          "idBoard": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "color": {
            "$ref": "#/components/schemas/Color"
          },
          "name": {
            "maxLength": 16384,
            "minLength": 0,
            "type": "string",
            "description": "The name displayed for the label",
            "nullable": true,
            "example": "Overdue"
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      },
      "Attachment": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date"
          },
          "edgeColor": {
            "$ref": "#/components/schemas/Color"
          },
          "pos": {
            "type": "number",
            "format": "float",
            "example": 1638
          },
          "bytes": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "idMember": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "name": {
            "type": "string",
            "example": "Deprecation Extension Notice"
          },
          "previews": {
            "type": "array",
            "example": [],
            "items": {
              "type": "string"
            }
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "isUpload": {
            "type": "boolean",
            "example": false
          },
          "mimeType": {
            "type": "string",
            "example": ""
          },
          "url": {
            "type": "string",
            "format": "url",
            "example": "https://admin.typeform.com/form/RzExEM/share#/link"
          }
        }
      },
      "ActionDisplayEntitiesCard": {
        "type": "object",
        "properties": {
          "hideIfContext": {
            "type": "boolean"
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "text": {
            "type": "string",
            "example": "Bowie"
          },
          "type": {
            "type": "string",
            "example": "card"
          },
          "shortLink": {
            "type": "string",
            "example": "3CsPkqOF"
          }
        }
      },
      "CustomFieldItems": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "modelType": {
            "type": "string",
            "example": "card",
            "enum": [
              "card",
              "board",
              "member"
            ]
          },
          "value": {
            "$ref": "#/components/schemas/CustomFieldItemsValue"
          },
          "idCustomField": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "idModel": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      },
      "CardBadgesAttachmentsByType": {
        "type": "object",
        "properties": {
          "trello": {
            "$ref": "#/components/schemas/CardBadgesAttachmentsByTypeTrello"
          }
        }
      },
      "IdPluginListingBody": {
        "type": "object",
        "properties": {
          "overview": {
            "type": "string",
            "description": "The overview to show for the given locale"
          },
          "name": {
            "type": "string",
            "description": "The name to use for the given locale"
          },
          "description": {
            "type": "string",
            "description": "The description to show for the given locale"
          },
          "locale": {
            "type": "string",
            "description": "The locale that this listing should be displayed for"
          }
        }
      },
      "ImageDescriptor": {
        "type": "object",
        "properties": {
          "width": {
            "type": "integer",
            "description": "The width of the image",
            "example": 100
          },
          "url": {
            "type": "string",
            "description": "The URL of the image",
            "format": "url",
            "example": "https://trello-backgrounds.s3.amazonaws.com/SharedBackground/100x64/abc/photo-123.jpg"
          },
          "height": {
            "type": "integer",
            "description": "The height of the image",
            "example": 64
          }
        }
      },
      "InlineParameterItemsFields": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/AttachmentFields"
          }
        ]
      },
      "EnterpriseOrganizationPrefs": {
        "type": "object",
        "properties": {
          "boardDeleteRestrict": {
            "type": "object"
          },
          "attachmentRestrictions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "computer",
                "trello",
                "google-drive",
                "box",
                "onedrive",
                "link"
              ]
            }
          },
          "boardVisibilityRestrict": {
            "type": "object"
          }
        }
      },
      "InlineParameterItemsIdOrganizations2": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/Organization"
          }
        ]
      },
      "Color": {
        "type": "string",
        "nullable": true,
        "enum": [
          "yellow",
          "purple",
          "blue",
          "red",
          "green",
          "orange",
          "black",
          "sky",
          "pink",
          "lime"
        ]
      },
      "CustomFieldsidBody": {
        "type": "object",
        "properties": {
          "pos": {
            "$ref": "#/components/schemas/PosStringOrNumber"
          },
          "name": {
            "type": "string",
            "description": "The name of the Custom Field"
          },
          "display/cardFront": {
            "type": "boolean",
            "description": "Whether to display this custom field on the front of cards",
            "x-ballerina-name": "displayCardFront"
          }
        }
      },
      "InlineParameterItemsIdOrganizations1": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/Organization"
          }
        ]
      },
      "Checklist": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      },
      "ActionDisplayEntities": {
        "type": "object",
        "properties": {
          "memberCreator": {
            "$ref": "#/components/schemas/ActionDisplayEntitiesMemberCreator"
          },
          "comment": {
            "$ref": "#/components/schemas/ActionDisplayEntitiesComment"
          },
          "contextOn": {
            "$ref": "#/components/schemas/ActionDisplayEntitiesContextOn"
          },
          "card": {
            "$ref": "#/components/schemas/ActionDisplayEntitiesCard"
          }
        }
      },
      "IdNotificationsChannelSettingsBody": {
        "required": [
          "blockedKeys",
          "channel"
        ],
        "type": "object",
        "properties": {
          "blockedKeys": {
            "description": "Blocked key or array of blocked keys",
            "oneOf": [
              {
                "$ref": "#/components/schemas/BlockedKey"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BlockedKey"
                }
              }
            ]
          },
          "channel": {
            "$ref": "#/components/schemas/Channel"
          }
        }
      },
      "Action": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2020-03-09T19:41:51.396Z"
          },
          "data": {
            "$ref": "#/components/schemas/ActionData"
          },
          "display": {
            "$ref": "#/components/schemas/ActionDisplay"
          },
          "memberCreator": {
            "$ref": "#/components/schemas/ActionMemberCreator"
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "type": {
            "type": "string",
            "example": "commentCard"
          },
          "idMemberCreator": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "limits": {
            "$ref": "#/components/schemas/ActionLimits"
          }
        }
      },
      "OrganizationFields": {
        "type": "string",
        "enum": [
          "id",
          "name"
        ]
      },
      "Attachments": {
        "type": "string",
        "oneOf": [
          {
            "$ref": "#/components/schemas/AttachmentsOneOf1"
          },
          {
            "$ref": "#/components/schemas/AttachmentsAttachmentsOneOf12"
          }
        ],
        "default": "false"
      },
      "MembershipMember": {
        "type": "object",
        "properties": {
          "avatarURL": {
            "type": "string"
          },
          "initials": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "fullname": {
            "type": "string"
          },
          "memberType": {
            "type": "string"
          },
          "dateLastImpression": {
            "type": "string"
          },
          "confirmed": {
            "type": "boolean"
          },
          "email": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "example": "{\"id\":\"646e92a0a016198d3cf81e8a\",\"fullname\":\"Lex Math\",\"username\":\"amath\",\"dateLastImpression\":\"2023-05-24T22:41:36.406Z\",\"email\":\"amath@trello.com\",\"initials\":\"AM\",\"avatarURL\":\"trello.com/avatarURL\",\"memberType\":\"Admin\",\"confirmed\":true}"
      },
      "CardFields": {
        "type": "string",
        "description": "The fields on a Card",
        "enum": [
          "id",
          "address",
          "badges",
          "checkItemStates",
          "closed",
          "coordinates",
          "creationMethod",
          "dueComplete",
          "dateLastActivity",
          "desc",
          "descData",
          "due",
          "dueReminder",
          "idBoard",
          "idChecklists",
          "idLabels",
          "idList",
          "idMembers",
          "idMembersVoted",
          "idShort",
          "idAttachmentCover",
          "labels",
          "limits",
          "locationName",
          "manualCoverAttachment",
          "name",
          "pos",
          "shortLink",
          "shortUrl",
          "subscribed",
          "url",
          "cover",
          "isTemplate"
        ]
      },
      "ActionMemberCreator": {
        "type": "object",
        "properties": {
          "activityBlocked": {
            "type": "boolean",
            "example": false
          },
          "avatarHash": {
            "type": "string",
            "example": "db2adf80c2e6c26b76e1f10400eb4c45"
          },
          "avatarUrl": {
            "type": "string",
            "format": "url",
            "example": "https://trello-members.s3.amazonaws.com/5b02e7f4e1facdc393169f9d/db2adf80c2e6c26b76e1f10400eb4c45"
          },
          "initials": {
            "type": "string",
            "example": "BL"
          },
          "idMemberReferrer": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "fullName": {
            "type": "string",
            "example": "Bob Loblaw (Trello)"
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "username": {
            "type": "string",
            "example": "bobloblaw"
          }
        }
      },
      "MemberPrefsTimezoneInfo": {
        "type": "object",
        "properties": {
          "timezoneNext": {
            "type": "string",
            "example": "CDT"
          },
          "offsetCurrent": {
            "type": "integer",
            "example": 360
          },
          "offsetNext": {
            "type": "integer",
            "example": 300
          },
          "dateNext": {
            "type": "string",
            "format": "date"
          },
          "timezoneCurrent": {
            "type": "string",
            "example": "CST"
          }
        }
      },
      "EnterpriseAuditLogMemberCreator": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "example": "Bob Loblaw (Trello)"
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "username": {
            "type": "string",
            "example": "bobloblaw"
          }
        }
      },
      "CardsidCardcustomFieldsValue": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2018-03-13T16:00:00Z"
          },
          "number": {
            "type": "number"
          },
          "checked": {
            "type": "boolean"
          },
          "text": {
            "type": "string"
          }
        },
        "description": "An object containing the key and value to set for the card's Custom Field value. The key used to set the value should match the type of Custom Field defined. This is optional if Custom Field is list type"
      },
      "TrelloList": {
        "type": "object",
        "properties": {
          "subscribed": {
            "type": "boolean"
          },
          "idBoard": {
            "type": "string"
          },
          "pos": {
            "type": "number"
          },
          "name": {
            "type": "string",
            "description": "The name of the list",
            "example": "Things to buy today"
          },
          "closed": {
            "type": "boolean"
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "limits": {
            "$ref": "#/components/schemas/Limits"
          },
          "softLimit": {
            "type": "string"
          }
        }
      },
      "ListFields": {
        "type": "string",
        "enum": [
          "id"
        ]
      },
      "EnterpriseAuditLogOrganization": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "organization name"
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "enterpriseJoinRequest": {
            "$ref": "#/components/schemas/EnterpriseAuditLogOrganizationEnterpriseJoinRequest"
          }
        }
      },
      "PosPosOneOf12": {
        "minimum": 0,
        "type": "number",
        "format": "float"
      },
      "InlineResponseItems2008": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/BoardBackground"
          }
        ]
      },
      "InlineResponseItems2009": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Board"
          }
        ]
      },
      "InlineResponseItems2006": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Member"
          }
        ]
      },
      "InlineResponseItems2007": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/BoardBackground"
          }
        ]
      },
      "InlineResponseItems2004": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/TransferrableOrganization"
          }
        ]
      },
      "EnterpriseAuditLog": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date"
          },
          "organization": {
            "$ref": "#/components/schemas/EnterpriseAuditLogOrganization"
          },
          "memberCreator": {
            "$ref": "#/components/schemas/EnterpriseAuditLogMemberCreator"
          },
          "member": {
            "$ref": "#/components/schemas/EnterpriseAuditLogMember"
          },
          "type": {
            "type": "string",
            "example": "addOrganizationToEnterprise"
          },
          "idAction": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      },
      "InlineResponseItems2005": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/Organization"
          }
        ]
      },
      "InlineResponseItems2002": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Attachment"
          }
        ]
      },
      "InlineResponseItems2003": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Attachment"
          }
        ]
      },
      "InlineResponseItems2001": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Attachment"
          }
        ]
      },
      "PendingOrganizationsTransferabilityNewBillableMembers": {
        "type": "object",
        "properties": {
          "avatarHash": {
            "type": "string",
            "example": "fc8faaaee46666a4eb8b626c08933e16"
          },
          "initials": {
            "type": "string",
            "example": "BL"
          },
          "fullName": {
            "type": "string",
            "example": "Bob Loblaw"
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "username": {
            "type": "string",
            "example": "bobloblaw"
          }
        }
      },
      "CardBadges": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "integer",
            "example": 0
          },
          "attachments": {
            "type": "integer",
            "example": 0
          },
          "attachmentsByType": {
            "$ref": "#/components/schemas/CardBadgesAttachmentsByType"
          },
          "start": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "dueComplete": {
            "type": "boolean"
          },
          "description": {
            "type": "boolean"
          },
          "subscribed": {
            "type": "boolean",
            "example": false
          },
          "due": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "viewingMemberVoted": {
            "type": "boolean",
            "example": false
          },
          "location": {
            "type": "boolean"
          },
          "votes": {
            "type": "integer"
          },
          "fogbugz": {
            "type": "string"
          },
          "checkItems": {
            "type": "integer",
            "example": 0
          },
          "checkItemsChecked": {
            "type": "integer",
            "example": 0
          }
        }
      },
      "MemberPrefs": {
        "type": "object",
        "properties": {
          "colorBlind": {
            "type": "boolean",
            "example": true
          },
          "twoFactor": {
            "$ref": "#/components/schemas/MemberPrefsTwoFactor"
          },
          "minutesBetweenSummaries": {
            "type": "integer",
            "example": 60
          },
          "timezone": {
            "type": "string",
            "example": "America/Chicago"
          },
          "sendSummaries": {
            "type": "boolean",
            "example": true
          },
          "minutesBeforeDeadlineToNotify": {
            "type": "integer",
            "example": 1440
          },
          "privacy": {
            "$ref": "#/components/schemas/MemberPrefsPrivacy"
          },
          "timezoneInfo": {
            "$ref": "#/components/schemas/MemberPrefsTimezoneInfo"
          },
          "locale": {
            "type": "string",
            "example": "en-AU"
          }
        }
      },
      "Token": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "example": "App Name"
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time",
            "example": "2019-10-16T14:27:17.304Z"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenPermission"
            }
          },
          "idMember": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "dateExpires": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": null
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      },
      "ActionLimits": {
        "type": "object",
        "properties": {
          "reactions": {
            "$ref": "#/components/schemas/ActionLimitsReactions"
          }
        }
      },
      "Board": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "descData": {
            "type": "string",
            "nullable": true
          },
          "idTags": {
            "type": "string"
          },
          "pinned": {
            "type": "boolean",
            "example": false
          },
          "labelNames": {
            "$ref": "#/components/schemas/BoardLabelNames"
          },
          "shortUrl": {
            "type": "string",
            "format": "url",
            "example": "https://trello.com/b/dQHqCohZ"
          },
          "dateLastActivity": {
            "type": "string",
            "format": "date"
          },
          "datePluginDisable": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "shortLink": {
            "type": "string"
          },
          "memberships": {
            "type": "string"
          },
          "creationMethod": {
            "type": "string",
            "nullable": true
          },
          "subscribed": {
            "type": "boolean"
          },
          "starred": {
            "type": "boolean"
          },
          "idOrganization": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "dateLastView": {
            "type": "string",
            "format": "date"
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "limits": {
            "$ref": "#/components/schemas/Limits"
          },
          "powerUps": {
            "type": "string"
          },
          "templateGallery": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "url",
            "example": "https://trello.com/b/dQHqCohZ/trello-platform-changelog"
          },
          "prefs": {
            "$ref": "#/components/schemas/Prefs"
          },
          "enterpriseOwned": {
            "type": "boolean"
          },
          "ixUpdate": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "description": "The name of the board",
            "example": "Trello Platform Changes"
          },
          "closed": {
            "type": "boolean",
            "example": false
          },
          "idMemberCreator": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "desc": {
            "type": "string",
            "example": "Track changes to Trello's Platform on this board."
          }
        }
      },
      "InlineResponseItems20011": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Memberships"
          }
        ]
      },
      "Membership": {
        "type": "object",
        "properties": {
          "licensed": {
            "type": "boolean"
          },
          "managed": {
            "type": "boolean"
          },
          "member": {
            "$ref": "#/components/schemas/MembershipMember"
          },
          "admin": {
            "type": "boolean"
          },
          "deactivated": {
            "type": "boolean"
          },
          "collaborator": {
            "type": "boolean"
          }
        }
      },
      "InlineResponseItems20012": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PluginData"
          }
        ]
      },
      "InlineResponseItems20013": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Tag"
          }
        ]
      },
      "InlineResponseItems20014": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Member"
          },
          {
            "$ref": "#/components/schemas/Card"
          },
          {
            "$ref": "#/components/schemas/Board"
          },
          {
            "$ref": "#/components/schemas/Organization"
          }
        ]
      },
      "TransferrableOrganization": {
        "type": "object",
        "properties": {
          "restrictedMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PendingOrganizationsTransferabilityNewBillableMembers"
            }
          },
          "transferrable": {
            "type": "boolean",
            "example": true
          },
          "newBillableMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PendingOrganizationsTransferabilityNewBillableMembers"
            }
          }
        }
      },
      "InlineResponseItems20010": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Member"
          }
        ]
      },
      "CardDescData": {
        "type": "object",
        "properties": {
          "emoji": {
            "type": "object"
          }
        }
      },
      "EnterprisePrefsSignup": {
        "type": "object",
        "properties": {
          "banner": {
            "type": "string"
          },
          "bannerHtml": {
            "type": "string",
            "example": "<p>Hello</p>\n"
          }
        }
      },
      "PosStringOrNumberOneOf1": {
        "type": "string",
        "enum": [
          "top",
          "bottom"
        ]
      },
      "AttachmentFields": {
        "type": "string",
        "enum": [
          "id",
          "bytes",
          "date",
          "edgeColor",
          "idMember",
          "isUpload",
          "mimeType",
          "name",
          "previews",
          "url",
          "pos"
        ]
      },
      "PendingOrganizationsTransferability": {
        "type": "object",
        "properties": {
          "restrictedMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PendingOrganizationsTransferabilityNewBillableMembers"
            }
          },
          "transferrable": {
            "type": "boolean",
            "example": true
          },
          "newBillableMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PendingOrganizationsTransferabilityNewBillableMembers"
            }
          }
        }
      },
      "CardCover": {
        "type": "object",
        "properties": {
          "idUploadedBackground": {
            "type": "boolean",
            "nullable": true
          },
          "brightness": {
            "type": "string",
            "enum": [
              "light",
              "dark"
            ]
          },
          "color": {
            "$ref": "#/components/schemas/Color"
          },
          "size": {
            "type": "string",
            "enum": [
              "normal"
            ]
          },
          "idAttachment": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "isTemplate": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "Card": {
        "type": "object",
        "properties": {
          "descData": {
            "$ref": "#/components/schemas/CardDescData"
          },
          "idLabels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CardIdLabels"
            }
          },
          "shortUrl": {
            "type": "string",
            "format": "url",
            "example": "https://trello.com/c/H0TZyzbK"
          },
          "dateLastActivity": {
            "type": "string",
            "format": "date-time",
            "example": "2019-09-16T16:19:17.156Z"
          },
          "idList": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "idMembersVoted": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InlineParameterItemsIdLabels"
            }
          },
          "shortLink": {
            "type": "string",
            "example": "H0TZyzbK"
          },
          "creationMethod": {
            "type": "string",
            "nullable": true
          },
          "cover": {
            "$ref": "#/components/schemas/CardCover"
          },
          "dueReminder": {
            "type": "string",
            "nullable": true
          },
          "subscribed": {
            "type": "boolean",
            "example": false
          },
          "pos": {
            "type": "number",
            "format": "float",
            "example": 65535
          },
          "idChecklists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CardIdChecklists"
            }
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "limits": {
            "$ref": "#/components/schemas/Limits"
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "idBoard": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "locationName": {
            "type": "string",
            "nullable": true
          },
          "coordinates": {
            "type": "string",
            "nullable": true
          },
          "checkItemStates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CardCheckItemStates"
            }
          },
          "url": {
            "type": "string",
            "format": "url",
            "example": "https://trello.com/c/H0TZyzbK/4-%F0%9F%91%8B-what-why-how"
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InlineParameterItemsIdLabels"
            }
          },
          "badges": {
            "$ref": "#/components/schemas/CardBadges"
          },
          "idMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InlineParameterItemsIdLabels"
            }
          },
          "idShort": {
            "type": "integer"
          },
          "due": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "idAttachmentCover": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "name": {
            "type": "string",
            "example": "👋 What? Why? How?"
          },
          "closed": {
            "type": "boolean"
          },
          "manualCoverAttachment": {
            "type": "boolean",
            "example": false
          },
          "desc": {
            "type": "string",
            "example": "👋Hey there,\n\nTrello's Platform team uses this board to keep developers up-to-date."
          }
        }
      },
      "EnterpriseAuditLogMember": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "example": "Bentley Cook"
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "username": {
            "type": "string",
            "example": "bentleycook"
          }
        }
      },
      "CustomEmoji": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "chorizo"
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "url": {
            "type": "string",
            "format": "url",
            "example": "https://trello-emoji.s3.amazonaws.com/5589c3ea49b40cedc28cf70e/b40d9925f4e75495104b5e560881d8e4/chorizo.png"
          }
        }
      },
      "MemberMessagesDismissed": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "ad-security-features"
          },
          "count": {
            "type": "string",
            "example": "4"
          },
          "_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TrelloID"
              }
            ],
            "x-ballerina-name": "id"
          },
          "lastDismissed": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "CheckItem": {
        "type": "object",
        "properties": {
          "pos": {
            "type": "string",
            "example": "1673"
          },
          "idChecklist": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "name": {
            "type": "string"
          },
          "nameData": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "state": {
            "type": "string",
            "example": "incomplete",
            "enum": [
              "complete",
              "incomplete"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      },
      "Id": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TrelloID"
          },
          {
            "$ref": "#/components/schemas/IdOneOf2"
          }
        ]
      },
      "Pos3Pos3OneOf12": {
        "type": "string",
        "enum": [
          "top",
          "bottom"
        ]
      },
      "BlockedKey": {
        "type": "string",
        "example": "notification_comment_card",
        "enum": [
          "notification_comment_card",
          "notification_added_a_due_date",
          "notification_changed_due_date",
          "notification_card_due_soon",
          "notification_removed_from_card",
          "notification_added_attachment_to_card",
          "notification_created_card",
          "notification_moved_card",
          "notification_archived_card",
          "notification_unarchived_card"
        ]
      },
      "PendingOrganizationsMemberRequestor": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "example": "Bob Loblaw (Trello)"
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      },
      "BoardLabelNames": {
        "type": "object",
        "properties": {
          "orange": {
            "type": "string",
            "example": "Deprecation"
          },
          "red": {
            "type": "string",
            "example": "Deletion"
          },
          "sky": {
            "type": "string",
            "example": "Announcement"
          },
          "pink": {
            "type": "string",
            "example": "REST API"
          },
          "green": {
            "type": "string",
            "example": "Addition"
          },
          "blue": {
            "type": "string",
            "example": "News"
          },
          "lime": {
            "type": "string",
            "example": "Delight"
          },
          "yellow": {
            "type": "string",
            "example": "Update"
          },
          "black": {
            "type": "string",
            "example": "Capabilties"
          },
          "purple": {
            "type": "string",
            "example": "Power-Ups"
          }
        }
      },
      "Organization": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      },
      "BoardFields": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "desc",
          "descData",
          "closed",
          "idMemberCreator",
          "idOrganization",
          "pinned",
          "url",
          "shortUrl",
          "prefs",
          "labelNames",
          "starred",
          "limits",
          "memberships",
          "enterpriseOwned"
        ]
      },
      "Value1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Value1OneOf1"
          },
          {
            "$ref": "#/components/schemas/Value1Value1OneOf12"
          },
          {
            "$ref": "#/components/schemas/Value1Value1Value1OneOf123"
          },
          {
            "$ref": "#/components/schemas/Value1Value1Value1Value1OneOf1234"
          }
        ]
      },
      "ActionDisplayEntitiesComment": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "example": "Can never go wrong with bowie"
          },
          "type": {
            "type": "string",
            "example": "comment"
          }
        }
      },
      "Id2OneOf2": {
        "type": "string",
        "description": "Name of the organization"
      },
      "ActionLimitsReactions": {
        "type": "object",
        "properties": {
          "perAction": {
            "$ref": "#/components/schemas/ActionLimitsReactionsPerAction"
          },
          "uniquePerAction": {
            "$ref": "#/components/schemas/ActionLimitsReactionsPerAction"
          }
        }
      },
      "Value1Value1OneOf12": {
        "type": "number",
        "description": "The new position for the List",
        "format": "float"
      },
      "Value1Value1Value1Value1OneOf1234": {
        "type": "boolean"
      },
      "Export": {
        "type": "object",
        "properties": {
          "size": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "exportUrl": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "startedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2019-11-15T16:55:02Z"
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "status": {
            "$ref": "#/components/schemas/ExportStatus"
          }
        }
      },
      "CustomFieldDisplay": {
        "type": "object",
        "properties": {
          "pos": {
            "type": "string",
            "example": "98304,"
          },
          "name": {
            "type": "string",
            "example": "Priority 🏔"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldDisplayOptions"
            }
          },
          "cardFront": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "IdBoardsOneOf1": {
        "type": "string",
        "enum": [
          "mine"
        ]
      },
      "CustomFieldItemValue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "object"
          }
        }
      },
      "IdBoards": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/IdBoardsOneOf1"
          },
          {
            "$ref": "#/components/schemas/TrelloID"
          }
        ]
      },
      "IdCardCustomFieldsBody": {
        "type": "object",
        "properties": {
          "customFieldItems": {
            "type": "array",
            "description": "An array of objects containing the custom field ID, key and value, and ID of list type option",
            "items": {
              "$ref": "#/components/schemas/CardsidCardcustomFieldsCustomFieldItems"
            }
          }
        }
      },
      "PluginListing": {
        "type": "object",
        "properties": {
          "overview": {
            "type": "string",
            "example": ""
          },
          "name": {
            "type": "string",
            "example": "Attachment Section Example"
          },
          "description": {
            "type": "string",
            "example": "The [Glitch](https://glitch.com) Power-Up allows you to..."
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "locale": {
            "type": "string",
            "example": "en-US"
          }
        }
      },
      "IdActionReactionsBody": {
        "type": "object",
        "properties": {
          "skinVariation": {
            "type": "string",
            "description": "The `skinVariation` of the emoji to add. See [/emoji](#emoji)"
          },
          "native": {
            "type": "string",
            "description": "The emoji to add as a native unicode emoji. See [/emoji](#emoji)"
          },
          "unified": {
            "type": "string",
            "description": "The `unified` value of the emoji to add. See [/emoji](#emoji)"
          },
          "shortName": {
            "type": "string",
            "description": "The primary `shortName` of the emoji to add. See [/emoji](#emoji)"
          }
        }
      },
      "APIKey": {
        "pattern": "^[0-9a-fA-F]{32}$",
        "type": "string",
        "example": "0471642aefef5fa1fa76530ce1ba4c85"
      },
      "EnterpriseAdmin": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "example": "Bob Loblaw"
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "username": {
            "type": "string",
            "example": "bobloblaw"
          }
        }
      },
      "LimitsAttachments": {
        "type": "object",
        "properties": {
          "perBoard": {
            "$ref": "#/components/schemas/LimitsObject"
          }
        }
      },
      "Enterprise": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "example": "Bentley's Test Enterprise!"
          },
          "domains": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "url"
            }
          },
          "ssoActivationFailed": {
            "type": "boolean"
          },
          "dateOrganizationPrefsLastUpdated": {
            "type": "string",
            "format": "date"
          },
          "isRealEnterprise": {
            "type": "boolean",
            "example": true
          },
          "logoHash": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "logoUrl": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "prefs": {
            "$ref": "#/components/schemas/EnterprisePrefs"
          },
          "products": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "integer"
            }
          },
          "licenses": {
            "$ref": "#/components/schemas/EnterpriseLicenses"
          },
          "enterpriseDomains": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "url"
            }
          },
          "idp": {
            "$ref": "#/components/schemas/EnterpriseIdp"
          },
          "organizationPrefs": {
            "$ref": "#/components/schemas/EnterpriseOrganizationPrefs"
          },
          "idAdmins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          "name": {
            "type": "string",
            "example": "bentley_test"
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "pluginWhitelistingEnabled": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          "idOrganizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrelloID"
            }
          }
        }
      },
      "InlineResponseItems200": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/BoardStars"
          }
        ]
      },
      "Tag": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "My Collection"
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      },
      "MemberPrefsPrivacy": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "example": "public",
            "enum": [
              "public",
              "private",
              "collaborator"
            ]
          },
          "avatar": {
            "type": "string",
            "example": "public",
            "enum": [
              "public",
              "private",
              "collaborator"
            ]
          }
        }
      },
      "CardAging": {
        "type": "string",
        "enum": [
          "pirate",
          "regular"
        ]
      },
      "PosStringOrNumberPosStringOrNumberOneOf12": {
        "type": "number",
        "format": "float",
        "example": 1293.5
      },
      "EnterpriseAuditLogOrganizationEnterpriseJoinRequest": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date"
          },
          "idEnterprise": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "idMember": {
            "$ref": "#/components/schemas/TrelloID"
          }
        },
        "nullable": true
      },
      "IdMembersBody": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "description": "The full name of the user to as a member of the board. Must have a length of at least 1 and cannot begin nor end with a space"
          }
        }
      },
      "ActionDisplay": {
        "type": "object",
        "properties": {
          "translationKey": {
            "type": "string",
            "example": "action_comment_on_card"
          },
          "entities": {
            "$ref": "#/components/schemas/ActionDisplayEntities"
          }
        }
      },
      "Limits": {
        "type": "object",
        "properties": {
          "attachments": {
            "$ref": "#/components/schemas/LimitsAttachments"
          }
        }
      },
      "ViewFilter": {
        "type": "string",
        "enum": [
          "all",
          "closed",
          "none",
          "open"
        ]
      },
      "APIToken": {
        "type": "string",
        "example": "9eb76d9a9d02b8dd40c2f3e5df18556c831d4d1fadbe2c45f8310e6c93b5c548"
      },
      "Member": {
        "type": "object",
        "properties": {
          "idEnterprisesDeactivated": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "aaEnrolledDate": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "idMemberReferrer": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "bio": {
            "type": "string",
            "example": "👋 I'm a developer advocate at Trello!"
          },
          "avatarSource": {
            "type": "string",
            "example": "gravatar",
            "enum": [
              "gravatar",
              "upload"
            ]
          },
          "idBoardsPinned": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          "nonPublic": {
            "$ref": "#/components/schemas/MemberNonPublic"
          },
          "confirmed": {
            "type": "boolean",
            "example": true
          },
          "products": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "activityBlocked": {
            "type": "boolean",
            "example": false
          },
          "uploadedAvatarHash": {
            "type": "string",
            "example": "dac3ad49ff117829dd63a79bb2ea3426"
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "idOrganizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          "aaEmail": {
            "type": "string",
            "format": "email",
            "nullable": true,
            "example": null
          },
          "trophies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bioData": {
            "$ref": "#/components/schemas/CardDescData"
          },
          "email": {
            "type": "string",
            "example": "bcook@atlassian.com"
          },
          "idEnterprisesAdmin": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          "limits": {
            "$ref": "#/components/schemas/LimitsObject"
          },
          "uploadedAvatarUrl": {
            "type": "string",
            "format": "url",
            "example": "https://trello-avatars.s3.amazonaws.com/dac3ad49ff117829dd63a79bb2ea3426"
          },
          "messagesDismissed": {
            "$ref": "#/components/schemas/MemberMessagesDismissed"
          },
          "avatarUrl": {
            "type": "string",
            "format": "url",
            "example": "https://trello-avatars.s3.amazonaws.com/fc8faaaee46666a4eb8b626c08933e16"
          },
          "initials": {
            "type": "string",
            "example": "BC"
          },
          "oneTimeMessagesDismissed": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "nonPublicAvailable": {
            "type": "boolean",
            "description": "Whether the response contains non-public profile data for the member",
            "example": false
          },
          "fullName": {
            "type": "string",
            "example": "Bentley Cook"
          },
          "premiumFeatures": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "loginTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "password",
              "enum": [
                "password",
                "saml"
              ]
            }
          },
          "idPremOrgsAdmin": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          "url": {
            "type": "string",
            "format": "url",
            "example": "https://trello.com/bentleycook"
          },
          "marketingOptIn": {
            "$ref": "#/components/schemas/MemberMarketingOptIn"
          },
          "prefs": {
            "$ref": "#/components/schemas/MemberPrefs"
          },
          "gravatarHash": {
            "type": "string",
            "example": "0a1e804f6e35a65ae5e1f7ef4c92471c"
          },
          "ixUpdate": {
            "type": "number",
            "example": 48427
          },
          "avatarHash": {
            "type": "string",
            "example": "fc8faaaee46666a4eb8b626c08933e16"
          },
          "aaId": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "idEnterprise": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "isAaMastered": {
            "type": "boolean",
            "example": false
          },
          "memberType": {
            "type": "string",
            "example": "normal",
            "enum": [
              "normal",
              "ghost"
            ]
          },
          "idBoards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrelloID"
            }
          },
          "username": {
            "type": "string",
            "example": "bentleycook"
          },
          "status": {
            "type": "string",
            "example": "disconnected",
            "enum": [
              "disconnected"
            ]
          }
        }
      },
      "EnterpriseLicensesRelatedEnterprises": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "example": "My Test Enterprise!"
          },
          "name": {
            "type": "string",
            "example": "enterprise_name"
          },
          "count": {
            "type": "number",
            "format": "integer",
            "example": 5
          }
        }
      },
      "Value1OneOf1": {
        "type": "string",
        "description": "The new name for the List"
      },
      "IdMember1OneOf2": {
        "type": "string"
      },
      "EmojiTrello": {
        "type": "object",
        "properties": {
          "shortNames": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "grinning\""
            }
          },
          "tts": {
            "type": "string",
            "example": "grinning face"
          },
          "texts": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "face"
            }
          },
          "native": {
            "type": "string",
            "example": "😀"
          },
          "unified": {
            "type": "string",
            "example": "1F600"
          },
          "name": {
            "type": "string",
            "example": "GRINNING FACE"
          },
          "text": {
            "type": "string",
            "example": ":)"
          },
          "shortName": {
            "type": "string",
            "example": "grinning"
          },
          "category": {
            "type": "string",
            "example": "Smileys & People"
          },
          "sheetY": {
            "type": "number",
            "example": 24
          },
          "sheetX": {
            "type": "number",
            "example": 30
          }
        }
      },
      "CardIdLabels": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Label"
          },
          {
            "$ref": "#/components/schemas/TrelloID"
          }
        ]
      },
      "Channel": {
        "type": "string",
        "example": "email",
        "enum": [
          "email"
        ]
      },
      "BoardBackground": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      },
      "ActionDataCard": {
        "type": "object",
        "properties": {
          "idShort": {
            "type": "integer",
            "example": 7
          },
          "name": {
            "type": "string",
            "example": "Bowie"
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "shortLink": {
            "type": "string",
            "example": "3CsPkqOF"
          }
        }
      },
      "AttachmentsAttachmentsOneOf12": {
        "type": "boolean"
      },
      "TokenPermission": {
        "type": "object",
        "properties": {
          "read": {
            "type": "boolean"
          },
          "modelType": {
            "type": "string",
            "enum": [
              "board",
              "member",
              "organization",
              "enterprise"
            ]
          },
          "idModel": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TrelloID"
              },
              {
                "type": "string",
                "enum": [
                  "*"
                ]
              }
            ]
          },
          "write": {
            "type": "boolean"
          }
        }
      },
      "Value": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PosStringOrNumber"
          },
          {
            "$ref": "#/components/schemas/TrelloID"
          }
        ]
      },
      "EnterprisePrefs": {
        "type": "object",
        "properties": {
          "ssoOnly": {
            "type": "boolean",
            "example": false
          },
          "mandatoryTransferDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": null
          },
          "maxMembers": {
            "type": "number",
            "nullable": true,
            "example": null
          },
          "autoJoinOrganizations": {
            "type": "boolean",
            "example": false
          },
          "signup": {
            "$ref": "#/components/schemas/EnterprisePrefsSignup"
          },
          "brandingColor": {
            "type": "string"
          },
          "notifications": {
            "type": "object"
          }
        }
      },
      "ActionDisplayEntitiesContextOn": {
        "type": "object",
        "properties": {
          "hideIfContext": {
            "type": "boolean"
          },
          "idContext": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "translationKey": {
            "type": "string",
            "example": "action_on"
          },
          "type": {
            "type": "string",
            "example": "translatable"
          }
        }
      },
      "Memberships": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          }
        },
        "description": ""
      },
      "TrelloID": {
        "pattern": "^[0-9a-fA-F]{24}$",
        "type": "string",
        "example": "5abbe4b7ddc1b351ef961414"
      },
      "InlineResponse200": {
        "type": "object",
        "properties": {
          "signupUrl": {
            "type": "string"
          }
        }
      },
      "CardsidValue": {
        "type": "object",
        "properties": {
          "brightness": {
            "type": "string",
            "description": "Determines whether the text on the cover should be dark or light. Setting it to `light` will make the text on the card cover dark. And vice versa, setting it to dark will make the text on the card cover light",
            "enum": [
              "dark",
              "light"
            ]
          },
          "color": {
            "type": "string",
            "description": "One of: `pink, yellow, lime, blue, black, orange, red, purple, sky, green`",
            "example": "pink",
            "enum": [
              "pink",
              "yellow",
              "lime",
              "blue",
              "black",
              "orange",
              "red",
              "purple",
              "sky",
              "green"
            ]
          },
          "url": {
            "type": "string",
            "description": "Used if making an image the cover. Only Unsplash URLs (https://images.unsplash.com/) work",
            "format": "url"
          }
        },
        "description": "An object containing information regarding the card's cover \n `brightness` can be sent alongside any of the other parameters, but all of the other parameters are mutually exclusive; you can not have the cover be a color and an `idAttachment` at the same time"
      },
      "CardCheckItemStates": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CheckItemStatesOneOf1"
          }
        ]
      },
      "Pos1Pos1OneOf12": {
        "type": "number",
        "format": "float"
      },
      "ActionLimitsReactionsPerAction": {
        "type": "object",
        "properties": {
          "warnAt": {
            "type": "number",
            "example": 900
          },
          "disableAt": {
            "type": "number",
            "example": 1000
          },
          "status": {
            "type": "string",
            "example": "ok"
          }
        }
      },
      "CardBadgesAttachmentsByTypeTrello": {
        "type": "object",
        "properties": {
          "board": {
            "type": "number"
          },
          "card": {
            "type": "number"
          }
        }
      },
      "Pos2OneOf1": {
        "type": "number",
        "format": "float"
      },
      "Emoji": {
        "type": "object",
        "properties": {
          "trello": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmojiTrello"
            }
          }
        }
      },
      "BoardStars": {
        "type": "object",
        "properties": {
          "idBoard": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "pos": {
            "type": "integer",
            "example": 32768
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      },
      "ClaimableOrganizations": {
        "type": "object",
        "properties": {
          "claimableCount": {
            "type": "number",
            "example": 2
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClaimableOrganizationsOrganizations"
            }
          }
        }
      },
      "ActionDataList": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Amazing"
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      },
      "MemberMarketingOptIn": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date"
          },
          "optedIn": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "Pos3OneOf1": {
        "type": "number",
        "format": "float"
      },
      "Error": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Pos2Pos2OneOf12": {
        "type": "string",
        "enum": [
          "top",
          "bottom"
        ]
      },
      "NotificationsChannelSettingschannelBody": {
        "required": [
          "blockedKeys"
        ],
        "type": "object",
        "properties": {
          "blockedKeys": {
            "description": "Singular key or array of notification keys",
            "oneOf": [
              {
                "$ref": "#/components/schemas/BlockedKey"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BlockedKey"
                }
              }
            ]
          }
        }
      },
      "CustomSticker": {
        "type": "object",
        "properties": {
          "scaled": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomStickerScaled"
            }
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "url": {
            "type": "string",
            "format": "url"
          }
        }
      },
      "IdCustomFieldItemBody": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CardsidCardcustomFieldidCustomFielditemOneOf1"
          },
          {
            "$ref": "#/components/schemas/CardsidCardcustomFieldidCustomFielditemcardsidCardcustomFieldidCustomFielditemOneOf12"
          }
        ]
      },
      "CustomField": {
        "type": "object",
        "properties": {
          "display": {
            "$ref": "#/components/schemas/CustomFieldDisplay"
          },
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          },
          "modelType": {
            "type": "string",
            "example": "board",
            "enum": [
              "card",
              "board",
              "member"
            ]
          },
          "fieldGroup": {
            "type": "string",
            "example": "f6177ba6839d6fff0f73922c1cea105e793fda8a1433d466104dacc0b7c56955"
          },
          "type": {
            "type": "string",
            "example": "list"
          },
          "idModel": {
            "type": "string",
            "example": "586e8f681d4fe9b06a928307"
          }
        }
      },
      "IdMember": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/IdMemberOneOf1"
          },
          {
            "$ref": "#/components/schemas/TrelloID"
          }
        ]
      },
      "MemberFields": {
        "type": "string",
        "enum": [
          "id"
        ]
      },
      "IdMemberOneOf1": {
        "type": "string"
      },
      "Plugin": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TrelloID"
          }
        }
      }
    },
    "responses": {
      "NotFound": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "APIKey": {
        "type": "apiKey",
        "name": "key",
        "in": "query"
      },
      "APIToken": {
        "type": "apiKey",
        "name": "token",
        "in": "query"
      }
    }
  }
}